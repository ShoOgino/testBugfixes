{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.shutdown(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bf9e42a1bc604fd17e6f690e711dbb81baff427","date":1397075731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.shutdown(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy()));\n      }\n      writer.shutdown();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93b12a2453870ff6495549d6b2be3e352c8f3117","date":1417053020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    if (directory instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) directory).setPreventDoubleWrite(false);\n    }\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<atLeast(3);iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy()).\n              setCommitOnClose(false);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setStringValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        writer.commit();\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final AtomicReference<Throwable> failure = new AtomicReference<>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.set(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        t1.start();\n\n        writer.close();\n        t1.join();\n\n        if (failure.get() != null) {\n          throw failure.get();\n        }\n\n        // Make sure reader can read\n        IndexReader reader = DirectoryReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                              .setOpenMode(OpenMode.APPEND)\n                                              .setMergePolicy(newLogMergePolicy())\n                                              .setCommitOnClose(false));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"93b12a2453870ff6495549d6b2be3e352c8f3117":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["2bf9e42a1bc604fd17e6f690e711dbb81baff427"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["93b12a2453870ff6495549d6b2be3e352c8f3117"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93b12a2453870ff6495549d6b2be3e352c8f3117","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"2bf9e42a1bc604fd17e6f690e711dbb81baff427":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93b12a2453870ff6495549d6b2be3e352c8f3117":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93b12a2453870ff6495549d6b2be3e352c8f3117"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2bf9e42a1bc604fd17e6f690e711dbb81baff427"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2bf9e42a1bc604fd17e6f690e711dbb81baff427":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}