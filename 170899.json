{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", 0.0));\n    doc.add(new NumericField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", 0.0));\n    doc.add(new NumericField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\", 0.0));\n    doc.add(new NumericField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0));\n    doc.add(new LongField(\"long\", 0L));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new DoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new DoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"770342641f7b505eaa8dccdc666158bff2419109":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["770342641f7b505eaa8dccdc666158bff2419109"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}