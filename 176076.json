{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      // return the empty term, as its valid\n      if (runAutomaton.run(\"\")) {\n        seekBytesRef.copy(\"\");\n        return seekBytesRef;\n      }\n      \n      utf16.copyText(\"\");\n    } else {\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      if (linear)\n        setLinear(infinitePosition);\n      UnicodeUtil.nextValidUTF16String(utf16);\n      UnicodeUtil.UTF16toUTF8(utf16.result, 0, utf16.length, seekBytesRef);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      // return the empty term, as its valid\n      if (runAutomaton.run(\"\")) {\n        seekBytesRef.copy(\"\");\n        return seekBytesRef;\n      }\n      \n      utf16.copyText(\"\");\n    } else {\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      if (linear)\n        setLinear(infinitePosition);\n      UnicodeUtil.nextValidUTF16String(utf16);\n      UnicodeUtil.UTF16toUTF8(utf16.result, 0, utf16.length, seekBytesRef);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77e979fe3f668c9c78154b88242e6da53322ee97","date":1273817535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      \n      // FIXME: this is really bad to turn off\n      // but it cannot work correctly until terms are in utf8 order.\n      linear = false;\n      \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n           \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      \n      // FIXME: this is really bad to turn off\n      // but it cannot work correctly until terms are in utf8 order.\n      linear = false;\n      \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n           \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n      \n      // FIXME: this is really bad to turn off\n      // but it cannot work correctly until terms are in utf8 order.\n      linear = false;\n      \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7","date":1297092846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n           \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n           \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      seekBytesRef.copy(\"\");\n      // return the empty term, as its valid\n      if (runAutomaton.run(seekBytesRef.bytes, seekBytesRef.offset, seekBytesRef.length)) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      // reposition\n           \n      if (linear)\n        setLinear(infinitePosition);\n      return seekBytesRef;\n    }\n    // no more possible strings can match\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copy(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7"],"08932c793647a36953d1816b1060121f48820d3f":["77e979fe3f668c9c78154b88242e6da53322ee97"],"77e979fe3f668c9c78154b88242e6da53322ee97":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7":["08932c793647a36953d1816b1060121f48820d3f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["08932c793647a36953d1816b1060121f48820d3f","bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["77e979fe3f668c9c78154b88242e6da53322ee97","08932c793647a36953d1816b1060121f48820d3f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7","29ef99d61cda9641b6250bf9567329a6e65f901d","5f4e87790277826a2aea119328600dfb07761f32"],"77e979fe3f668c9c78154b88242e6da53322ee97":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"bd75dcd3293ef3dfcd82f2259df2405d5dfe4fc7":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["77e979fe3f668c9c78154b88242e6da53322ee97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}