{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator(null);\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    Collections.sort(prefixes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator(null);\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    Collections.sort(prefixes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","sourceNew":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    Collections.sort(prefixes);\n  }\n\n","sourceOld":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator(null);\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    Collections.sort(prefixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c653526aa49b33e8d542315fb4de5846893e98","date":1428878595,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","sourceNew":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    // Even though we visited terms in already-sorted order, the prefixes\n    // can be slightly unsorted, e.g. aaaaa will be before aaa, so we\n    // must sort here so our caller can do merge sort into actual terms\n    // when writing.  Probably we should use CollectionUtil.timSort here?\n    Collections.sort(prefixes);\n  }\n\n","sourceOld":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    Collections.sort(prefixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","sourceNew":null,"sourceOld":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    // Even though we visited terms in already-sorted order, the prefixes\n    // can be slightly unsorted, e.g. aaaaa will be before aaa, so we\n    // must sort here so our caller can do merge sort into actual terms\n    // when writing.  Probably we should use CollectionUtil.timSort here?\n    Collections.sort(prefixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","sourceNew":null,"sourceOld":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    // Even though we visited terms in already-sorted order, the prefixes\n    // can be slightly unsorted, e.g. aaaaa will be before aaa, so we\n    // must sort here so our caller can do merge sort into actual terms\n    // when writing.  Probably we should use CollectionUtil.timSort here?\n    Collections.sort(prefixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#AutoPrefixTermsWriter(Terms,int,int).mjava","sourceNew":null,"sourceOld":"  public AutoPrefixTermsWriter(Terms terms, int minItemsInPrefix, int maxItemsInPrefix) throws IOException {\n    this.minItemsInPrefix = minItemsInPrefix;\n    this.maxItemsInPrefix = maxItemsInPrefix;\n    //this.segment = segment;\n\n    TermsEnum termsEnum = terms.iterator();\n    while (true) {\n      BytesRef term = termsEnum.next();\n      if (term == null) {\n        break;\n      }\n      //if (DEBUG) System.out.println(\"pushTerm: \" + brToString(term));\n      pushTerm(term);\n    }\n\n    if (pending.size() > 1) {\n      pushTerm(BlockTreeTermsWriter.EMPTY_BYTES_REF);\n\n      // Also maybe save floor prefixes in root block; this can be a biggish perf gain for large ranges:\n      /*\n      System.out.println(\"root block pending.size=\" + pending.size());\n      for(Object o : pending) {\n        System.out.println(\"  \" + o);\n      }\n      */\n      while (pending.size() >= minItemsInPrefix) {\n        savePrefixes(0, pending.size());\n      }\n    }\n\n    // Even though we visited terms in already-sorted order, the prefixes\n    // can be slightly unsorted, e.g. aaaaa will be before aaa, so we\n    // must sort here so our caller can do merge sort into actual terms\n    // when writing.  Probably we should use CollectionUtil.timSort here?\n    Collections.sort(prefixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e8715d826e588419327562287d5d6a8040d63d6"],"86c653526aa49b33e8d542315fb4de5846893e98":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["86c653526aa49b33e8d542315fb4de5846893e98","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["86c653526aa49b33e8d542315fb4de5846893e98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86c653526aa49b33e8d542315fb4de5846893e98","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["86c653526aa49b33e8d542315fb4de5846893e98"],"86c653526aa49b33e8d542315fb4de5846893e98":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}