{"path":"lucene/misc/src/java/org/apache/lucene/store/RAFDirectory.RAFIndexInput#readInternal(byte[],int,int).mjava","commits":[{"id":"22c378dfd7d922a48b48093933404133eb253fe7","date":1410711399,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/RAFDirectory.RAFIndexInput#readInternal(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    /** IndexInput methods */\n    @Override\n    protected void readInternal(byte[] b, int offset, int len)\n         throws IOException {\n      synchronized (file) {\n        long position = off + getFilePointer();\n        file.seek(position);\n        int total = 0;\n\n        if (position + len > end) {\n          throw new EOFException(\"read past EOF: \" + this);\n        }\n\n        try {\n          while (total < len) {\n            final int toRead = Math.min(CHUNK_SIZE, len - total);\n            final int i = file.read(b, offset + total, toRead);\n            if (i < 0) { // be defensive here, even though we checked before hand, something could have changed\n             throw new EOFException(\"read past EOF: \" + this + \" off: \" + offset + \" len: \" + len + \" total: \" + total + \" chunkLen: \" + toRead + \" end: \" + end);\n            }\n            assert i > 0 : \"RandomAccessFile.read with non zero-length toRead must always read at least one byte\";\n            total += i;\n          }\n          assert total == len;\n        } catch (IOException ioe) {\n          throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af9ce763a9d61cb88781e638d593430b71efa7dc","date":1586259009,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/RAFDirectory.RAFIndexInput#readInternal(ByteBuffer).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/store/RAFDirectory.RAFIndexInput#readInternal(byte[],int,int).mjava","sourceNew":"    /** IndexInput methods */\n    @Override\n    protected void readInternal(ByteBuffer b) throws IOException {\n      synchronized (file) {\n        long position = off + getFilePointer();\n        file.seek(position);\n\n        if (position + b.remaining() > end) {\n          throw new EOFException(\"read past EOF: \" + this);\n        }\n\n        try {\n          while (b.hasRemaining()) {\n            final int toRead = Math.min(CHUNK_SIZE, b.remaining());\n            final int i = file.read(b.array(), b.position(), toRead);\n            if (i < 0) { // be defensive here, even though we checked before hand, something could have changed\n             throw new EOFException(\"read past EOF: \" + this + \" off: \" + b.position() + \" len: \" + b.remaining() + \" chunkLen: \" + toRead + \" end: \" + end);\n            }\n            assert i > 0 : \"RandomAccessFile.read with non zero-length toRead must always read at least one byte\";\n            b.position(b.position() + i);\n          }\n        } catch (IOException ioe) {\n          throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n        }\n      }\n    }\n\n","sourceOld":"    /** IndexInput methods */\n    @Override\n    protected void readInternal(byte[] b, int offset, int len)\n         throws IOException {\n      synchronized (file) {\n        long position = off + getFilePointer();\n        file.seek(position);\n        int total = 0;\n\n        if (position + len > end) {\n          throw new EOFException(\"read past EOF: \" + this);\n        }\n\n        try {\n          while (total < len) {\n            final int toRead = Math.min(CHUNK_SIZE, len - total);\n            final int i = file.read(b, offset + total, toRead);\n            if (i < 0) { // be defensive here, even though we checked before hand, something could have changed\n             throw new EOFException(\"read past EOF: \" + this + \" off: \" + offset + \" len: \" + len + \" total: \" + total + \" chunkLen: \" + toRead + \" end: \" + end);\n            }\n            assert i > 0 : \"RandomAccessFile.read with non zero-length toRead must always read at least one byte\";\n            total += i;\n          }\n          assert total == len;\n        } catch (IOException ioe) {\n          throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["22c378dfd7d922a48b48093933404133eb253fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22c378dfd7d922a48b48093933404133eb253fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af9ce763a9d61cb88781e638d593430b71efa7dc"]},"commit2Childs":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22c378dfd7d922a48b48093933404133eb253fe7"],"22c378dfd7d922a48b48093933404133eb253fe7":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}