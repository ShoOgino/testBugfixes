{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since 'other' buckets will always be included, we only need to worry about subfacets being partial.\n\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, beforeBucket, FacetParams.FacetRangeOther.BEFORE.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, afterBucket, FacetParams.FacetRangeOther.AFTER.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, betweenBucket, FacetParams.FacetRangeOther.BETWEEN.toString());\n\n      // if we need an actual end to compute either of these buckets,\n      // and it's been returned to us by at least one shard\n      // send it back as part of the refinement request\n      if ( (!freq.hardend) &&\n           actual_end != null &&\n           refinement != null &&\n           (refinement.containsKey(FacetParams.FacetRangeOther.AFTER.toString()) ||\n            refinement.containsKey(FacetParams.FacetRangeOther.BETWEEN.toString())) ) {\n        refinement.put(\"_actual_end\", actual_end);\n      }\n    }\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since 'other' buckets will always be included, we only need to worry about subfacets being partial.\n\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, beforeBucket, FacetParams.FacetRangeOther.BEFORE.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, afterBucket, FacetParams.FacetRangeOther.AFTER.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, betweenBucket, FacetParams.FacetRangeOther.BETWEEN.toString());\n\n      // if we need an actual end to compute either of these buckets,\n      // and it's been returned to us by at least one shard\n      // send it back as part of the refinement request\n      if ( (!freq.hardend) &&\n           actual_end != null &&\n           refinement != null &&\n           (refinement.containsKey(FacetParams.FacetRangeOther.AFTER.toString()) ||\n            refinement.containsKey(FacetParams.FacetRangeOther.BETWEEN.toString())) ) {\n        refinement.put(\"_actual_end\", actual_end);\n      }\n    }\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getRefinementSpecial(Context,Map[String,Object],Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {\n    if (!tagsWithPartial.isEmpty()) {\n      // Since 'other' buckets will always be included, we only need to worry about subfacets being partial.\n\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, beforeBucket, FacetParams.FacetRangeOther.BEFORE.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, afterBucket, FacetParams.FacetRangeOther.AFTER.toString());\n      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, betweenBucket, FacetParams.FacetRangeOther.BETWEEN.toString());\n\n      // if we need an actual end to compute either of these buckets,\n      // and it's been returned to us by at least one shard\n      // send it back as part of the refinement request\n      if ( (!freq.hardend) &&\n           actual_end != null &&\n           refinement != null &&\n           (refinement.containsKey(FacetParams.FacetRangeOther.AFTER.toString()) ||\n            refinement.containsKey(FacetParams.FacetRangeOther.BETWEEN.toString())) ) {\n        refinement.put(\"_actual_end\", actual_end);\n      }\n    }\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}