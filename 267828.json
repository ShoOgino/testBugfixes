{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.shutdown();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.shutdown();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.shutdown();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.shutdown();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new ClassicSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":null,"sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new ClassicSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":null,"sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new ClassicSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    IOUtils.close(r, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["04f07771a2a7dd3a395700665ed839c3dae2def2","7d89d7e4e5101347833eea558851bf4209218619"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7d89d7e4e5101347833eea558851bf4209218619":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["81d0720146de53dd3a4a023d2a3d1089d86d748d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}