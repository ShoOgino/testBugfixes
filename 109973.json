{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<Integer>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<Integer>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<Integer>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  // nocommit can we use varargs?  rob was unhappy before?\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  // nocommit can we use varargs?  rob was unhappy before?\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(List[Automaton]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    if (l.isEmpty()) return BasicAutomata.makeEmptyString();\n    boolean all_singleton = true;\n    for (Automaton a : l)\n      if (!a.isSingleton()) {\n        all_singleton = false;\n        break;\n      }\n    if (all_singleton) {\n      StringBuilder b = new StringBuilder();\n      for (Automaton a : l)\n        b.append(a.singleton);\n      return BasicAutomata.makeString(b.toString());\n    } else {\n      for (Automaton a : l)\n        if (BasicOperations.isEmpty(a)) return BasicAutomata.makeEmpty();\n      Set<Integer> ids = new HashSet<>();\n      for (Automaton a : l)\n        ids.add(System.identityHashCode(a));\n      boolean has_aliases = ids.size() != l.size();\n      Automaton b = l.get(0);\n      if (has_aliases) b = b.cloneExpanded();\n      else b = b.cloneExpandedIfRequired();\n      Set<State> ac = b.getAcceptStates();\n      boolean first = true;\n      for (Automaton a : l)\n        if (first) first = false;\n        else {\n          if (a.isEmptyString()) continue;\n          Automaton aa = a;\n          if (has_aliases) aa = aa.cloneExpanded();\n          else aa = aa.cloneExpandedIfRequired();\n          Set<State> ns = aa.getAcceptStates();\n          for (State s : ac) {\n            s.accept = false;\n            s.addEpsilon(aa.initial);\n            if (s.accept) ns.add(s);\n          }\n          ac = ns;\n        }\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n      return b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}