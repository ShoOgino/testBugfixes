{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            if (hasFreq == false) {\n              LowFreqDocsEnumNoTF docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoTF) {\n                docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoTF();\n              }\n\n              return docsEnum.reset(postings);\n              \n            } else if (hasPos == false) {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            if (hasPos == false) {\n              return new HighFreqDocsEnum().reset(term.docIDs, term.freqs);\n            } else {\n              return new HighFreqPostingsEnum(hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n            }\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnum( posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF();\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n          } else {\n            docsEnum = new HighFreqDocsEnum();\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            if (hasFreq == false) {\n              LowFreqDocsEnumNoTF docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoTF) {\n                docsEnum = (LowFreqDocsEnumNoTF) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n              \n            } else if (hasPos == false) {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            if (hasPos == false) {\n              return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n            } else {\n              return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n            }\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f93bd54756628ee4e24dae3b6f6f05530fccf34","date":1435307748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            if (hasFreq == false) {\n              LowFreqDocsEnumNoTF docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoTF) {\n                docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoTF();\n              }\n\n              return docsEnum.reset(postings);\n              \n            } else if (hasPos == false) {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            if (hasPos == false) {\n              return new HighFreqDocsEnum().reset(term.docIDs, term.freqs);\n            } else {\n              return new HighFreqPostingsEnum(hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n            }\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(posLen)) {\n                  docsEnum = new LowFreqDocsEnum(posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF();\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n          } else {\n            docsEnum = new HighFreqDocsEnum();\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            if (hasFreq == false) {\n              LowFreqDocsEnumNoTF docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoTF) {\n                docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoTF();\n              }\n\n              return docsEnum.reset(postings);\n              \n            } else if (hasPos == false) {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            if (hasPos == false) {\n              return new HighFreqDocsEnum().reset(term.docIDs, term.freqs);\n            } else {\n              return new HighFreqPostingsEnum(hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n            }\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnum( posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos();\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF();\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n          } else {\n            docsEnum = new HighFreqDocsEnum();\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f93bd54756628ee4e24dae3b6f6f05530fccf34":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f93bd54756628ee4e24dae3b6f6f05530fccf34"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["0f93bd54756628ee4e24dae3b6f6f05530fccf34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f93bd54756628ee4e24dae3b6f6f05530fccf34":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}