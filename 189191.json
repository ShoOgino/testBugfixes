{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    chunkStates = new ChunkState[postings.length];\n\n    endMinus1 = postings.length-1;\n    \n    lead = postings[0].postings;\n    // min(cost)\n    cost = lead.cost();\n\n    for(int i=0;i<postings.length;i++) {\n      chunkStates[i] = new ChunkState(postings[i].postings, -postings[i].position);\n    }\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    chunkStates = new ChunkState[postings.length];\n\n    endMinus1 = postings.length-1;\n    \n    lead = postings[0].postings;\n    // min(cost)\n    cost = lead.cost();\n\n    for(int i=0;i<postings.length;i++) {\n      chunkStates[i] = new ChunkState(postings[i].postings, -postings[i].position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    chunkStates = new ChunkState[postings.length];\n\n    endMinus1 = postings.length-1;\n    \n    lead = postings[0].postings;\n    // min(cost)\n    cost = lead.cost();\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    for(int i=0;i<postings.length;i++) {\n      chunkStates[i] = new ChunkState(postings[i].postings, -postings[i].position);\n      iterators.add(postings[i].postings);\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    chunkStates = new ChunkState[postings.length];\n\n    endMinus1 = postings.length-1;\n    \n    lead = postings[0].postings;\n    // min(cost)\n    cost = lead.cost();\n\n    for(int i=0;i<postings.length;i++) {\n      chunkStates[i] = new ChunkState(postings[i].postings, -postings[i].position);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a24a7a6d0e69e0595c8813443018f1cea18e6433","date":1424446886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    chunkStates = new ChunkState[postings.length];\n\n    endMinus1 = postings.length-1;\n    \n    lead = postings[0].postings;\n    // min(cost)\n    cost = lead.cost();\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    for(int i=0;i<postings.length;i++) {\n      chunkStates[i] = new ChunkState(postings[i].postings, -postings[i].position);\n      iterators.add(postings[i].postings);\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a24a7a6d0e69e0595c8813443018f1cea18e6433"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a24a7a6d0e69e0595c8813443018f1cea18e6433":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d277693481ea6007c1d83cd503d0859bb3b64d20"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a24a7a6d0e69e0595c8813443018f1cea18e6433":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a24a7a6d0e69e0595c8813443018f1cea18e6433"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}