{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}