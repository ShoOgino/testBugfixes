{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo().mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 1, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo() {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 1, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 1, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48cf7d27089ca96453966bc767c0ec53121efa43","date":1493221697,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 1, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":null,"bugIntro":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 1, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946","date":1499084472,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = PREFIX + TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = PREFIX + TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":["48cf7d27089ca96453966bc767c0ec53121efa43","0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = PREFIX + TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = PREFIX + TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9bfbea0278c393fb53c503162381e1c3b66929c","date":1573576925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#createReporterPluginInfo(String,boolean).mjava","sourceNew":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = PREFIX + TestUtil.randomSimpleString(random, 5, 10);\n      \n    \n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n\n    try {\n      String agentId = (String) TEST_MBEAN_SERVER.getAttribute\n        (new ObjectName(\"JMImplementation:type=MBeanServerDelegate\"),\n         \"MBeanServerId\");\n      attrs.put(\"agentId\", agentId);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to determine agentId of MBeanServer: \" + e.getMessage(), e);\n    }\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = PREFIX + TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","sourceOld":"  private PluginInfo createReporterPluginInfo(String rootName, boolean enabled) {\n    Random random = random();\n    String className = SolrJmxReporter.class.getName();\n    String reporterName = PREFIX + TestUtil.randomSimpleString(random, 5, 10);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n    attrs.put(\"rootName\", rootName);\n    attrs.put(\"enabled\", enabled);\n    attrs.put(\"serviceUrl\", \"service:jmx:rmi:///jndi/rmi://localhost:\" + jmxPort + \"/solrjmx\");\n\n    boolean shouldOverrideDomain = random.nextBoolean();\n    if (shouldOverrideDomain) {\n      domain = PREFIX + TestUtil.randomSimpleString(random);\n      attrs.put(\"domain\", domain);\n    }\n\n    return new PluginInfo(TestUtil.randomUnicodeString(random), attrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","48cf7d27089ca96453966bc767c0ec53121efa43"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["48cf7d27089ca96453966bc767c0ec53121efa43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"48cf7d27089ca96453966bc767c0ec53121efa43":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9bfbea0278c393fb53c503162381e1c3b66929c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["30c8e5574b55d57947e989443dfde611646530ee","a9bfbea0278c393fb53c503162381e1c3b66929c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"48cf7d27089ca96453966bc767c0ec53121efa43":["e9017cf144952056066919f1ebc7897ff9bd71b1","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["48cf7d27089ca96453966bc767c0ec53121efa43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}