{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(cloudConfigMock, zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(cloudConfigMock, zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}