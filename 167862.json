{"path":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","sourceNew":"  /** Returns the popcount or cardinality of the union of two sets.\n    * Neither array is modified.\n    */\n   public static long pop_union(long A[], long B[], int wordOffset, int numWords) {\n     // generated from pop_array via sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\| B[\\1]\\)/g'\n     int n = wordOffset+numWords;\n     long tot=0, tot8=0;\n     long ones=0, twos=0, fours=0;\n\n     int i;\n     for (i = wordOffset; i <= n - 8; i+=8) {\n       /***  C macro from Hacker's Delight\n        #define CSA(h,l, a,b,c) \\\n        {unsigned u = a ^ b; unsigned v = c; \\\n        h = (a & b) | (u & v); l = u ^ v;}\n        ***/\n\n       long twosA,twosB,foursA,foursB,eights;\n\n       // CSA(twosA, ones, ones, (A[i] | B[i]), (A[i+1] | B[i+1]))\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+2] | B[i+2]), (A[i+3] | B[i+3]))\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursA, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       //CSA(twosA, ones, ones, (A[i+4] | B[i+4]), (A[i+5] | B[i+5]))\n       {\n         long b=(A[i+4] | B[i+4]), c=(A[i+5] | B[i+5]);\n         long u=ones^b;\n         twosA=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+6] | B[i+6]), (A[i+7] | B[i+7]))\n       {\n         long b=(A[i+6] | B[i+6]), c=(A[i+7] | B[i+7]);\n         long u=ones^b;\n         twosB=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursB, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursB=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n\n       //CSA(eights, fours, fours, foursA, foursB)\n       {\n         long u=fours^foursA;\n         eights=(fours&foursA)|(u&foursB);\n         fours=u^foursB;\n       }\n       tot8 += pop(eights);\n     }\n\n\n     if (i<=n-4) {\n       long twosA, twosB, foursA, eights;\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=4;\n     }\n\n     if (i<=n-2) {\n       long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n       long u=ones ^ b;\n       long twosA=(ones & b)|( u & c);\n       ones=u^c;\n\n       long foursA=twos&twosA;\n       twos=twos^twosA;\n\n       long eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=2;\n     }\n\n     if (i<n) {\n       tot += pop((A[i] | B[i]));\n     }\n\n     tot += (pop(fours)<<2)\n             + (pop(twos)<<1)\n             + pop(ones)\n             + (tot8<<3);\n\n     return tot;\n   }\n\n","sourceOld":"  /** Returns the popcount or cardinality of the union of two sets.\n    * Neither array is modified.\n    */\n   public static long pop_union(long A[], long B[], int wordOffset, int numWords) {\n     // generated from pop_array via sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\| B[\\1]\\)/g'\n     int n = wordOffset+numWords;\n     long tot=0, tot8=0;\n     long ones=0, twos=0, fours=0;\n\n     int i;\n     for (i = wordOffset; i <= n - 8; i+=8) {\n       /***  C macro from Hacker's Delight\n        #define CSA(h,l, a,b,c) \\\n        {unsigned u = a ^ b; unsigned v = c; \\\n        h = (a & b) | (u & v); l = u ^ v;}\n        ***/\n\n       long twosA,twosB,foursA,foursB,eights;\n\n       // CSA(twosA, ones, ones, (A[i] | B[i]), (A[i+1] | B[i+1]))\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+2] | B[i+2]), (A[i+3] | B[i+3]))\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursA, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       //CSA(twosA, ones, ones, (A[i+4] | B[i+4]), (A[i+5] | B[i+5]))\n       {\n         long b=(A[i+4] | B[i+4]), c=(A[i+5] | B[i+5]);\n         long u=ones^b;\n         twosA=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+6] | B[i+6]), (A[i+7] | B[i+7]))\n       {\n         long b=(A[i+6] | B[i+6]), c=(A[i+7] | B[i+7]);\n         long u=ones^b;\n         twosB=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursB, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursB=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n\n       //CSA(eights, fours, fours, foursA, foursB)\n       {\n         long u=fours^foursA;\n         eights=(fours&foursA)|(u&foursB);\n         fours=u^foursB;\n       }\n       tot8 += pop(eights);\n     }\n\n\n     if (i<=n-4) {\n       long twosA, twosB, foursA, eights;\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=4;\n     }\n\n     if (i<=n-2) {\n       long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n       long u=ones ^ b;\n       long twosA=(ones & b)|( u & c);\n       ones=u^c;\n\n       long foursA=twos&twosA;\n       twos=twos^twosA;\n\n       long eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=2;\n     }\n\n     if (i<n) {\n       tot += pop((A[i] | B[i]));\n     }\n\n     tot += (pop(fours)<<2)\n             + (pop(twos)<<1)\n             + pop(ones)\n             + (tot8<<3);\n\n     return tot;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f83654246556082000bded885bde27a521bb31","date":1353427179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","sourceNew":"   /** Returns the popcount or cardinality of the union of two sets.\n    *  Neither array is modified. */\n   public static long pop_union(long[] arr1, long[] arr2, int wordOffset, int numWords) {\n     long popCount = 0;\n     for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {\n       popCount += Long.bitCount(arr1[i] | arr2[i]);\n     }\n     return popCount;\n   }\n\n","sourceOld":"  /** Returns the popcount or cardinality of the union of two sets.\n    * Neither array is modified.\n    */\n   public static long pop_union(long A[], long B[], int wordOffset, int numWords) {\n     // generated from pop_array via sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\| B[\\1]\\)/g'\n     int n = wordOffset+numWords;\n     long tot=0, tot8=0;\n     long ones=0, twos=0, fours=0;\n\n     int i;\n     for (i = wordOffset; i <= n - 8; i+=8) {\n       /***  C macro from Hacker's Delight\n        #define CSA(h,l, a,b,c) \\\n        {unsigned u = a ^ b; unsigned v = c; \\\n        h = (a & b) | (u & v); l = u ^ v;}\n        ***/\n\n       long twosA,twosB,foursA,foursB,eights;\n\n       // CSA(twosA, ones, ones, (A[i] | B[i]), (A[i+1] | B[i+1]))\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+2] | B[i+2]), (A[i+3] | B[i+3]))\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursA, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       //CSA(twosA, ones, ones, (A[i+4] | B[i+4]), (A[i+5] | B[i+5]))\n       {\n         long b=(A[i+4] | B[i+4]), c=(A[i+5] | B[i+5]);\n         long u=ones^b;\n         twosA=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+6] | B[i+6]), (A[i+7] | B[i+7]))\n       {\n         long b=(A[i+6] | B[i+6]), c=(A[i+7] | B[i+7]);\n         long u=ones^b;\n         twosB=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursB, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursB=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n\n       //CSA(eights, fours, fours, foursA, foursB)\n       {\n         long u=fours^foursA;\n         eights=(fours&foursA)|(u&foursB);\n         fours=u^foursB;\n       }\n       tot8 += pop(eights);\n     }\n\n\n     if (i<=n-4) {\n       long twosA, twosB, foursA, eights;\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=4;\n     }\n\n     if (i<=n-2) {\n       long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n       long u=ones ^ b;\n       long twosA=(ones & b)|( u & c);\n       ones=u^c;\n\n       long foursA=twos&twosA;\n       twos=twos^twosA;\n\n       long eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=2;\n     }\n\n     if (i<n) {\n       tot += pop((A[i] | B[i]));\n     }\n\n     tot += (pop(fours)<<2)\n             + (pop(twos)<<1)\n             + pop(ones)\n             + (tot8<<3);\n\n     return tot;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#pop_union(long[],long[],int,int).mjava","sourceNew":"   /** Returns the popcount or cardinality of the union of two sets.\n    *  Neither array is modified. */\n   public static long pop_union(long[] arr1, long[] arr2, int wordOffset, int numWords) {\n     long popCount = 0;\n     for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {\n       popCount += Long.bitCount(arr1[i] | arr2[i]);\n     }\n     return popCount;\n   }\n\n","sourceOld":"  /** Returns the popcount or cardinality of the union of two sets.\n    * Neither array is modified.\n    */\n   public static long pop_union(long A[], long B[], int wordOffset, int numWords) {\n     // generated from pop_array via sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\| B[\\1]\\)/g'\n     int n = wordOffset+numWords;\n     long tot=0, tot8=0;\n     long ones=0, twos=0, fours=0;\n\n     int i;\n     for (i = wordOffset; i <= n - 8; i+=8) {\n       /***  C macro from Hacker's Delight\n        #define CSA(h,l, a,b,c) \\\n        {unsigned u = a ^ b; unsigned v = c; \\\n        h = (a & b) | (u & v); l = u ^ v;}\n        ***/\n\n       long twosA,twosB,foursA,foursB,eights;\n\n       // CSA(twosA, ones, ones, (A[i] | B[i]), (A[i+1] | B[i+1]))\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+2] | B[i+2]), (A[i+3] | B[i+3]))\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursA, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       //CSA(twosA, ones, ones, (A[i+4] | B[i+4]), (A[i+5] | B[i+5]))\n       {\n         long b=(A[i+4] | B[i+4]), c=(A[i+5] | B[i+5]);\n         long u=ones^b;\n         twosA=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       // CSA(twosB, ones, ones, (A[i+6] | B[i+6]), (A[i+7] | B[i+7]))\n       {\n         long b=(A[i+6] | B[i+6]), c=(A[i+7] | B[i+7]);\n         long u=ones^b;\n         twosB=(ones&b)|(u&c);\n         ones=u^c;\n       }\n       //CSA(foursB, twos, twos, twosA, twosB)\n       {\n         long u=twos^twosA;\n         foursB=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n\n       //CSA(eights, fours, fours, foursA, foursB)\n       {\n         long u=fours^foursA;\n         eights=(fours&foursA)|(u&foursB);\n         fours=u^foursB;\n       }\n       tot8 += pop(eights);\n     }\n\n\n     if (i<=n-4) {\n       long twosA, twosB, foursA, eights;\n       {\n         long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n         long u=ones ^ b;\n         twosA=(ones & b)|( u & c);\n         ones=u^c;\n       }\n       {\n         long b=(A[i+2] | B[i+2]), c=(A[i+3] | B[i+3]);\n         long u=ones^b;\n         twosB =(ones&b)|(u&c);\n         ones=u^c;\n       }\n       {\n         long u=twos^twosA;\n         foursA=(twos&twosA)|(u&twosB);\n         twos=u^twosB;\n       }\n       eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=4;\n     }\n\n     if (i<=n-2) {\n       long b=(A[i] | B[i]), c=(A[i+1] | B[i+1]);\n       long u=ones ^ b;\n       long twosA=(ones & b)|( u & c);\n       ones=u^c;\n\n       long foursA=twos&twosA;\n       twos=twos^twosA;\n\n       long eights=fours&foursA;\n       fours=fours^foursA;\n\n       tot8 += pop(eights);\n       i+=2;\n     }\n\n     if (i<n) {\n       tot += pop((A[i] | B[i]));\n     }\n\n     tot += (pop(fours)<<2)\n             + (pop(twos)<<1)\n             + pop(ones)\n             + (tot8<<3);\n\n     return tot;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f83654246556082000bded885bde27a521bb31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","95f83654246556082000bded885bde27a521bb31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95f83654246556082000bded885bde27a521bb31"]},"commit2Childs":{"95f83654246556082000bded885bde27a521bb31":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f83654246556082000bded885bde27a521bb31","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}