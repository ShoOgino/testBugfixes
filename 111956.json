{"path":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","commits":[{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","pathOld":"/dev/null","sourceNew":"  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    subIndex = index & 0x3f;  // index within the word\n    word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ea5d384746c397b7afee5e0b870d31bd488832","date":1316724181,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","sourceNew":"  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;  // index within the word\n    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    subIndex = index & 0x3f;  // index within the word\n    word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc8c995d1b3d2d8d9458a1b27a52770195f3ccd","date":1319610997,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","sourceNew":"  /** Returns the index of the last set bit before or on the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;  // index within the word\n    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;  // index within the word\n    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#prevSetBit(int).mjava","sourceNew":"  /** Returns the index of the last set bit before or on the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;  // index within the word\n    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the last set bit before or on the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \" numBits=\" + numBits;\n    int i = index >> 6;\n    final int subIndex = index & 0x3f;  // index within the word\n    long word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8ea5d384746c397b7afee5e0b870d31bd488832":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["efc8c995d1b3d2d8d9458a1b27a52770195f3ccd"],"efc8c995d1b3d2d8d9458a1b27a52770195f3ccd":["b8ea5d384746c397b7afee5e0b870d31bd488832"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b8ea5d384746c397b7afee5e0b870d31bd488832":["efc8c995d1b3d2d8d9458a1b27a52770195f3ccd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efc8c995d1b3d2d8d9458a1b27a52770195f3ccd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["b8ea5d384746c397b7afee5e0b870d31bd488832"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}