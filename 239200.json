{"path":"solr/core/src/test/org/apache/solr/cloud/MultiSolrCloudTestCaseTest#setupClusters().mjava","commits":[{"id":"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","date":1523390946,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiSolrCloudTestCaseTest#setupClusters().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    numClouds = random().nextInt(4); //  0..3\n    final String[] clusterIds = new String[numClouds];\n    for (int ii=0; ii<numClouds; ++ii) {\n      clusterIds[ii] = \"cloud\"+(ii+1);\n    }\n\n    numCollectionsPerCloud = random().nextInt(3); //  0..2\n    final String[] collections = new String[numCollectionsPerCloud];\n    for (int ii=0; ii<numCollectionsPerCloud; ++ii) {\n      collections[ii] = \"collection\"+(ii+1);\n    }\n\n    numShards = 1+random().nextInt(2);\n    numReplicas = 1+random().nextInt(2);\n    maxShardsPerNode = 1+random().nextInt(2);\n    nodesPerCluster = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    doSetupClusters(\n        clusterIds,\n        new DefaultClusterCreateFunction() {\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas, maxShardsPerNode) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            for (final String collection : collections) {\n              if (random().nextBoolean()) {\n                doAccept(collection, cluster); // same collection name in different clouds\n              } else {\n                doAccept(collection+\"_in_\"+clusterId, cluster); // globally unique collection name\n              }\n            }\n          }\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82a6d970d2393ba4fa3666034b2ec311b774554","date":1523429643,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiSolrCloudTestCaseTest#setupClusters().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    numClouds = random().nextInt(4); //  0..3\n    final String[] clusterIds = new String[numClouds];\n    for (int ii=0; ii<numClouds; ++ii) {\n      clusterIds[ii] = \"cloud\"+(ii+1);\n    }\n\n    numCollectionsPerCloud = random().nextInt(3); //  0..2\n    final String[] collections = new String[numCollectionsPerCloud];\n    for (int ii=0; ii<numCollectionsPerCloud; ++ii) {\n      collections[ii] = \"collection\"+(ii+1);\n    }\n\n    numShards = 1+random().nextInt(2);\n    numReplicas = 1+random().nextInt(2);\n    maxShardsPerNode = 1+random().nextInt(2);\n    nodesPerCluster = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    doSetupClusters(\n        clusterIds,\n        new DefaultClusterCreateFunction() {\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas, maxShardsPerNode) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            for (final String collection : collections) {\n              if (random().nextBoolean()) {\n                doAccept(collection, cluster); // same collection name in different clouds\n              } else {\n                doAccept(collection+\"_in_\"+clusterId, cluster); // globally unique collection name\n              }\n            }\n          }\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiSolrCloudTestCaseTest#setupClusters().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiSolrCloudTestCaseTest#setupClusters().mjava","sourceNew":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    numClouds = random().nextInt(4); //  0..3\n    final String[] clusterIds = new String[numClouds];\n    for (int ii=0; ii<numClouds; ++ii) {\n      clusterIds[ii] = \"cloud\"+(ii+1);\n    }\n\n    numCollectionsPerCloud = random().nextInt(3); //  0..2\n    final String[] collections = new String[numCollectionsPerCloud];\n    for (int ii=0; ii<numCollectionsPerCloud; ++ii) {\n      collections[ii] = \"collection\"+(ii+1);\n    }\n\n    numShards = 1+random().nextInt(2);\n    numReplicas = 1+random().nextInt(2);\n    nodesPerCluster = numShards*numReplicas;\n\n    doSetupClusters(\n        clusterIds,\n        new DefaultClusterCreateFunction() {\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            for (final String collection : collections) {\n              if (random().nextBoolean()) {\n                doAccept(collection, cluster); // same collection name in different clouds\n              } else {\n                doAccept(collection+\"_in_\"+clusterId, cluster); // globally unique collection name\n              }\n            }\n          }\n        });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    numClouds = random().nextInt(4); //  0..3\n    final String[] clusterIds = new String[numClouds];\n    for (int ii=0; ii<numClouds; ++ii) {\n      clusterIds[ii] = \"cloud\"+(ii+1);\n    }\n\n    numCollectionsPerCloud = random().nextInt(3); //  0..2\n    final String[] collections = new String[numCollectionsPerCloud];\n    for (int ii=0; ii<numCollectionsPerCloud; ++ii) {\n      collections[ii] = \"collection\"+(ii+1);\n    }\n\n    numShards = 1+random().nextInt(2);\n    numReplicas = 1+random().nextInt(2);\n    maxShardsPerNode = 1+random().nextInt(2);\n    nodesPerCluster = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    doSetupClusters(\n        clusterIds,\n        new DefaultClusterCreateFunction() {\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas, maxShardsPerNode) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            for (final String collection : collections) {\n              if (random().nextBoolean()) {\n                doAccept(collection, cluster); // same collection name in different clouds\n              } else {\n                doAccept(collection+\"_in_\"+clusterId, cluster); // globally unique collection name\n              }\n            }\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","e82a6d970d2393ba4fa3666034b2ec311b774554"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}