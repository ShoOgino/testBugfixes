{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateStreamExpression(String).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateStreamExpression(String).mjava","pathOld":"/dev/null","sourceNew":"  private static StreamExpressionParameter generateStreamExpression(String clause){    \n    String working = clause.trim();\n    \n    if(!isExpressionClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper expression clause\", working));\n    }\n    \n    // Get functionName\n    int firstOpenParen = findNextClear(working, 0, '(');\n    StreamExpression expression = new StreamExpression(working.substring(0, firstOpenParen).trim());\n\n    // strip off functionName and ()\n    working = working.substring(firstOpenParen + 1,working.length() - 1).trim();\n    List<String> parts = splitOn(working,',');\n        \n    for(int idx = 0; idx < parts.size(); ++idx){\n      String part = parts.get(idx).trim();\n      if(isExpressionClause(part)){\n        StreamExpressionParameter parameter = generateStreamExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else if(isNamedParameterClause(part)){\n        StreamExpressionNamedParameter parameter = generateNamedParameterExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else{\n        expression.addParameter(new StreamExpressionValue(part));\n      }\n    }\n    \n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateStreamExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateStreamExpression(String).mjava","sourceNew":"  private static StreamExpressionParameter generateStreamExpression(String clause){\n    String working = clause.trim();\n\n    if(!isExpressionClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper expression clause\", working));\n    }\n\n    // Get functionName\n    int firstOpenParen = findNextClear(working, 0, '(');\n    StreamExpression expression = new StreamExpression(working.substring(0, firstOpenParen).trim());\n\n    // strip off functionName and ()\n    working = working.substring(firstOpenParen + 1,working.length() - 1).trim();\n    List<String> parts = splitOn(working,',');\n\n    for(int idx = 0; idx < parts.size(); ++idx){\n      String part = parts.get(idx).trim();\n      if(isExpressionClause(part)){\n        StreamExpressionParameter parameter = generateStreamExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else if(isNamedParameterClause(part)){\n        StreamExpressionNamedParameter parameter = generateNamedParameterExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else{\n        expression.addParameter(new StreamExpressionValue(part));\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  private static StreamExpressionParameter generateStreamExpression(String clause){    \n    String working = clause.trim();\n    \n    if(!isExpressionClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper expression clause\", working));\n    }\n    \n    // Get functionName\n    int firstOpenParen = findNextClear(working, 0, '(');\n    StreamExpression expression = new StreamExpression(working.substring(0, firstOpenParen).trim());\n\n    // strip off functionName and ()\n    working = working.substring(firstOpenParen + 1,working.length() - 1).trim();\n    List<String> parts = splitOn(working,',');\n        \n    for(int idx = 0; idx < parts.size(); ++idx){\n      String part = parts.get(idx).trim();\n      if(isExpressionClause(part)){\n        StreamExpressionParameter parameter = generateStreamExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else if(isNamedParameterClause(part)){\n        StreamExpressionNamedParameter parameter = generateNamedParameterExpression(part);\n        if(null != parameter){\n          expression.addParameter(parameter);\n        }\n      }\n      else{\n        expression.addParameter(new StreamExpressionValue(part));\n      }\n    }\n    \n    return expression;\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}