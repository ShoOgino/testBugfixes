{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","commits":[{"id":"98a20a1a0f02e19e5121d1b5d95f5af857d609ef","date":1382205865,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithinOnAdd().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testCommitWithinOnAdd() throws Exception {\n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    UpdateRequest up = new UpdateRequest();\n    up.add(doc3);\n    up.setCommitWithin(500); // a smaller commitWithin caused failures on the\n                             // following assert\n    up.process(server);\n    \n    rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField(\"id\", \"id4\", 1.0f);\n    doc4.addField(\"name\", \"doc4\", 1.0f);\n    doc4.addField(\"price\", 10);\n    server.add(doc4, 500);\n    \n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id4\"));\n    \n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithinOnAdd() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testCommitWithinOnAdd() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    UpdateRequest up = new UpdateRequest();\n    up.add(doc3);\n    up.setCommitWithin(500); // a smaller commitWithin caused failures on the\n                             // following assert\n    up.process(client);\n    \n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField(\"id\", \"id4\", 1.0f);\n    doc4.addField(\"name\", \"doc4\", 1.0f);\n    doc4.addField(\"price\", 10);\n    client.add(doc4, 500);\n    \n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id4\"));\n    \n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testCommitWithinOnAdd() throws Exception {\n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    UpdateRequest up = new UpdateRequest();\n    up.add(doc3);\n    up.setCommitWithin(500); // a smaller commitWithin caused failures on the\n                             // following assert\n    up.process(server);\n    \n    rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField(\"id\", \"id4\", 1.0f);\n    doc4.addField(\"name\", \"doc4\", 1.0f);\n    doc4.addField(\"price\", 10);\n    server.add(doc4, 500);\n    \n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id4\"));\n    \n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnAdd().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testCommitWithinOnAdd() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\");\n    doc3.addField(\"name\", \"doc3\");\n    doc3.addField(\"price\", 10);\n    UpdateRequest up = new UpdateRequest();\n    up.add(doc3);\n    up.setCommitWithin(500); // a smaller commitWithin caused failures on the\n                             // following assert\n    up.process(client);\n    \n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField(\"id\", \"id4\");\n    doc4.addField(\"name\", \"doc4\");\n    doc4.addField(\"price\", 10);\n    client.add(doc4, 500);\n    \n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id4\"));\n    \n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testCommitWithinOnAdd() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    UpdateRequest up = new UpdateRequest();\n    up.add(doc3);\n    up.setCommitWithin(500); // a smaller commitWithin caused failures on the\n                             // following assert\n    up.process(client);\n    \n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField(\"id\", \"id4\", 1.0f);\n    doc4.addField(\"name\", \"doc4\", 1.0f);\n    doc4.addField(\"price\", 10);\n    client.add(doc4, 500);\n    \n    Thread.sleep(1000); // wait 1 sec\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id4\"));\n    \n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep(2000); // wait 2 seconds...\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n    }\n    \n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"acd9883560fd89e6448b2b447302fe543040cd4f":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"bafca15d8e408346a67f4282ad1143b88023893b":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}