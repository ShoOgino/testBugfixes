{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Get memory usage stats. for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector v = (Vector) data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = (TimeData) v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","sourceNew":"  /** Get memory usage stats for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector v = (Vector) data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = (TimeData) v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","sourceOld":"  /** Get memory usage stats. for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector v = (Vector) data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = (TimeData) v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","sourceNew":"  /** Get memory usage stats for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector<TimeData> v = data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","sourceOld":"  /** Get memory usage stats for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector v = (Vector) data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = (TimeData) v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#getMemUsage(String).mjava","sourceNew":"  /** Get memory usage stats for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector<TimeData> v = data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","sourceOld":"  /** Get memory usage stats for a given data type. */\n  public MemUsage getMemUsage(String label) {\n    Vector<TimeData> v = data.get(label);\n      if (v == null)\n      {\n          return null;\n      }\n    MemUsage res = new MemUsage();\n    res.minFree = Long.MAX_VALUE;\n    res.minTotal = Long.MAX_VALUE;\n    long avgFree = 0L, avgTotal = 0L;\n    for (int i = 0; i < v.size(); i++) {\n      TimeData td = v.get(i);\n        if (res.maxFree < td.freeMem)\n        {\n            res.maxFree = td.freeMem;\n        }\n        if (res.maxTotal < td.totalMem)\n        {\n            res.maxTotal = td.totalMem;\n        }\n        if (res.minFree > td.freeMem)\n        {\n            res.minFree = td.freeMem;\n        }\n        if (res.minTotal > td.totalMem)\n        {\n            res.minTotal = td.totalMem;\n        }\n      avgFree += td.freeMem;\n      avgTotal += td.totalMem;\n    }\n    res.avgFree = avgFree / v.size();\n    res.avgTotal = avgTotal / v.size();\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["10c49614cb8b943c412debb24ccb614128394470"],"10c49614cb8b943c412debb24ccb614128394470":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["10c49614cb8b943c412debb24ccb614128394470"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"10c49614cb8b943c412debb24ccb614128394470":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}