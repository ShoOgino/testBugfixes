{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    LOG.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    LOG.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    LOG.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n   \n   configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n    configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7","date":1551957932,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n   \n   configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.waitForReplicasInSync = null; // We'll be explicit about this in this test\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n   \n   configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n\n   configureCluster(2) // 2 + random().nextInt(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n   \n   configureCluster(2) // 2 + random().nextInt(3) \n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n\n   configureCluster(2) // 2 + random().nextInt(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n   //  cloudSolrClientMaxStaleRetries\n   System.setProperty(\"cloudSolrClientMaxStaleRetries\", \"1\");\n   System.setProperty(\"zkReaderGetLeaderRetryTimeoutMs\", \"1000\");\n\n   configureCluster(2) // 2 + random().nextInt(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    Boolean useLegacyCloud = rarely();\n    log.info(\"Using legacyCloud?: {}\", useLegacyCloud);\n    CollectionAdminRequest.ClusterProp clusterPropRequest = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, String.valueOf(useLegacyCloud));\n    CollectionAdminResponse response = clusterPropRequest.process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}