{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb2411226bebe23191dc34a8e8252a936a7261a8","date":1557853382,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","sourceNew":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","sourceOld":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","sourceNew":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, false);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","sourceOld":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testSnapshots().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSnapshots() throws Exception {\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, false);\n    SnapshotCloudManager snapshotCloudManager1 = new SnapshotCloudManager(snapshot);\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager.getClusterStateProvider().getClusterState());\n    SimSolrCloudTestCase.assertClusterStateEquals(realManager.getClusterStateProvider().getClusterState(), snapshotCloudManager1.getClusterStateProvider().getClusterState());\n    // this will always fail because the metrics will be already different\n    // assertNodeStateProvider(realManager, snapshotCloudManager);\n    assertNodeStateProvider(snapshotCloudManager, snapshotCloudManager1);\n    assertDistribStateManager(snapshotCloudManager.getDistribStateManager(), snapshotCloudManager1.getDistribStateManager());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3f504512a03d978990cbff30db0522b354e846db":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["3f504512a03d978990cbff30db0522b354e846db"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}