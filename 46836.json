{"path":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","commits":[{"id":"faff74992839549208db29d95b9ad4a1d3846c79","date":1385672428,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","sourceNew":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","sourceOld":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","sourceNew":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","sourceOld":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCustomSort#testSortableBinary().mjava","sourceNew":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","sourceOld":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    //  2\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    //  5\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    //  8\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    //  4\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              //  9\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  //  3\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    //  1\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    // 11\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    // 10\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   //  6\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); // 13\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             //  7\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             // 12\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"    //   <doc><int name=\"id\">7</int></doc>   00 3c 73\n        , \"//result/doc[int='1'  and position()=2]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15\n        , \"//result/doc[int='6'  and position()=3]\"    //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03\n        , \"//result/doc[int='4'  and position()=4]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=5]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=6]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d\n        , \"//result/doc[int='3'  and position()=8]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58\n        , \"//result/doc[int='5'  and position()=9]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00\n        , \"//result/doc[int='9'  and position()=10]\"   //   <doc><int name=\"id\">9</int></doc>   39 79 7a\n        , \"//result/doc[int='8'  and position()=11]\"   //   <doc><int name=\"id\">8</int></doc>   59 2d 4d      \n        , \"//result/doc[int='13' and position()=12]\"   //   <doc><int name=\"id\">13</int></doc>  80 11 33       \n        , \"//result/doc[int='11' and position()=13]\"); //   <doc><int name=\"id\">11</int></doc>  ff af 9c\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   // <result name=\"response\" numFound=\"13\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"    //   <doc><int name=\"id\">11</int></doc>  ff af 9c            \n        , \"//result/doc[int='13' and position()=2]\"    //   <doc><int name=\"id\">13</int></doc>  80 11 33                   \n        , \"//result/doc[int='8'  and position()=3]\"    //   <doc><int name=\"id\">8</int></doc>   59 2d 4d                  \n        , \"//result/doc[int='9'  and position()=4]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a            \n        , \"//result/doc[int='5'  and position()=5]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00         \n        , \"//result/doc[int='3'  and position()=6]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58            \n        , \"//result/doc[int='12' and position()=7]\"    //   <doc><int name=\"id\">12</int></doc>  34 dd 4d            \n        , \"//result/doc[int='10' and position()=8]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c            \n        , \"//result/doc[int='2'  and position()=9]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16            \n        , \"//result/doc[int='4'  and position()=10]\"   //   <doc><int name=\"id\">4</int></doc>   25 21 15            \n        , \"//result/doc[int='6'  and position()=11]\"   //   <doc><int name=\"id\">6</int></doc>   1a 2b 3c 00 00 03   \n        , \"//result/doc[int='1'  and position()=12]\"   //   <doc><int name=\"id\">1</int></doc>   12 62 15            \n        , \"//result/doc[int='7'  and position()=13]\"); //   <doc><int name=\"id\">7</int></doc>   00 3c 73            \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='1'  and position()=1]\"    //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n        , \"//result/doc[int='3'  and position()=2]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='5'  and position()=3]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='9'  and position()=4]\");  //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    // <result name=\"response\" numFound=\"4\" start=\"0\">\n        , \"//result/doc[int='9'  and position()=1]\"    //   <doc><int name=\"id\">9</int></doc>   39 79 7a    \n        , \"//result/doc[int='5'  and position()=2]\"    //   <doc><int name=\"id\">5</int></doc>   35 35 10 00 \n        , \"//result/doc[int='3'  and position()=3]\"    //   <doc><int name=\"id\">3</int></doc>   35 32 58    \n        , \"//result/doc[int='1'  and position()=4]\");  //   <doc><int name=\"id\">1</int></doc>   12 62 15    \n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='4'  and position()=1]\"    //   <doc><int name=\"id\">4</int></doc>   25 21 15\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='10' and position()=3]\");  //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='10' and position()=1]\"    //   <doc><int name=\"id\">10</int></doc>  31 39 7c\n        , \"//result/doc[int='2'  and position()=2]\"    //   <doc><int name=\"id\">2</int></doc>   25 21 16\n        , \"//result/doc[int='4'  and position()=3]\");  //   <doc><int name=\"id\">4</int></doc>   25 21 15\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='7'  and position()=1]\"   //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='8'  and position()=3]\"); //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='8'  and position()=1]\"   //   <doc><int name=\"id\">8</int></doc>    59 2d 4d              \n        , \"//result/doc[int='6'  and position()=2]\"   //   <doc><int name=\"id\">6</int></doc>    1a 2b 3c 00 00 03\n        , \"//result/doc[int='7'  and position()=3]\"); //   <doc><int name=\"id\">7</int></doc>    00 3c 73         \n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='12' and position()=1]\"   //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='11' and position()=3]\"); //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   // <result name=\"response\" numFound=\"3\" start=\"0\">\n        , \"//result/doc[int='11' and position()=1]\"   //   <doc><int name=\"id\">11</int></doc>   ff af 9c\n        , \"//result/doc[int='13' and position()=2]\"   //   <doc><int name=\"id\">13</int></doc>   80 11 33      \n        , \"//result/doc[int='12' and position()=3]\"); //   <doc><int name=\"id\">12</int></doc>   34 dd 4d\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["faff74992839549208db29d95b9ad4a1d3846c79"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","faff74992839549208db29d95b9ad4a1d3846c79"],"faff74992839549208db29d95b9ad4a1d3846c79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["faff74992839549208db29d95b9ad4a1d3846c79","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["faff74992839549208db29d95b9ad4a1d3846c79","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","faff74992839549208db29d95b9ad4a1d3846c79"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"faff74992839549208db29d95b9ad4a1d3846c79":["a71f63026529f3c1f03cfdd664910873ab2369ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}