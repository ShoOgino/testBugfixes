{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"144ca7fb3ae89fdca80610b02273885f1e43dba0","date":1509382753,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce032e8b2647de32931423e09e1728f8a1ac8759","date":1522091106,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    if(literal) {\n      return fieldName;\n    }\n\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ca4bed7510b582a13d1b2e91a0c58b224590e1d","date":1522091107,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    if(literal) {\n      return fieldName;\n    }\n\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb4014503b6717004572b6f357fe1487f018d9a9","date":1560911620,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    if(value == null) {\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      if(fieldName.startsWith(\"\\\"\") && fieldName.endsWith(\"\\\"\")) {\n        return fieldName.substring(1, fieldName.length()-1);\n      } else {\n        return null;\n      }\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      if(fieldName.startsWith(\"\\\"\") && fieldName.endsWith(\"\\\"\")) {\n        return fieldName.substring(1, fieldName.length()-1);\n      } else {\n        return null;\n      }\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      if(fieldName.startsWith(\"\\\"\") && fieldName.endsWith(\"\\\"\")) {\n        return fieldName.substring(1, fieldName.length()-1);\n      } else {\n        return null;\n      }\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      return fieldName;\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      if(fieldName.startsWith(\"\\\"\") && fieldName.endsWith(\"\\\"\")) {\n        return fieldName.substring(1, fieldName.length()-1);\n      } else {\n        return null;\n      }\n    }\n\n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n\n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n\n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n\n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      } else if(value instanceof Matrix) {\n        return value;\n      } else if(value instanceof VectorFunction) {\n        return value;\n      } else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n\n    StreamContext sc = getStreamContext();\n\n    if(sc != null) {sc.getTupleContext().remove(\"null\");}\n\n    if(value == null) {\n      if(sc != null) {sc.getTupleContext().put(\"null\", fieldName);}\n      if(fieldName.startsWith(\"\\\"\") && fieldName.endsWith(\"\\\"\")) {\n        return fieldName.substring(1, fieldName.length()-1);\n      } else {\n        return null;\n      }\n    }\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"ce032e8b2647de32931423e09e1728f8a1ac8759":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","2ca4bed7510b582a13d1b2e91a0c58b224590e1d"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["bb4014503b6717004572b6f357fe1487f018d9a9"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bb4014503b6717004572b6f357fe1487f018d9a9","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"bb4014503b6717004572b6f357fe1487f018d9a9":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ca4bed7510b582a13d1b2e91a0c58b224590e1d":["ce032e8b2647de32931423e09e1728f8a1ac8759"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bb4014503b6717004572b6f357fe1487f018d9a9","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce032e8b2647de32931423e09e1728f8a1ac8759":["2ca4bed7510b582a13d1b2e91a0c58b224590e1d"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["bb4014503b6717004572b6f357fe1487f018d9a9"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["ce032e8b2647de32931423e09e1728f8a1ac8759","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","144ca7fb3ae89fdca80610b02273885f1e43dba0"],"bb4014503b6717004572b6f357fe1487f018d9a9":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"2ca4bed7510b582a13d1b2e91a0c58b224590e1d":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","3a7809d1d753b67f48b1a706e17034bf8b624ea3","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}