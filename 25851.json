{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeClass().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    \n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n    \n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    cleanIndex();\n    \n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n    \n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n\n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n\n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n\n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    \n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n    \n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n\n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n\n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n\n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    \n    //INT\n    intLongTestStart = new ArrayList<>();\n    intDoubleTestStart = new ArrayList<>();\n    intDateTestStart = new ArrayList<>();\n    \n    //FLOAT\n    floatLongTestStart = new ArrayList<>();\n    floatDoubleTestStart = new ArrayList<>();\n    floatDateTestStart = new ArrayList<>();\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      //Longs\n      if (j-LONG<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intLongTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatLongTestStart.add(list2);\n      } else {\n        intLongTestStart.get((int)l).add(i);\n        floatLongTestStart.get((int)l).add(f);\n      }\n      //Doubles\n      if (j-DOUBLE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDoubleTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDoubleTestStart.add(list2);\n      } else {\n        intDoubleTestStart.get((int)d).add(i);\n        floatDoubleTestStart.get((int)d).add(f);\n      }\n      //Dates\n      if (j-DATE<0) {\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(i);\n        intDateTestStart.add(list1);\n        ArrayList<Float> list2 = new ArrayList<>();\n        list2.add(f);\n        floatDateTestStart.add(list2);\n      } else {\n        intDateTestStart.get(dt).add(i);\n        floatDateTestStart.get(dt).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}