{"path":"sandbox/contributions/webcrawler-LARM/src/hplb/misc/ByteArray#findBytes(byte[],int,int,byte[]).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/hplb/misc/ByteArray#findBytes(byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find byte pattern ptrn in buffer buf.\n   * @return    index of first occurrence of ptrn in buf, -1 if no occurence\n   */\n  public static final int findBytes(byte buf[],\n                                    int off,\n                                    int len,\n                                    byte ptrn[]) {\n    // Note: This code is completely incomprehensible without a drawing...\n\n    int buf_len = off + len;\n    int ptrn_len = ptrn.length;\n    int i;                       // index into buf\n    int j;                       // index into ptrn;\n    byte b = ptrn[0];            // next byte of interest\n\n    for (i = off; i < buf_len; ) {\n      j = 0;\n      while (i < buf_len && j < ptrn_len && buf[i] == ptrn[j]) {\n        i++;\n        j++;\n      }\n      if (i == buf_len || j == ptrn_len)\n        return i - j;\n      else {\n        // We have to go back a bit as there may be an overlapping\n        // match starting a bit later in buf...\n        i = i - j + 1;\n      }\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":4,"author":"cmarschner","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/hplb/misc/ByteArray#findBytes(byte[],int,int,byte[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Find byte pattern ptrn in buffer buf.\n   * @return    index of first occurrence of ptrn in buf, -1 if no occurence\n   */\n  public static final int findBytes(byte buf[],\n                                    int off,\n                                    int len,\n                                    byte ptrn[]) {\n    // Note: This code is completely incomprehensible without a drawing...\n\n    int buf_len = off + len;\n    int ptrn_len = ptrn.length;\n    int i;                       // index into buf\n    int j;                       // index into ptrn;\n    byte b = ptrn[0];            // next byte of interest\n\n    for (i = off; i < buf_len; ) {\n      j = 0;\n      while (i < buf_len && j < ptrn_len && buf[i] == ptrn[j]) {\n        i++;\n        j++;\n      }\n      if (i == buf_len || j == ptrn_len)\n        return i - j;\n      else {\n        // We have to go back a bit as there may be an overlapping\n        // match starting a bit later in buf...\n        i = i - j + 1;\n      }\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"]},"commit2Childs":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}