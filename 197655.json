{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8864af8de677008c534d14fc77568b83a6c1361","date":1279109434,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"  public void testStem() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new RussianStemFilter(t));\n      }\n    };\n    InputStream voc = getClass().getResourceAsStream(\"wordsUTF8.txt\");\n    InputStream out = getClass().getResourceAsStream(\"stemsUTF8.txt\");\n    assertVocabulary(a, voc, out);\n    voc.close();\n    out.close();\n  }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"  public void testStem() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new RussianStemFilter(t));\n      }\n    };\n    InputStream voc = getClass().getResourceAsStream(\"wordsUTF8.txt\");\n    InputStream out = getClass().getResourceAsStream(\"stemsUTF8.txt\");\n    assertVocabulary(a, voc, out);\n    voc.close();\n    out.close();\n  }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":null,"sourceOld":"  public void testStem() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new RussianStemFilter(t));\n      }\n    };\n    InputStream voc = getClass().getResourceAsStream(\"wordsUTF8.txt\");\n    InputStream out = getClass().getResourceAsStream(\"stemsUTF8.txt\");\n    assertVocabulary(a, voc, out);\n    voc.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":null,"sourceOld":"  public void testStem() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new RussianStemFilter(t));\n      }\n    };\n    InputStream voc = getClass().getResourceAsStream(\"wordsUTF8.txt\");\n    InputStream out = getClass().getResourceAsStream(\"stemsUTF8.txt\");\n    assertVocabulary(a, voc, out);\n    voc.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":null,"sourceOld":"  public void testStem() throws IOException {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new RussianStemFilter(t));\n      }\n    };\n    InputStream voc = getClass().getResourceAsStream(\"wordsUTF8.txt\");\n    InputStream out = getClass().getResourceAsStream(\"stemsUTF8.txt\");\n    assertVocabulary(a, voc, out);\n    voc.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8864af8de677008c534d14fc77568b83a6c1361":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["0f080986da691a3bba7b757f43ab72cdc82b57ce","d8864af8de677008c534d14fc77568b83a6c1361"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d8864af8de677008c534d14fc77568b83a6c1361","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["d8864af8de677008c534d14fc77568b83a6c1361"]},"commit2Childs":{"d8864af8de677008c534d14fc77568b83a6c1361":["5f4e87790277826a2aea119328600dfb07761f32","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["d8864af8de677008c534d14fc77568b83a6c1361","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}