{"path":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","commits":[{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","pathOld":"/dev/null","sourceNew":"  public static void retryOnThrowable(Set<Class> classes, long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          log.info(\"Retry due to Throwable, \" + t.getClass().getName() + \" \" + t.getMessage());\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","sourceNew":"  public static void retryOnThrowable(Set<Class> classes, long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Retry due to Throwable, {} {}\", t.getClass().getName(), t.getMessage());\n          }\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","sourceOld":"  public static void retryOnThrowable(Set<Class> classes, long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          log.info(\"Retry due to Throwable, \" + t.getClass().getName() + \" \" + t.getMessage());\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","sourceNew":"  public static void retryOnThrowable(@SuppressWarnings({\"rawtypes\"})Set<Class> classes,\n                                      long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Retry due to Throwable, {} {}\", t.getClass().getName(), t.getMessage());\n          }\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","sourceOld":"  public static void retryOnThrowable(Set<Class> classes, long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Retry due to Throwable, {} {}\", t.getClass().getName(), t.getMessage());\n          }\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/RetryUtil#retryOnThrowable(Set[Class],long,long,RetryCmd).mjava","sourceNew":"  public static void retryOnThrowable(@SuppressWarnings({\"rawtypes\"})Set<Class> classes,\n                                      long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Retry due to Throwable, {} \", t.getClass().getName(), t);\n          }\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","sourceOld":"  public static void retryOnThrowable(@SuppressWarnings({\"rawtypes\"})Set<Class> classes,\n                                      long timeoutms, long intervalms, RetryCmd cmd) throws Throwable {\n    long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        cmd.execute();\n      } catch (Throwable t) {\n        if (isInstanceOf(classes, t) && System.nanoTime() < timeout) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Retry due to Throwable, {} {}\", t.getClass().getName(), t.getMessage());\n          }\n          Thread.sleep(intervalms);\n          continue;\n        }\n        throw t;\n      }\n      // success\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}