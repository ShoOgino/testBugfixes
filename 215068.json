{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","pathOld":"/dev/null","sourceNew":"  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    LightAutomaton.Transition scratch = new LightAutomaton.Transition();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, scratch);\n        for(int t=0;t<numTransitions;t++) {\n          a.getNextTransition(scratch);\n          result.addTransition(stateOffset + s, stateOffset + scratch.dest, scratch.min, scratch.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, scratch);\n              for(int t=0;t<numTransitions;t++) {\n                followA.getNextTransition(scratch);\n                result.addTransition(stateOffset + s, followOffset + numStates + scratch.dest, scratch.min, scratch.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    LightAutomaton.Transition scratch = new LightAutomaton.Transition();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, scratch);\n        for(int t=0;t<numTransitions;t++) {\n          a.getNextTransition(scratch);\n          result.addTransition(stateOffset + s, stateOffset + scratch.dest, scratch.min, scratch.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, scratch);\n              for(int t=0;t<numTransitions;t++) {\n                followA.getNextTransition(scratch);\n                result.addTransition(stateOffset + s, followOffset + numStates + scratch.dest, scratch.min, scratch.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    LightAutomaton.Transition scratch = new LightAutomaton.Transition();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, scratch);\n        for(int t=0;t<numTransitions;t++) {\n          a.getNextTransition(scratch);\n          result.addTransition(stateOffset + s, stateOffset + scratch.dest, scratch.min, scratch.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, scratch);\n              for(int t=0;t<numTransitions;t++) {\n                followA.getNextTransition(scratch);\n                result.addTransition(stateOffset + s, followOffset + numStates + scratch.dest, scratch.min, scratch.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    Transition t = new Transition();\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, t);\n              for(int j=0;j<numTransitions;j++) {\n                followA.getNextTransition(t);\n                result.addTransition(stateOffset + s, followOffset + numStates + t.dest, t.min, t.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    LightAutomaton.Transition scratch = new LightAutomaton.Transition();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, scratch);\n        for(int t=0;t<numTransitions;t++) {\n          a.getNextTransition(scratch);\n          result.addTransition(stateOffset + s, stateOffset + scratch.dest, scratch.min, scratch.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, scratch);\n              for(int t=0;t<numTransitions;t++) {\n                followA.getNextTransition(scratch);\n                result.addTransition(stateOffset + s, followOffset + numStates + scratch.dest, scratch.min, scratch.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        result.finishState();\n        return result;\n      }\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    Transition t = new Transition();\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, t);\n              for(int j=0;j<numTransitions;j++) {\n                followA.getNextTransition(t);\n                result.addTransition(stateOffset + s, followOffset + numStates + t.dest, t.min, t.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    Transition t = new Transition();\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, t);\n              for(int j=0;j<numTransitions;j++) {\n                followA.getNextTransition(t);\n                result.addTransition(stateOffset + s, followOffset + numStates + t.dest, t.min, t.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#concatenate(List[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenateLight(List[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public Automaton concatenate(List<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // First pass: create all states\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        result.finishState();\n        return result;\n      }\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    Transition t = new Transition();\n    for(int i=0;i<l.size();i++) {\n      Automaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      Automaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n\n        if (a.isAccept(s)) {\n          Automaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, t);\n              for(int j=0;j<numTransitions;j++) {\n                followA.getNextTransition(t);\n                result.addTransition(stateOffset + s, followOffset + numStates + t.dest, t.min, t.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in total number of states.\n   */\n  static public LightAutomaton concatenateLight(List<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // First pass: create all states\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        result.finishState();\n        return result;\n      }\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        result.createState();\n      }\n    }\n\n    // Second pass: add transitions, carefully linking accept\n    // states of A to init state of next A:\n    int stateOffset = 0;\n    Transition t = new Transition();\n    for(int i=0;i<l.size();i++) {\n      LightAutomaton a = l.get(i);\n      int numStates = a.getNumStates();\n\n      LightAutomaton nextA = (i == l.size()-1) ? null : l.get(i+1);\n\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n\n        if (a.isAccept(s)) {\n          LightAutomaton followA = nextA;\n          int followOffset = stateOffset;\n          int upto = i+1;\n          while (true) {\n            if (followA != null) {\n              // Adds a \"virtual\" epsilon transition:\n              numTransitions = followA.initTransition(0, t);\n              for(int j=0;j<numTransitions;j++) {\n                followA.getNextTransition(t);\n                result.addTransition(stateOffset + s, followOffset + numStates + t.dest, t.min, t.max);\n              }\n              if (followA.isAccept(0)) {\n                // Keep chaining if followA accepts empty string\n                followOffset += followA.getNumStates();\n                followA = (upto == l.size()-1) ? null : l.get(upto+1);\n                upto++;\n              } else {\n                break;\n              }\n            } else {\n              result.setAccept(stateOffset + s, true);\n              break;\n            }\n          }\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    if (result.getNumStates() == 0) {\n      result.createState();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}