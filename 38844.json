{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#testStateVersionParam().mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#testStateVersionParam().mjava","pathOld":"/dev/null","sourceNew":"  private void testStateVersionParam() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    String collectionName = \"checkStateVerCol\";\n    createCollection(collectionName, client, 2, 2);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n\n\n    DocCollection coll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Replica r = coll.getSlices().iterator().next().getReplicas().iterator().next();\n\n\n    HttpSolrServer httpSolrServer = new HttpSolrServer(r.getStr(ZkStateReader.BASE_URL_PROP) + \"/\"+collectionName);\n\n\n    SolrQuery q = new SolrQuery().setQuery(\"*:*\");\n\n    log.info(\"should work query, result {}\", httpSolrServer.query(q));\n    //no problem\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+coll.getVersion());\n    log.info(\"2nd query , result {}\", httpSolrServer.query(q));\n    //no error yet good\n\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+ (coll.getVersion() -1)); //an older version expect error\n\n    HttpSolrServer.RemoteSolrException sse = null;\n    try {\n      httpSolrServer.query(q);\n      log.info(\"expected query error\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      sse = e;\n    }\n    assertNotNull(sse);\n    assertEquals(\" Error code should be \",  sse.code() , SolrException.ErrorCode.INVALID_STATE.code);\n\n    //now send the request to another node that does n ot serve the collection\n\n    Set<String> allNodesOfColl = new HashSet<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        allNodesOfColl.add(replica.getStr(ZkStateReader.BASE_URL_PROP));\n      }\n    }\n\n    String theNode = null;\n\n    for (String s : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      String n = client.getZkStateReader().getBaseUrlForNodeName(s);\n      if(!allNodesOfColl.contains(s)){\n        theNode = n;\n        break;\n      }\n    }\n    log.info(\"thenode which does not serve this collection{} \",theNode);\n    assertNotNull(theNode);\n    httpSolrServer = new HttpSolrServer(theNode + \"/\"+collectionName);\n\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+coll.getVersion());\n\n    try {\n      httpSolrServer.query(q);\n      log.info(\"error was expected\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      sse = e;\n    }\n    assertNotNull(sse);\n    assertEquals(\" Error code should be \",  sse.code() , SolrException.ErrorCode.INVALID_STATE.code);\n\n\n    client.shutdown();\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#testStateVersionParam().mjava","sourceNew":null,"sourceOld":"  private void testStateVersionParam() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    String collectionName = \"checkStateVerCol\";\n    createCollection(collectionName, client, 2, 2);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n\n\n    DocCollection coll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Replica r = coll.getSlices().iterator().next().getReplicas().iterator().next();\n\n\n    HttpSolrServer httpSolrServer = new HttpSolrServer(r.getStr(ZkStateReader.BASE_URL_PROP) + \"/\"+collectionName);\n\n\n    SolrQuery q = new SolrQuery().setQuery(\"*:*\");\n\n    log.info(\"should work query, result {}\", httpSolrServer.query(q));\n    //no problem\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+coll.getVersion());\n    log.info(\"2nd query , result {}\", httpSolrServer.query(q));\n    //no error yet good\n\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+ (coll.getVersion() -1)); //an older version expect error\n\n    HttpSolrServer.RemoteSolrException sse = null;\n    try {\n      httpSolrServer.query(q);\n      log.info(\"expected query error\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      sse = e;\n    }\n    assertNotNull(sse);\n    assertEquals(\" Error code should be \",  sse.code() , SolrException.ErrorCode.INVALID_STATE.code);\n\n    //now send the request to another node that does n ot serve the collection\n\n    Set<String> allNodesOfColl = new HashSet<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        allNodesOfColl.add(replica.getStr(ZkStateReader.BASE_URL_PROP));\n      }\n    }\n\n    String theNode = null;\n\n    for (String s : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      String n = client.getZkStateReader().getBaseUrlForNodeName(s);\n      if(!allNodesOfColl.contains(s)){\n        theNode = n;\n        break;\n      }\n    }\n    log.info(\"thenode which does not serve this collection{} \",theNode);\n    assertNotNull(theNode);\n    httpSolrServer = new HttpSolrServer(theNode + \"/\"+collectionName);\n\n    q.setParam(CloudSolrServer.STATE_VERSION, collectionName+\":\"+coll.getVersion());\n\n    try {\n      httpSolrServer.query(q);\n      log.info(\"error was expected\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      sse = e;\n    }\n    assertNotNull(sse);\n    assertEquals(\" Error code should be \",  sse.code() , SolrException.ErrorCode.INVALID_STATE.code);\n\n\n    client.shutdown();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}