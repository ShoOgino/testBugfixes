{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f00ab8c5c42ab09de0ac0766ca2298272017a58","date":1353531284,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.binarySearchLookup(new BytesRef(lowerVal), spare);\n        final int upperPoint = upperVal == null ? -1 : fcsi.binarySearchLookup(new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal), spare);\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.binarySearchLookup(new BytesRef(lowerVal), spare);\n        final int upperPoint = upperVal == null ? -1 : fcsi.binarySearchLookup(new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal), spare);\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","6fff8f4b218bd0626afcdce82027bafeb84a50a4","4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<String>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<String>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<String>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final int lowerPoint = lowerVal == null ? -1 : fcsi.lookupTerm(new BytesRef(lowerVal));\n        final int upperPoint = upperVal == null ? -1 : fcsi.lookupTerm(new BytesRef(upperVal));\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"56572ec06f1407c066d6b7399413178b33176cd8":["dc06632ede7e48a5ddc6917badec25c8336feedc","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4f00ab8c5c42ab09de0ac0766ca2298272017a58":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["dc06632ede7e48a5ddc6917badec25c8336feedc","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["4f00ab8c5c42ab09de0ac0766ca2298272017a58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["4f00ab8c5c42ab09de0ac0766ca2298272017a58"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["29f7cc7c185412da66c1d0089d9e75da01329a00","d4d69c535930b5cce125cff868d40f6373dc27d4"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4f00ab8c5c42ab09de0ac0766ca2298272017a58":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}