{"path":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65e2e921993a78565715c17f099593272b4a92bd","date":1287833451,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["65e2e921993a78565715c17f099593272b4a92bd"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["65e2e921993a78565715c17f099593272b4a92bd","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"65e2e921993a78565715c17f099593272b4a92bd":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","65e2e921993a78565715c17f099593272b4a92bd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["65e2e921993a78565715c17f099593272b4a92bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","65e2e921993a78565715c17f099593272b4a92bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["65e2e921993a78565715c17f099593272b4a92bd"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"65e2e921993a78565715c17f099593272b4a92bd":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}