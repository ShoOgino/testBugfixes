{"path":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","commits":[{"id":"3afaca6e0770734b01e3bc663bec3ffa71b6f87b","date":1110394706,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.  In particular,\n   * <code>numUniqueTerms/interval</code> terms are read into memory by an\n   * IndexReader, and, on average, <code>interval/2</code> terms must be\n   * scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e01da057491d1968ed21f5d7912c099ac65e32b","date":1110596469,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.  In particular,\n   * <code>numUniqueTerms/interval</code> terms are read into memory by an\n   * IndexReader, and, on average, <code>interval/2</code> terms must be\n   * scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   * @deprecated use {@link IndexWriterConfig#setTermIndexInterval(int)}\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setTermIndexInterval(interval);\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   * @deprecated use {@link IndexWriterConfig#setTermIndexInterval(int)}\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setTermIndexInterval(interval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   * @deprecated use {@link IndexWriterConfig#setTermIndexInterval(int)}\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setTermIndexInterval(interval);\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   * @deprecated use {@link IndexWriterConfig#setTermIndexInterval(int)}\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setTermIndexInterval(interval);\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   * @deprecated use {@link IndexWriterConfig#setTermIndexInterval(int)}\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setTermIndexInterval(interval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["5e01da057491d1968ed21f5d7912c099ac65e32b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"5e01da057491d1968ed21f5d7912c099ac65e32b":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5e01da057491d1968ed21f5d7912c099ac65e32b":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["5e01da057491d1968ed21f5d7912c099ac65e32b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}