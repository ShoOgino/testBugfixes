{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","pathOld":"/dev/null","sourceNew":"  public static int compare(double a, double b, FacetField.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","pathOld":"/dev/null","sourceNew":"  public static int compare(double a, double b, FacetField.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetRequest.SortDirection).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","sourceNew":"  public static int compare(double a, double b, FacetRequest.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","sourceOld":"  public static int compare(double a, double b, FacetField.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetRequest.SortDirection).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","sourceNew":"  public static int compare(double a, double b, FacetRequest.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","sourceOld":"  public static int compare(double a, double b, FacetField.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetDoubleMerger[FacetModule]#compare(double,double,FacetField.SortDirection).mjava","sourceNew":null,"sourceOld":"  public static int compare(double a, double b, FacetField.SortDirection direction) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a != a) {  // a==NaN\n      if (b != b) {\n        return 0;  // both NaN\n      }\n      return -1 * direction.getMultiplier();  // asc==-1, so this will put NaN at end of sort\n    }\n\n    if (b != b) { // b is NaN so a is greater\n      return 1 * direction.getMultiplier();  // if sorting asc, make a less so NaN is at end\n    }\n\n    // consider +-0 to be equal\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1931d98b40b01d5075753b197c2461a5c2652689":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}