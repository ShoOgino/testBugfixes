{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testFFT().mjava","commits":[{"id":"80935b1b8e196d1a1ef6f00a9f32d41160be71ee","date":1524620119,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testFFT().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFFT() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=fft(array(1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4)),\" +\n        \"               b=ifft(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n\n    List<List<Number>> fft = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(fft.size(), 2);\n    List<Number> reals = fft.get(0);\n    assertEquals(reals.get(0).doubleValue(), 68, 0.0);\n    assertEquals(reals.get(1).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(2).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(3).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(4).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(5).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(6).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(7).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(8).doubleValue(), 4, 0.0);\n    assertEquals(reals.get(9).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(10).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(11).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(12).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(13).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(14).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(15).doubleValue(), 0, 0.0);\n\n    List<Number> imaginary = fft.get(1);\n    for(int i=0; i<imaginary.size(); i++) {\n      assertEquals(imaginary.get(i).doubleValue(), 0.0, 0.0);\n    }\n\n    List<Number> ifft = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(ifft.get(0).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(1).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(2).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(3).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(4).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(5).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(6).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(7).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(8).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(9).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(10).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(11).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(12).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(13).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(14).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(15).doubleValue(), 4, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testFFT().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testFFT().mjava","sourceNew":"  @Test\n  public void testFFT() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=fft(array(1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4)),\" +\n        \"               b=ifft(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> fft = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(fft.size(), 2);\n    List<Number> reals = fft.get(0);\n    assertEquals(reals.get(0).doubleValue(), 68, 0.0);\n    assertEquals(reals.get(1).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(2).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(3).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(4).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(5).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(6).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(7).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(8).doubleValue(), 4, 0.0);\n    assertEquals(reals.get(9).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(10).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(11).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(12).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(13).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(14).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(15).doubleValue(), 0, 0.0);\n\n    List<Number> imaginary = fft.get(1);\n    for(int i=0; i<imaginary.size(); i++) {\n      assertEquals(imaginary.get(i).doubleValue(), 0.0, 0.0);\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> ifft = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(ifft.get(0).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(1).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(2).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(3).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(4).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(5).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(6).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(7).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(8).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(9).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(10).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(11).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(12).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(13).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(14).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(15).doubleValue(), 4, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testFFT() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=fft(array(1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4, 1, 4, 8, 4)),\" +\n        \"               b=ifft(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n\n    List<List<Number>> fft = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(fft.size(), 2);\n    List<Number> reals = fft.get(0);\n    assertEquals(reals.get(0).doubleValue(), 68, 0.0);\n    assertEquals(reals.get(1).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(2).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(3).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(4).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(5).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(6).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(7).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(8).doubleValue(), 4, 0.0);\n    assertEquals(reals.get(9).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(10).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(11).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(12).doubleValue(), -28, 0.0);\n    assertEquals(reals.get(13).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(14).doubleValue(), 0, 0.0);\n    assertEquals(reals.get(15).doubleValue(), 0, 0.0);\n\n    List<Number> imaginary = fft.get(1);\n    for(int i=0; i<imaginary.size(); i++) {\n      assertEquals(imaginary.get(i).doubleValue(), 0.0, 0.0);\n    }\n\n    List<Number> ifft = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(ifft.get(0).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(1).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(2).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(3).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(4).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(5).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(6).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(7).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(8).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(9).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(10).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(11).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(12).doubleValue(), 1, 0.0);\n    assertEquals(ifft.get(13).doubleValue(), 4, 0.0);\n    assertEquals(ifft.get(14).doubleValue(), 8, 0.0);\n    assertEquals(ifft.get(15).doubleValue(), 4, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["80935b1b8e196d1a1ef6f00a9f32d41160be71ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80935b1b8e196d1a1ef6f00a9f32d41160be71ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80935b1b8e196d1a1ef6f00a9f32d41160be71ee"],"80935b1b8e196d1a1ef6f00a9f32d41160be71ee":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}