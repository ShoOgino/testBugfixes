{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = hasNewAPI ? getFieldQuery(field, queryText, true) : getFieldQuery(field, queryText);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\r\n   * This method may be overridden, for example, to return\r\n   * a SpanNearQuery instead of a PhraseQuery.\r\n   *\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getFieldQuery(String field, String queryText, int slop)\r\n        throws ParseException {\r\n    Query query = getFieldQuery(field, queryText, true);\r\n\r\n    if (query instanceof PhraseQuery) {\r\n      ((PhraseQuery) query).setSlop(slop);\r\n    }\r\n    if (query instanceof MultiPhraseQuery) {\r\n      ((MultiPhraseQuery) query).setSlop(slop);\r\n    }\r\n\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}