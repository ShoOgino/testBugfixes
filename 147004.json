{"path":"backwards/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}