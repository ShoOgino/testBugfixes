{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#isNumericallyIdentical(Plane).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#isNumericallyIdentical(Plane).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#isNumericallyIdentical(Plane).mjava","sourceNew":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","sourceOld":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#isNumericallyIdentical(Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#isNumericallyIdentical(Plane).mjava","sourceNew":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   * @param p is the plane to compare against.\n   * @return true if the planes are numerically identical.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","sourceOld":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#isNumericallyIdentical(Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#isNumericallyIdentical(Plane).mjava","sourceNew":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   * @param p is the plane to compare against.\n   * @return true if the planes are numerically identical.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","sourceOld":"  /**\n   * Returns true if this plane and the other plane are identical within the margin of error.\n   * @param p is the plane to compare against.\n   * @return true if the planes are numerically identical.\n   */\n  protected boolean isNumericallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  If that passes, then compute a point on the plane\n    // (using D) and see if it also on the other plane.\n    if (Math.abs(this.y * p.z - this.z * p.y) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.z * p.x - this.x * p.z) >= MINIMUM_RESOLUTION)\n      return false;\n    if (Math.abs(this.x * p.y - this.y * p.x) >= MINIMUM_RESOLUTION)\n      return false;\n\n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"b4e444678504caf66a8060b1d514383aa4feac0c":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}