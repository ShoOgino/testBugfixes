{"path":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","commits":[{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final FieldType storedInt = new FieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final FieldType storedInt8 = new FieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final FieldType storedInt4 = new FieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final FieldType storedInt2 = new FieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final FieldType storedIntNone = new FieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final FieldType unstoredInt8 = new FieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredInt4 = new FieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredInt2 = new FieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1 << 30) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    final LegacyFieldType storedInt = new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);\n    storedInt.setStored(true);\n    storedInt.freeze();\n\n    final LegacyFieldType storedInt8 = new LegacyFieldType(storedInt);\n    storedInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType storedInt4 = new LegacyFieldType(storedInt);\n    storedInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType storedInt2 = new LegacyFieldType(storedInt);\n    storedInt2.setNumericPrecisionStep(2);\n\n    final LegacyFieldType storedIntNone = new LegacyFieldType(storedInt);\n    storedIntNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final LegacyFieldType unstoredInt = LegacyIntField.TYPE_NOT_STORED;\n\n    final LegacyFieldType unstoredInt8 = new LegacyFieldType(unstoredInt);\n    unstoredInt8.setNumericPrecisionStep(8);\n\n    final LegacyFieldType unstoredInt4 = new LegacyFieldType(unstoredInt);\n    unstoredInt4.setNumericPrecisionStep(4);\n\n    final LegacyFieldType unstoredInt2 = new LegacyFieldType(unstoredInt);\n    unstoredInt2.setNumericPrecisionStep(2);\n\n    LegacyIntField\n      field8 = new LegacyIntField(\"field8\", 0, storedInt8),\n      field4 = new LegacyIntField(\"field4\", 0, storedInt4),\n      field2 = new LegacyIntField(\"field2\", 0, storedInt2),\n      fieldNoTrie = new LegacyIntField(\"field\"+Integer.MAX_VALUE, 0, storedIntNone),\n      ascfield8 = new LegacyIntField(\"ascfield8\", 0, unstoredInt8),\n      ascfield4 = new LegacyIntField(\"ascfield4\", 0, unstoredInt4),\n      ascfield2 = new LegacyIntField(\"ascfield2\", 0, unstoredInt2);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing int values\n    for (int l=0; l<noDocs; l++) {\n      int val=distance*l+startOffset;\n      field8.setIntValue(val);\n      field4.setIntValue(val);\n      field2.setIntValue(val);\n      fieldNoTrie.setIntValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setIntValue(val);\n      ascfield4.setIntValue(val);\n      ascfield2.setIntValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}