{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","commits":[{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        message(\"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            message(\"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          message(\"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          message(\"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              message(\"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null)\n        message(\"startCommit(): start\");\n\n      final SegmentInfos toSync;\n      final long myChangeCount;\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n        myChangeCount = changeCount;\n\n        if (changeCount == lastCommitChangeCount) {\n          if (infoStream != null)\n            message(\"  skip startCommit(): no changes pending\");\n          return;\n        }\n\n        // First, we clone & incref the segmentInfos we intend\n        // to sync, then, without locking, we sync() all files\n        // referenced by toSync, in the background.\n\n        if (infoStream != null)\n          message(\"startCommit index=\" + segString(segmentInfos) + \" changeCount=\" + changeCount);\n\n        readerPool.commit(segmentInfos);\n        toSync = (SegmentInfos) segmentInfos.clone();\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null)\n          toSync.setUserData(commitUserData);\n\n        // This protects the segmentInfos we are now going\n        // to commit.  This is important in case, eg, while\n        // we are trying to sync all referenced files, a\n        // merge completes which would otherwise have\n        // removed the files we are now syncing.\n        deleter.incRef(toSync, false);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n\n          pendingCommit = toSync;\n          pendingCommitSet = true;\n          pendingCommitChangeCount = myChangeCount;\n        }\n\n        if (infoStream != null)\n          message(\"done all syncs\");\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              message(\"hit exception committing segments file\");\n            }\n\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        message(\"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            message(\"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          message(\"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          message(\"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              message(\"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        message(\"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            message(\"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          message(\"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          message(\"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              message(\"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        message(\"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            message(\"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          message(\"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          message(\"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              message(\"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f","date":1322512504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(toSync);\n          return;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(toSync);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":["c00afe74a80796ed1f30a9509b150ff104746a1f","455aeff4fef915340c5b19d71d5e147034e83093"],"bugIntro":["cefe924a3b76c22b7df9a075329750871699af6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      infoStream.message(\"IW\", \"startCommit(): start\");\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        infoStream.message(\"IW\", \"done all syncs\");\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            infoStream.message(\"IW\", \"hit exception committing segments file\");\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream != null) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream != null) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream != null) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      infoStream.message(\"IW\", \"startCommit(): start\");\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        infoStream.message(\"IW\", \"done all syncs\");\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            infoStream.message(\"IW\", \"hit exception committing segments file\");\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      infoStream.message(\"IW\", \"startCommit(): start\");\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        infoStream.message(\"IW\", \"done all syncs\");\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            infoStream.message(\"IW\", \"hit exception committing segments file\");\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"7b91922b55d15444d554721b352861d028eb8278":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["06584e6e98d592b34e1329b384182f368d2025e8"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}