{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","commits":[{"id":"82ae1e051eb54651f97786343944abe292d64b50","date":1425934288,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), \"solr-no-core.xml\");\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir().toFile(), solrXml, JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), \"solr-no-core.xml\");\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir().toFile(), solrXml, JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), \"solr-no-core.xml\");\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir().toFile(), solrXml, JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb1dd39e0b9ce66a5cde22142c4418526734f61","date":1473165216,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82ae1e051eb54651f97786343944abe292d64b50"],"5bb1dd39e0b9ce66a5cde22142c4418526734f61":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"82ae1e051eb54651f97786343944abe292d64b50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","89424def13674ea17829b41c5883c54ecc31a132"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["82ae1e051eb54651f97786343944abe292d64b50"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","5bb1dd39e0b9ce66a5cde22142c4418526734f61"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5bb1dd39e0b9ce66a5cde22142c4418526734f61":["89424def13674ea17829b41c5883c54ecc31a132"],"82ae1e051eb54651f97786343944abe292d64b50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","82ae1e051eb54651f97786343944abe292d64b50"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["5bb1dd39e0b9ce66a5cde22142c4418526734f61","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}