{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5376ad6512aa34ad8188cb794fdeaddcf38e2467","date":1343258582,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SloppySimScorer docScorer = similarity.sloppySimScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          String field = ((SpanQuery)getQuery()).getField();\n          // now the payloads part\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          result.addDetail(expl);\n          result.addDetail(payloadExpl);\n          result.setValue(expl.getValue() * payloadExpl.getValue());\n          result.setDescription(\"PayloadNearQuery, product of:\");\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b799defcfda6d303cbb180917bf1e749089adf42"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5376ad6512aa34ad8188cb794fdeaddcf38e2467"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b799defcfda6d303cbb180917bf1e749089adf42":["5376ad6512aa34ad8188cb794fdeaddcf38e2467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5376ad6512aa34ad8188cb794fdeaddcf38e2467"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b799defcfda6d303cbb180917bf1e749089adf42","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"5376ad6512aa34ad8188cb794fdeaddcf38e2467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5376ad6512aa34ad8188cb794fdeaddcf38e2467"],"b799defcfda6d303cbb180917bf1e749089adf42":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5376ad6512aa34ad8188cb794fdeaddcf38e2467":["aba371508186796cc6151d8223a5b4e16d02e26e","b799defcfda6d303cbb180917bf1e749089adf42","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}