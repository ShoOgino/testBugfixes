{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, final long minBound, final long maxBound,\n    final int shift\n  ) {\n    // calculate new bounds for inner precision\n    final long diff = 1L << (shift+precisionStep),\n      mask = ((1L<<precisionStep) - 1L) << shift;\n    final boolean\n      hasLower = (minBound & mask) != 0L,\n      hasUpper = (maxBound & mask) != mask;\n    final long\n      nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n      nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n    if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n      // We are in the lowest precision or the next precision is not available.\n      addRange(builder, valSize, precisionStep, minBound, maxBound, shift);\n    } else {\n      if (hasLower)\n        addRange(builder, valSize, precisionStep, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, precisionStep, maxBound & ~mask, maxBound, shift);\n      // recurse down to next precision\n      splitRange(\n        builder, valSize, precisionStep,\n        nextMinBound, nextMaxBound,\n        shift+precisionStep\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c254f081571322c1e7c67cf1d4fa4c1b39cd7def","date":1234969682,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long,int).mjava","sourceNew":null,"sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, final long minBound, final long maxBound,\n    final int shift\n  ) {\n    // calculate new bounds for inner precision\n    final long diff = 1L << (shift+precisionStep),\n      mask = ((1L<<precisionStep) - 1L) << shift;\n    final boolean\n      hasLower = (minBound & mask) != 0L,\n      hasUpper = (maxBound & mask) != mask;\n    final long\n      nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n      nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n    if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n      // We are in the lowest precision or the next precision is not available.\n      addRange(builder, valSize, precisionStep, minBound, maxBound, shift);\n    } else {\n      if (hasLower)\n        addRange(builder, valSize, precisionStep, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, precisionStep, maxBound & ~mask, maxBound, shift);\n      // recurse down to next precision\n      splitRange(\n        builder, valSize, precisionStep,\n        nextMinBound, nextMaxBound,\n        shift+precisionStep\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}