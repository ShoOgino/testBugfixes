{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from East North Up right-hand rule to lat lon alt in degrees\n   * @param x easting (in meters)\n   * @param y northing (in meters)\n   * @param z up (in meters)\n   * @param centerLon reference point longitude (in degrees)\n   * @param centerLat reference point latitude (in degrees)\n   * @param centerAlt reference point altitude (in meters)\n   * @param lla resulting lat, lon, alt point (in degrees)\n   * @return lat, lon, alt point (in degrees)\n   */\n  public static double[] enuToLLA(final double x, final double y, final double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] lla) {\n    // convert enuToECF\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    // convert enuToECF, storing intermediate result in lla\n    lla = enuToECF(x, y, z, centerLon, centerLat, centerAlt, lla);\n\n    // convert ecf to LLA\n    return ecfToLLA(lla[0], lla[1], lla[2], lla);\n  }\n\n","sourceOld":"  /**\n   * Converts from East North Up right-hand rule to lat lon alt in degrees\n   * @param x easting (in meters)\n   * @param y northing (in meters)\n   * @param z up (in meters)\n   * @param centerLon reference point longitude (in degrees)\n   * @param centerLat reference point latitude (in degrees)\n   * @param centerAlt reference point altitude (in meters)\n   * @param lla resulting lat, lon, alt point (in degrees)\n   * @return lat, lon, alt point (in degrees)\n   */\n  public static double[] enuToLLA(final double x, final double y, final double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] lla) {\n    // convert enuToECF\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    // convert enuToECF, storing intermediate result in lla\n    lla = enuToECF(x, y, z, centerLon, centerLat, centerAlt, lla);\n\n    // convert ecf to LLA\n    return ecfToLLA(lla[0], lla[1], lla[2], lla);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from East North Up right-hand rule to lat lon alt in degrees\n   * @param x easting (in meters)\n   * @param y northing (in meters)\n   * @param z up (in meters)\n   * @param centerLon reference point longitude (in degrees)\n   * @param centerLat reference point latitude (in degrees)\n   * @param centerAlt reference point altitude (in meters)\n   * @param lla resulting lat, lon, alt point (in degrees)\n   * @return lat, lon, alt point (in degrees)\n   */\n  public static double[] enuToLLA(final double x, final double y, final double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] lla) {\n    // convert enuToECF\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    // convert enuToECF, storing intermediate result in lla\n    lla = enuToECF(x, y, z, centerLon, centerLat, centerAlt, lla);\n\n    // convert ecf to LLA\n    return ecfToLLA(lla[0], lla[1], lla[2], lla);\n  }\n\n","sourceOld":"  /**\n   * Converts from East North Up right-hand rule to lat lon alt in degrees\n   * @param x easting (in meters)\n   * @param y northing (in meters)\n   * @param z up (in meters)\n   * @param centerLon reference point longitude (in degrees)\n   * @param centerLat reference point latitude (in degrees)\n   * @param centerAlt reference point altitude (in meters)\n   * @param lla resulting lat, lon, alt point (in degrees)\n   * @return lat, lon, alt point (in degrees)\n   */\n  public static double[] enuToLLA(final double x, final double y, final double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] lla) {\n    // convert enuToECF\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    // convert enuToECF, storing intermediate result in lla\n    lla = enuToECF(x, y, z, centerLon, centerLat, centerAlt, lla);\n\n    // convert ecf to LLA\n    return ecfToLLA(lla[0], lla[1], lla[2], lla);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#enuToLLA(double,double,double,double,double,double,double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts from East North Up right-hand rule to lat lon alt in degrees\n   * @param x easting (in meters)\n   * @param y northing (in meters)\n   * @param z up (in meters)\n   * @param centerLon reference point longitude (in degrees)\n   * @param centerLat reference point latitude (in degrees)\n   * @param centerAlt reference point altitude (in meters)\n   * @param lla resulting lat, lon, alt point (in degrees)\n   * @return lat, lon, alt point (in degrees)\n   */\n  public static double[] enuToLLA(final double x, final double y, final double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] lla) {\n    // convert enuToECF\n    if (lla == null) {\n      lla = new double[3];\n    }\n\n    // convert enuToECF, storing intermediate result in lla\n    lla = enuToECF(x, y, z, centerLon, centerLat, centerAlt, lla);\n\n    // convert ecf to LLA\n    return ecfToLLA(lla[0], lla[1], lla[2], lla);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}