{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7a22040361048538d0c77fd31be1efbb49bdcd9","date":1257281892,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"a7a22040361048538d0c77fd31be1efbb49bdcd9":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a7a22040361048538d0c77fd31be1efbb49bdcd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["a7a22040361048538d0c77fd31be1efbb49bdcd9"],"a7a22040361048538d0c77fd31be1efbb49bdcd9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}