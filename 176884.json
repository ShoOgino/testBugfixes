{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/association/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(\n        taxoWriter, new EnhancementsIndexingParams(new AssociationEnhancement()));\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryContainer container = new CategoryContainer();\n      container.addCategory(aint, new AssociationIntProperty(2));\n      container.addCategory(afloat, new AssociationFloatProperty(0.5f));\n      if (i % 2 == 0) { // 50\n        container.addCategory(bint, new AssociationIntProperty(3));\n        container.addCategory(bfloat, new AssociationFloatProperty(0.2f));\n      }\n      builder.setCategories(container).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/associations/AssociationsFacetRequestTest#beforeClassAssociationsFacetRequestTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassAssociationsFacetRequestTest() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxoWriter);\n    \n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      associations.setAssociation(aint, new CategoryIntAssociation(2));\n      associations.setAssociation(afloat, new CategoryFloatAssociation(0.5f));\n      if (i % 2 == 0) { // 50\n        associations.setAssociation(bint, new CategoryIntAssociation(3));\n        associations.setAssociation(bfloat, new CategoryFloatAssociation(0.2f));\n      }\n      assocFacetFields.addFields(doc, associations);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}