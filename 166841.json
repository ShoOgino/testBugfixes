{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ccc08aa684aee4964baee0644a6ba047bfd70829","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7530de27b87b961b51f01bd1299b7004d46e8823","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}