{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseDiskUsage().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void xxxtestCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void xxxtestCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}