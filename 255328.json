{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #assertBeforeAfterBetween \n   * @see #buildListOfFacetRangeOtherOptions\n   */\n  private static final String formatFacetRangeOther(EnumSet<FacetRangeOther> other) {\n    if (other.contains(FacetRangeOther.NONE) && random().nextBoolean()) {\n      return \"\"; // sometimes don't output a param at all when we're dealing with the default NONE\n    }\n    String val = other.toString();\n    if (random().nextBoolean()) {\n      // two valid syntaxes to randomize between:\n      // - a JSON list of items (conviniently the default toString of EnumSet),\n      // - a single quoted string containing the comma seperated list\n      val = val.replaceAll(\"\\\\[|\\\\]\",\"'\");\n\n      // HACK: work around SOLR-12539...\n      //\n      // when sending a single string containing a comma seperated list of values, JSON Facets 'other'\n      // parsing can't handle any leading (or trailing?) whitespace\n      val = val.replaceAll(\"\\\\s\",\"\");\n    }\n    return \", other:\" + val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #assertBeforeAfterBetween \n   * @see #buildListOfFacetRangeOtherOptions\n   */\n  private static final String formatFacetRangeOther(EnumSet<FacetRangeOther> other) {\n    if (other.contains(FacetRangeOther.NONE) && random().nextBoolean()) {\n      return \"\"; // sometimes don't output a param at all when we're dealing with the default NONE\n    }\n    String val = other.toString();\n    if (random().nextBoolean()) {\n      // two valid syntaxes to randomize between:\n      // - a JSON list of items (conviniently the default toString of EnumSet),\n      // - a single quoted string containing the comma seperated list\n      val = val.replaceAll(\"\\\\[|\\\\]\",\"'\");\n\n      // HACK: work around SOLR-12539...\n      //\n      // when sending a single string containing a comma seperated list of values, JSON Facets 'other'\n      // parsing can't handle any leading (or trailing?) whitespace\n      val = val.replaceAll(\"\\\\s\",\"\");\n    }\n    return \", other:\" + val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #assertBeforeAfterBetween \n   * @see #buildListOfFacetRangeOtherOptions\n   */\n  private static final String formatFacetRangeOther(EnumSet<FacetRangeOther> other) {\n    if (other.contains(FacetRangeOther.NONE) && random().nextBoolean()) {\n      return \"\"; // sometimes don't output a param at all when we're dealing with the default NONE\n    }\n    String val = other.toString();\n    if (random().nextBoolean()) {\n      // two valid syntaxes to randomize between:\n      // - a JSON list of items (conviniently the default toString of EnumSet),\n      // - a single quoted string containing the comma seperated list\n      val = val.replaceAll(\"\\\\[|\\\\]\",\"'\");\n\n      // HACK: work around SOLR-12539...\n      //\n      // when sending a single string containing a comma seperated list of values, JSON Facets 'other'\n      // parsing can't handle any leading (or trailing?) whitespace\n      val = val.replaceAll(\"\\\\s\",\"\");\n    }\n    return \", other:\" + val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#formatFacetRangeOther(EnumSet[FacetRangeOther]).mjava","sourceNew":"  /** \n   * @see #assertBeforeAfterBetween \n   * @see #buildListOfFacetRangeOtherOptions\n   */\n  private static final String formatFacetRangeOther(EnumSet<FacetRangeOther> other) {\n    if (other.contains(FacetRangeOther.NONE) && random().nextBoolean()) {\n      return \"\"; // sometimes don't output a param at all when we're dealing with the default NONE\n    }\n    String val = other.toString();\n    if (random().nextBoolean()) {\n      // two valid syntaxes to randomize between:\n      // - a JSON list of items (conveniently the default toString of EnumSet),\n      // - a single quoted string containing the comma separated list\n      val = val.replaceAll(\"\\\\[|\\\\]\",\"'\");\n\n      // HACK: work around SOLR-12539...\n      //\n      // when sending a single string containing a comma separated list of values, JSON Facets 'other'\n      // parsing can't handle any leading (or trailing?) whitespace\n      val = val.replaceAll(\"\\\\s\",\"\");\n    }\n    return \", other:\" + val;\n  }\n\n","sourceOld":"  /** \n   * @see #assertBeforeAfterBetween \n   * @see #buildListOfFacetRangeOtherOptions\n   */\n  private static final String formatFacetRangeOther(EnumSet<FacetRangeOther> other) {\n    if (other.contains(FacetRangeOther.NONE) && random().nextBoolean()) {\n      return \"\"; // sometimes don't output a param at all when we're dealing with the default NONE\n    }\n    String val = other.toString();\n    if (random().nextBoolean()) {\n      // two valid syntaxes to randomize between:\n      // - a JSON list of items (conviniently the default toString of EnumSet),\n      // - a single quoted string containing the comma seperated list\n      val = val.replaceAll(\"\\\\[|\\\\]\",\"'\");\n\n      // HACK: work around SOLR-12539...\n      //\n      // when sending a single string containing a comma seperated list of values, JSON Facets 'other'\n      // parsing can't handle any leading (or trailing?) whitespace\n      val = val.replaceAll(\"\\\\s\",\"\");\n    }\n    return \", other:\" + val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["c05b634713ca09b2267477408773904d4c69dd9d"],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}