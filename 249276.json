{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f98959552975d79aafaf0f964262eac98ded407","date":1359372702,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      FacetLabel label = new FacetLabel(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      FacetLabel label = new FacetLabel(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      FacetLabel label = new FacetLabel(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      FacetLabel label = new FacetLabel(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      FacetLabel label = new FacetLabel(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      FacetLabel label = new FacetLabel(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    Random random = random();\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(buffer.length);\n\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      uniqueValues[i] = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      // we cannot have empty path components, so eliminate all prefix as well\n      // as middle consecuive delimiter chars.\n      uniqueValues[i] = uniqueValues[i].replaceAll(\"/+\", \"/\");\n      if (uniqueValues[i].startsWith(\"/\")) {\n        uniqueValues[i] = uniqueValues[i].substring(1);\n      }\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TERMINATOR_CHAR) == -1) {\n        i++;\n      }\n    }\n\n    File tmpDir = _TestUtil.getTempDir(\"testLableToOrdinal\");\n    File f = new File(tmpDir, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.INVALID_ORDINAL) {\n        ord1 = compact.getNextOrdinal();\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2acf500f78aa12b92e371fd89c719291986b6b90","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"9f98959552975d79aafaf0f964262eac98ded407":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"de522d9303bd67c8473a269a1319125d1f3700e0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9f98959552975d79aafaf0f964262eac98ded407"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9f98959552975d79aafaf0f964262eac98ded407"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9f98959552975d79aafaf0f964262eac98ded407","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["de522d9303bd67c8473a269a1319125d1f3700e0"],"9f98959552975d79aafaf0f964262eac98ded407":["de522d9303bd67c8473a269a1319125d1f3700e0","c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9f98959552975d79aafaf0f964262eac98ded407"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}