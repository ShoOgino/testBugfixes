{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<Completion>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<Object>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<Completion>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<Object>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<Completion>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<Object>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label(), output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedByWeight(BytesRef,int,boolean).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label(), output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted by weight (descending order).\n   * \n   * @param collectAll\n   *          If <code>true</code>, the routine terminates immediately when\n   *          <code>num</code> suggestions have been collected. If\n   *          <code>false</code>, it will collect suggestions from all weight\n   *          arcs (needed for {@link #lookupSortedAlphabetically}.\n   */\n  private ArrayList<Completion> lookupSortedByWeight(BytesRef key, \n      int num, boolean collectAll) throws IOException {\n    // Don't overallocate the results buffers. This also serves the purpose of\n    // allowing the user of this class to request all matches using Integer.MAX_VALUE as\n    // the number of results.\n    final ArrayList<Completion> res = new ArrayList<>(Math.min(10, num));\n\n    final BytesRef output = BytesRef.deepCopyOf(key);\n    for (int i = 0; i < rootArcs.length; i++) {\n      final FST.Arc<Object> rootArc = rootArcs[i];\n      final FST.Arc<Object> arc = new FST.Arc<>().copyFrom(rootArc);\n\n      // Descend into the automaton using the key as prefix.\n      if (descendWithPrefix(arc, key)) {\n        // A subgraph starting from the current node has the completions\n        // of the key prefix. The arc we're at is the last key's byte,\n        // so we will collect it too.\n        output.length = key.length - 1;\n        if (collect(res, num, rootArc.label, output, arc) && !collectAll) {\n          // We have enough suggestions to return immediately. Keep on looking\n          // for an\n          // exact match, if requested.\n          if (exactFirst) {\n            if (!checkExistingAndReorder(res, key)) {\n              int exactMatchBucket = getExactMatchStartingFromRootArc(i, key);\n              if (exactMatchBucket != -1) {\n                // Insert as the first result and truncate at num.\n                while (res.size() >= num) {\n                  res.remove(res.size() - 1);\n                }\n                res.add(0, new Completion(key, exactMatchBucket));\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}