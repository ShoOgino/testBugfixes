{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","commits":[{"id":"e886fb6afe33a296f3d21a4c18694ecb64545fab","date":1226485789,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) return null;\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        Method m = clob.getClass().getDeclaredMethod(\"getCharacterStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (Reader) m.invoke(clob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (Reader) m.invoke(clob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d4a44214b48253e7b31007bdbb13a3b9c4e05bf","91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5db4e847e2754f60ffa4d9077a776a2acb2cae4c","date":1229065329,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) return null;\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) return null;\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        Method m = clob.getClass().getDeclaredMethod(\"getCharacterStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (Reader) m.invoke(clob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (Reader) m.invoke(clob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1da6c4bbda632890f99e378fd6f91a563fbcb69","date":1252578141,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) return null;\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d","date":1252650875,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = vr.resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c1da6c4bbda632890f99e378fd6f91a563fbcb69":["5db4e847e2754f60ffa4d9077a776a2acb2cae4c"],"5db4e847e2754f60ffa4d9077a776a2acb2cae4c":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d":["c1da6c4bbda632890f99e378fd6f91a563fbcb69"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c1da6c4bbda632890f99e378fd6f91a563fbcb69":["91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d"],"5db4e847e2754f60ffa4d9077a776a2acb2cae4c":["c1da6c4bbda632890f99e378fd6f91a563fbcb69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91d3b73dd774ab15fb9947dd874e4fd79d3a0f0d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["5db4e847e2754f60ffa4d9077a776a2acb2cae4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}