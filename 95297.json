{"path":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"/dev/null","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    if( doc.getBoost( null ) != null ) {\n      writer.write(\"<doc boost=\\\"\"+doc.getBoost( null )+\"\\\">\");\n    }\n    else {\n      writer.write(\"<doc>\");\n    }\n\n    for( String name : doc.getFieldNames() ) {\n      Float boost = doc.getBoost( name );\n      for( Object o : doc.getFieldValues( name ) ) {\n        writeFieldValue(writer, name, boost, o );\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"286166e58727935130a321705417cfb48be18199","date":1182150566,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    if( doc.getBoost( null ) != null ) {\n      writer.write(\"<doc boost=\\\"\"+doc.getBoost( null )+\"\\\">\");\n    }\n    else {\n      writer.write(\"<doc>\");\n    }\n\n    for( String name : doc.getFieldNames() ) {\n      Float boost = doc.getBoost( name );\n      for( Object o : doc.getFieldValues( name ) ) {\n        writeFieldValue(writer, name, boost, o );\n        // only write the boost for the first mulit-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = null; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    if( doc.getBoost( null ) != null ) {\n      writer.write(\"<doc boost=\\\"\"+doc.getBoost( null )+\"\\\">\");\n    }\n    else {\n      writer.write(\"<doc>\");\n    }\n\n    for( String name : doc.getFieldNames() ) {\n      Float boost = doc.getBoost( name );\n      for( Object o : doc.getFieldValues( name ) ) {\n        writeFieldValue(writer, name, boost, o );\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n   \n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      for( Object o : field ) {\n        writeFieldValue(writer, field.getName(), boost, o );\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    if( doc.getBoost( null ) != null ) {\n      writer.write(\"<doc boost=\\\"\"+doc.getBoost( null )+\"\\\">\");\n    }\n    else {\n      writer.write(\"<doc>\");\n    }\n\n    for( String name : doc.getFieldNames() ) {\n      Float boost = doc.getBoost( name );\n      for( Object o : doc.getFieldValues( name ) ) {\n        writeFieldValue(writer, name, boost, o );\n        // only write the boost for the first mulit-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = null; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc96d89635dd9a7189823937ca229dd46020bbbb","date":1191349769,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n   \n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = fmtThreadLocal.get().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost ); \n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name ); \n        }\n        \n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n   \n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      for( Object o : field ) {\n        writeFieldValue(writer, field.getName(), boost, o );\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n   \n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = fmtThreadLocal.get().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost ); \n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name ); \n        }\n        \n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f; \n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"286166e58727935130a321705417cfb48be18199":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["286166e58727935130a321705417cfb48be18199"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["fc96d89635dd9a7189823937ca229dd46020bbbb"],"fc96d89635dd9a7189823937ca229dd46020bbbb":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"286166e58727935130a321705417cfb48be18199":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["fc96d89635dd9a7189823937ca229dd46020bbbb"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["286166e58727935130a321705417cfb48be18199"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"fc96d89635dd9a7189823937ca229dd46020bbbb":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}