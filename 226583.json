{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","commits":[{"id":"8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70","date":1358730615,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // nocommit binary, sorted too\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new PackedLongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new StraightBytesDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                assertEquals(numbers.get(docID).longValue(), ndv.get(docID));\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                sdv.get(docID, scratch);\n                assertEquals(sorted.get(docID), scratch);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // nocommit binary, sorted too\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new PackedLongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new StraightBytesDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // nocommit binary, sorted too\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new PackedLongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new StraightBytesDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                assertEquals(numbers.get(docID).longValue(), ndv.get(docID));\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                sdv.get(docID, scratch);\n                assertEquals(sorted.get(docID), scratch);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef","date":1358808656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new LongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // nocommit binary, sorted too\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new PackedLongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new StraightBytesDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new LongDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedBytesDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(6)) {\n                case 0:\n                  assertEquals((byte) numbers.get(docID).longValue(), FieldCache.DEFAULT.getBytes(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals((short) numbers.get(docID).longValue(), FieldCache.DEFAULT.getShorts(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 4:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 5:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(_TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = _TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<Long>();\n    final List<BytesRef> binary = new ArrayList<BytesRef>();\n    final List<BytesRef> sorted = new ArrayList<BytesRef>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<Thread>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false).get(docID));\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false).get(docID));\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_INT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_LONG_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false).get(docID));\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    assertEquals(1, r.leaves().size());\n    final AtomicReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              FieldCache.Longs ndv = FieldCache.DEFAULT.getLongs(ar, \"number\", false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              BytesRef scratch = new BytesRef();\n              BytesRef scratch2 = new BytesRef();\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals((int) numbers.get(docID).longValue(), FieldCache.DEFAULT.getInts(ar, \"number\", false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getLongs(ar, \"number\", false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(Float.intBitsToFloat((int) numbers.get(docID).longValue()), FieldCache.DEFAULT.getFloats(ar, \"number\", false).get(docID), 0.0f);\n                  break;\n                case 3:\n                  assertEquals(Double.longBitsToDouble(numbers.get(docID).longValue()), FieldCache.DEFAULT.getDoubles(ar, \"number\", false).get(docID), 0.0);\n                  break;\n                }\n                bdv.get(docID, scratch);\n                assertEquals(binary.get(docID), scratch);\n                // Cannot share a single scratch against two \"sources\":\n                sdv.get(docID, scratch2);\n                assertEquals(sorted.get(docID), scratch2);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"6613659748fe4411a7dcf85266e55db1f95f7315":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["6312aec6ba581f919d406ceff362bef430382c31"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6312aec6ba581f919d406ceff362bef430382c31":["8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70":["6312aec6ba581f919d406ceff362bef430382c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","8750a5466b5d1b5eb7ae596d683f85b2f8d6cc70"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","87d6f9603307ae2ad642fb01deedf031320fd0c3"],"6312aec6ba581f919d406ceff362bef430382c31":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}