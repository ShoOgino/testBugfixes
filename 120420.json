{"path":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","commits":[{"id":"8755b1daa1c63872586a893e312ceb80877a8d59","date":1041906652,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link Document#getValues()} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n        try\n        {\n            doAssert(hits.doc(0), true);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(System.err);\n            System.err.print(\"\\n\");\n        }\n        finally\n        {\n            searcher.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f5f3870d782628baf6dd6c5d38aeb7361c0ad95","date":1093899364,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n        try\n        {\n            doAssert(hits.doc(0), true);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(System.err);\n            System.err.print(\"\\n\");\n        }\n        finally\n        {\n            searcher.close();\n        }\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues()} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n        try\n        {\n            doAssert(hits.doc(0), true);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(System.err);\n            System.err.print(\"\\n\");\n        }\n        finally\n        {\n            searcher.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cecbacd2f253331ff961f96749d7d28ac51bbbf","date":1120322444,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n         doAssert(hits.doc(0), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n        try\n        {\n            doAssert(hits.doc(0), true);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(System.err);\n            System.err.print(\"\\n\");\n        }\n        finally\n        {\n            searcher.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n         doAssert(hits.doc(0), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n         doAssert(hits.doc(0), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        Hits hits = searcher.search(query);\n\tassertEquals(1, hits.length());\n\n         doAssert(hits.doc(0), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["9f5f3870d782628baf6dd6c5d38aeb7361c0ad95"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"8755b1daa1c63872586a893e312ceb80877a8d59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"9f5f3870d782628baf6dd6c5d38aeb7361c0ad95":["8755b1daa1c63872586a893e312ceb80877a8d59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"8755b1daa1c63872586a893e312ceb80877a8d59":["9f5f3870d782628baf6dd6c5d38aeb7361c0ad95"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8755b1daa1c63872586a893e312ceb80877a8d59"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"9f5f3870d782628baf6dd6c5d38aeb7361c0ad95":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}