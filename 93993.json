{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"/dev/null","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    BulkOperation[] ops = BULK_OPERATIONS.get(format);\n    if (ops == null || ops[bitsPerValue] == null) {\n      throw new IllegalArgumentException(\"format: \" + format + \", bitsPerValue: \" + bitsPerValue);\n    }\n    return ops[bitsPerValue];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"/dev/null","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    BulkOperation[] ops = BULK_OPERATIONS.get(format);\n    if (ops == null || ops[bitsPerValue] == null) {\n      throw new IllegalArgumentException(\"format: \" + format + \", bitsPerValue: \" + bitsPerValue);\n    }\n    return ops[bitsPerValue];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_1;\n      case 2:\n        return PACKED_2;\n      case 3:\n        return PACKED_3;\n      case 4:\n        return PACKED_4;\n      case 5:\n        return PACKED_5;\n      case 6:\n        return PACKED_6;\n      case 7:\n        return PACKED_7;\n      case 8:\n        return PACKED_8;\n      case 9:\n        return PACKED_9;\n      case 10:\n        return PACKED_10;\n      case 11:\n        return PACKED_11;\n      case 12:\n        return PACKED_12;\n      case 13:\n        return PACKED_13;\n      case 14:\n        return PACKED_14;\n      case 15:\n        return PACKED_15;\n      case 16:\n        return PACKED_16;\n      case 17:\n        return PACKED_17;\n      case 18:\n        return PACKED_18;\n      case 19:\n        return PACKED_19;\n      case 20:\n        return PACKED_20;\n      case 21:\n        return PACKED_21;\n      case 22:\n        return PACKED_22;\n      case 23:\n        return PACKED_23;\n      case 24:\n        return PACKED_24;\n      case 25:\n        return PACKED_25;\n      case 26:\n        return PACKED_26;\n      case 27:\n        return PACKED_27;\n      case 28:\n        return PACKED_28;\n      case 29:\n        return PACKED_29;\n      case 30:\n        return PACKED_30;\n      case 31:\n        return PACKED_31;\n      case 32:\n        return PACKED_32;\n      case 33:\n        return PACKED_33;\n      case 34:\n        return PACKED_34;\n      case 35:\n        return PACKED_35;\n      case 36:\n        return PACKED_36;\n      case 37:\n        return PACKED_37;\n      case 38:\n        return PACKED_38;\n      case 39:\n        return PACKED_39;\n      case 40:\n        return PACKED_40;\n      case 41:\n        return PACKED_41;\n      case 42:\n        return PACKED_42;\n      case 43:\n        return PACKED_43;\n      case 44:\n        return PACKED_44;\n      case 45:\n        return PACKED_45;\n      case 46:\n        return PACKED_46;\n      case 47:\n        return PACKED_47;\n      case 48:\n        return PACKED_48;\n      case 49:\n        return PACKED_49;\n      case 50:\n        return PACKED_50;\n      case 51:\n        return PACKED_51;\n      case 52:\n        return PACKED_52;\n      case 53:\n        return PACKED_53;\n      case 54:\n        return PACKED_54;\n      case 55:\n        return PACKED_55;\n      case 56:\n        return PACKED_56;\n      case 57:\n        return PACKED_57;\n      case 58:\n        return PACKED_58;\n      case 59:\n        return PACKED_59;\n      case 60:\n        return PACKED_60;\n      case 61:\n        return PACKED_61;\n      case 62:\n        return PACKED_62;\n      case 63:\n        return PACKED_63;\n      case 64:\n        return PACKED_64;\n      default:\n        throw new AssertionError();\n      }\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_SINGLE_BLOCK_1;\n      case 2:\n        return PACKED_SINGLE_BLOCK_2;\n      case 3:\n        return PACKED_SINGLE_BLOCK_3;\n      case 4:\n        return PACKED_SINGLE_BLOCK_4;\n      case 5:\n        return PACKED_SINGLE_BLOCK_5;\n      case 6:\n        return PACKED_SINGLE_BLOCK_6;\n      case 7:\n        return PACKED_SINGLE_BLOCK_7;\n      case 8:\n        return PACKED_SINGLE_BLOCK_8;\n      case 9:\n        return PACKED_SINGLE_BLOCK_9;\n      case 10:\n        return PACKED_SINGLE_BLOCK_10;\n      case 12:\n        return PACKED_SINGLE_BLOCK_12;\n      case 16:\n        return PACKED_SINGLE_BLOCK_16;\n      case 21:\n        return PACKED_SINGLE_BLOCK_21;\n      case 32:\n        return PACKED_SINGLE_BLOCK_32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    BulkOperation[] ops = BULK_OPERATIONS.get(format);\n    if (ops == null || ops[bitsPerValue] == null) {\n      throw new IllegalArgumentException(\"format: \" + format + \", bitsPerValue: \" + bitsPerValue);\n    }\n    return ops[bitsPerValue];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_1;\n      case 2:\n        return PACKED_2;\n      case 3:\n        return PACKED_3;\n      case 4:\n        return PACKED_4;\n      case 5:\n        return PACKED_5;\n      case 6:\n        return PACKED_6;\n      case 7:\n        return PACKED_7;\n      case 8:\n        return PACKED_8;\n      case 9:\n        return PACKED_9;\n      case 10:\n        return PACKED_10;\n      case 11:\n        return PACKED_11;\n      case 12:\n        return PACKED_12;\n      case 13:\n        return PACKED_13;\n      case 14:\n        return PACKED_14;\n      case 15:\n        return PACKED_15;\n      case 16:\n        return PACKED_16;\n      case 17:\n        return PACKED_17;\n      case 18:\n        return PACKED_18;\n      case 19:\n        return PACKED_19;\n      case 20:\n        return PACKED_20;\n      case 21:\n        return PACKED_21;\n      case 22:\n        return PACKED_22;\n      case 23:\n        return PACKED_23;\n      case 24:\n        return PACKED_24;\n      case 25:\n        return PACKED_25;\n      case 26:\n        return PACKED_26;\n      case 27:\n        return PACKED_27;\n      case 28:\n        return PACKED_28;\n      case 29:\n        return PACKED_29;\n      case 30:\n        return PACKED_30;\n      case 31:\n        return PACKED_31;\n      case 32:\n        return PACKED_32;\n      case 33:\n        return PACKED_33;\n      case 34:\n        return PACKED_34;\n      case 35:\n        return PACKED_35;\n      case 36:\n        return PACKED_36;\n      case 37:\n        return PACKED_37;\n      case 38:\n        return PACKED_38;\n      case 39:\n        return PACKED_39;\n      case 40:\n        return PACKED_40;\n      case 41:\n        return PACKED_41;\n      case 42:\n        return PACKED_42;\n      case 43:\n        return PACKED_43;\n      case 44:\n        return PACKED_44;\n      case 45:\n        return PACKED_45;\n      case 46:\n        return PACKED_46;\n      case 47:\n        return PACKED_47;\n      case 48:\n        return PACKED_48;\n      case 49:\n        return PACKED_49;\n      case 50:\n        return PACKED_50;\n      case 51:\n        return PACKED_51;\n      case 52:\n        return PACKED_52;\n      case 53:\n        return PACKED_53;\n      case 54:\n        return PACKED_54;\n      case 55:\n        return PACKED_55;\n      case 56:\n        return PACKED_56;\n      case 57:\n        return PACKED_57;\n      case 58:\n        return PACKED_58;\n      case 59:\n        return PACKED_59;\n      case 60:\n        return PACKED_60;\n      case 61:\n        return PACKED_61;\n      case 62:\n        return PACKED_62;\n      case 63:\n        return PACKED_63;\n      case 64:\n        return PACKED_64;\n      default:\n        throw new AssertionError();\n      }\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_SINGLE_BLOCK_1;\n      case 2:\n        return PACKED_SINGLE_BLOCK_2;\n      case 3:\n        return PACKED_SINGLE_BLOCK_3;\n      case 4:\n        return PACKED_SINGLE_BLOCK_4;\n      case 5:\n        return PACKED_SINGLE_BLOCK_5;\n      case 6:\n        return PACKED_SINGLE_BLOCK_6;\n      case 7:\n        return PACKED_SINGLE_BLOCK_7;\n      case 8:\n        return PACKED_SINGLE_BLOCK_8;\n      case 9:\n        return PACKED_SINGLE_BLOCK_9;\n      case 10:\n        return PACKED_SINGLE_BLOCK_10;\n      case 12:\n        return PACKED_SINGLE_BLOCK_12;\n      case 16:\n        return PACKED_SINGLE_BLOCK_16;\n      case 21:\n        return PACKED_SINGLE_BLOCK_21;\n      case 32:\n        return PACKED_SINGLE_BLOCK_32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    BulkOperation[] ops = BULK_OPERATIONS.get(format);\n    if (ops == null || ops[bitsPerValue] == null) {\n      throw new IllegalArgumentException(\"format: \" + format + \", bitsPerValue: \" + bitsPerValue);\n    }\n    return ops[bitsPerValue];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      switch (bitsPerValue) {\n      case 1:\n        return packed1;\n      case 2:\n        return packed2;\n      case 3:\n        return packed3;\n      case 4:\n        return packed4;\n      case 5:\n        return packed5;\n      case 6:\n        return packed6;\n      case 7:\n        return packed7;\n      case 8:\n        return packed8;\n      case 9:\n        return packed9;\n      case 10:\n        return packed10;\n      case 11:\n        return packed11;\n      case 12:\n        return packed12;\n      case 13:\n        return packed13;\n      case 14:\n        return packed14;\n      case 15:\n        return packed15;\n      case 16:\n        return packed16;\n      case 17:\n        return packed17;\n      case 18:\n        return packed18;\n      case 19:\n        return packed19;\n      case 20:\n        return packed20;\n      case 21:\n        return packed21;\n      case 22:\n        return packed22;\n      case 23:\n        return packed23;\n      case 24:\n        return packed24;\n      case 25:\n        return packed25;\n      case 26:\n        return packed26;\n      case 27:\n        return packed27;\n      case 28:\n        return packed28;\n      case 29:\n        return packed29;\n      case 30:\n        return packed30;\n      case 31:\n        return packed31;\n      case 32:\n        return packed32;\n      case 33:\n        return packed33;\n      case 34:\n        return packed34;\n      case 35:\n        return packed35;\n      case 36:\n        return packed36;\n      case 37:\n        return packed37;\n      case 38:\n        return packed38;\n      case 39:\n        return packed39;\n      case 40:\n        return packed40;\n      case 41:\n        return packed41;\n      case 42:\n        return packed42;\n      case 43:\n        return packed43;\n      case 44:\n        return packed44;\n      case 45:\n        return packed45;\n      case 46:\n        return packed46;\n      case 47:\n        return packed47;\n      case 48:\n        return packed48;\n      case 49:\n        return packed49;\n      case 50:\n        return packed50;\n      case 51:\n        return packed51;\n      case 52:\n        return packed52;\n      case 53:\n        return packed53;\n      case 54:\n        return packed54;\n      case 55:\n        return packed55;\n      case 56:\n        return packed56;\n      case 57:\n        return packed57;\n      case 58:\n        return packed58;\n      case 59:\n        return packed59;\n      case 60:\n        return packed60;\n      case 61:\n        return packed61;\n      case 62:\n        return packed62;\n      case 63:\n        return packed63;\n      case 64:\n        return packed64;\n      default:\n        throw new AssertionError();\n      }\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return packedSingleBlock1;\n      case 2:\n        return packedSingleBlock2;\n      case 3:\n        return packedSingleBlock3;\n      case 4:\n        return packedSingleBlock4;\n      case 5:\n        return packedSingleBlock5;\n      case 6:\n        return packedSingleBlock6;\n      case 7:\n        return packedSingleBlock7;\n      case 8:\n        return packedSingleBlock8;\n      case 9:\n        return packedSingleBlock9;\n      case 10:\n        return packedSingleBlock10;\n      case 12:\n        return packedSingleBlock12;\n      case 16:\n        return packedSingleBlock16;\n      case 21:\n        return packedSingleBlock21;\n      case 32:\n        return packedSingleBlock32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_1;\n      case 2:\n        return PACKED_2;\n      case 3:\n        return PACKED_3;\n      case 4:\n        return PACKED_4;\n      case 5:\n        return PACKED_5;\n      case 6:\n        return PACKED_6;\n      case 7:\n        return PACKED_7;\n      case 8:\n        return PACKED_8;\n      case 9:\n        return PACKED_9;\n      case 10:\n        return PACKED_10;\n      case 11:\n        return PACKED_11;\n      case 12:\n        return PACKED_12;\n      case 13:\n        return PACKED_13;\n      case 14:\n        return PACKED_14;\n      case 15:\n        return PACKED_15;\n      case 16:\n        return PACKED_16;\n      case 17:\n        return PACKED_17;\n      case 18:\n        return PACKED_18;\n      case 19:\n        return PACKED_19;\n      case 20:\n        return PACKED_20;\n      case 21:\n        return PACKED_21;\n      case 22:\n        return PACKED_22;\n      case 23:\n        return PACKED_23;\n      case 24:\n        return PACKED_24;\n      case 25:\n        return PACKED_25;\n      case 26:\n        return PACKED_26;\n      case 27:\n        return PACKED_27;\n      case 28:\n        return PACKED_28;\n      case 29:\n        return PACKED_29;\n      case 30:\n        return PACKED_30;\n      case 31:\n        return PACKED_31;\n      case 32:\n        return PACKED_32;\n      case 33:\n        return PACKED_33;\n      case 34:\n        return PACKED_34;\n      case 35:\n        return PACKED_35;\n      case 36:\n        return PACKED_36;\n      case 37:\n        return PACKED_37;\n      case 38:\n        return PACKED_38;\n      case 39:\n        return PACKED_39;\n      case 40:\n        return PACKED_40;\n      case 41:\n        return PACKED_41;\n      case 42:\n        return PACKED_42;\n      case 43:\n        return PACKED_43;\n      case 44:\n        return PACKED_44;\n      case 45:\n        return PACKED_45;\n      case 46:\n        return PACKED_46;\n      case 47:\n        return PACKED_47;\n      case 48:\n        return PACKED_48;\n      case 49:\n        return PACKED_49;\n      case 50:\n        return PACKED_50;\n      case 51:\n        return PACKED_51;\n      case 52:\n        return PACKED_52;\n      case 53:\n        return PACKED_53;\n      case 54:\n        return PACKED_54;\n      case 55:\n        return PACKED_55;\n      case 56:\n        return PACKED_56;\n      case 57:\n        return PACKED_57;\n      case 58:\n        return PACKED_58;\n      case 59:\n        return PACKED_59;\n      case 60:\n        return PACKED_60;\n      case 61:\n        return PACKED_61;\n      case 62:\n        return PACKED_62;\n      case 63:\n        return PACKED_63;\n      case 64:\n        return PACKED_64;\n      default:\n        throw new AssertionError();\n      }\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return PACKED_SINGLE_BLOCK_1;\n      case 2:\n        return PACKED_SINGLE_BLOCK_2;\n      case 3:\n        return PACKED_SINGLE_BLOCK_3;\n      case 4:\n        return PACKED_SINGLE_BLOCK_4;\n      case 5:\n        return PACKED_SINGLE_BLOCK_5;\n      case 6:\n        return PACKED_SINGLE_BLOCK_6;\n      case 7:\n        return PACKED_SINGLE_BLOCK_7;\n      case 8:\n        return PACKED_SINGLE_BLOCK_8;\n      case 9:\n        return PACKED_SINGLE_BLOCK_9;\n      case 10:\n        return PACKED_SINGLE_BLOCK_10;\n      case 12:\n        return PACKED_SINGLE_BLOCK_12;\n      case 16:\n        return PACKED_SINGLE_BLOCK_16;\n      case 21:\n        return PACKED_SINGLE_BLOCK_21;\n      case 32:\n        return PACKED_SINGLE_BLOCK_32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70b0fe679330f3d0bb9c4161c4ef8aa48be3915c","date":1345719954,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      return packedBulkOps[bitsPerValue - 1];\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return packedSingleBlock1;\n      case 2:\n        return packedSingleBlock2;\n      case 3:\n        return packedSingleBlock3;\n      case 4:\n        return packedSingleBlock4;\n      case 5:\n        return packedSingleBlock5;\n      case 6:\n        return packedSingleBlock6;\n      case 7:\n        return packedSingleBlock7;\n      case 8:\n        return packedSingleBlock8;\n      case 9:\n        return packedSingleBlock9;\n      case 10:\n        return packedSingleBlock10;\n      case 12:\n        return packedSingleBlock12;\n      case 16:\n        return packedSingleBlock16;\n      case 21:\n        return packedSingleBlock21;\n      case 32:\n        return packedSingleBlock32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      switch (bitsPerValue) {\n      case 1:\n        return packed1;\n      case 2:\n        return packed2;\n      case 3:\n        return packed3;\n      case 4:\n        return packed4;\n      case 5:\n        return packed5;\n      case 6:\n        return packed6;\n      case 7:\n        return packed7;\n      case 8:\n        return packed8;\n      case 9:\n        return packed9;\n      case 10:\n        return packed10;\n      case 11:\n        return packed11;\n      case 12:\n        return packed12;\n      case 13:\n        return packed13;\n      case 14:\n        return packed14;\n      case 15:\n        return packed15;\n      case 16:\n        return packed16;\n      case 17:\n        return packed17;\n      case 18:\n        return packed18;\n      case 19:\n        return packed19;\n      case 20:\n        return packed20;\n      case 21:\n        return packed21;\n      case 22:\n        return packed22;\n      case 23:\n        return packed23;\n      case 24:\n        return packed24;\n      case 25:\n        return packed25;\n      case 26:\n        return packed26;\n      case 27:\n        return packed27;\n      case 28:\n        return packed28;\n      case 29:\n        return packed29;\n      case 30:\n        return packed30;\n      case 31:\n        return packed31;\n      case 32:\n        return packed32;\n      case 33:\n        return packed33;\n      case 34:\n        return packed34;\n      case 35:\n        return packed35;\n      case 36:\n        return packed36;\n      case 37:\n        return packed37;\n      case 38:\n        return packed38;\n      case 39:\n        return packed39;\n      case 40:\n        return packed40;\n      case 41:\n        return packed41;\n      case 42:\n        return packed42;\n      case 43:\n        return packed43;\n      case 44:\n        return packed44;\n      case 45:\n        return packed45;\n      case 46:\n        return packed46;\n      case 47:\n        return packed47;\n      case 48:\n        return packed48;\n      case 49:\n        return packed49;\n      case 50:\n        return packed50;\n      case 51:\n        return packed51;\n      case 52:\n        return packed52;\n      case 53:\n        return packed53;\n      case 54:\n        return packed54;\n      case 55:\n        return packed55;\n      case 56:\n        return packed56;\n      case 57:\n        return packed57;\n      case 58:\n        return packed58;\n      case 59:\n        return packed59;\n      case 60:\n        return packed60;\n      case 61:\n        return packed61;\n      case 62:\n        return packed62;\n      case 63:\n        return packed63;\n      case 64:\n        return packed64;\n      default:\n        throw new AssertionError();\n      }\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return packedSingleBlock1;\n      case 2:\n        return packedSingleBlock2;\n      case 3:\n        return packedSingleBlock3;\n      case 4:\n        return packedSingleBlock4;\n      case 5:\n        return packedSingleBlock5;\n      case 6:\n        return packedSingleBlock6;\n      case 7:\n        return packedSingleBlock7;\n      case 8:\n        return packedSingleBlock8;\n      case 9:\n        return packedSingleBlock9;\n      case 10:\n        return packedSingleBlock10;\n      case 12:\n        return packedSingleBlock12;\n      case 16:\n        return packedSingleBlock16;\n      case 21:\n        return packedSingleBlock21;\n      case 32:\n        return packedSingleBlock32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024177009741f5819e57631cc2d5651a553a7401","date":1345726161,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      assert packedBulkOps[bitsPerValue - 1] != null;\n      return packedBulkOps[bitsPerValue - 1];\n    case PACKED_SINGLE_BLOCK:\n      assert packedSingleBlockBulkOps[bitsPerValue - 1] != null;\n      return packedSingleBlockBulkOps[bitsPerValue - 1];\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      return packedBulkOps[bitsPerValue - 1];\n    case PACKED_SINGLE_BLOCK:\n      switch (bitsPerValue) {\n      case 1:\n        return packedSingleBlock1;\n      case 2:\n        return packedSingleBlock2;\n      case 3:\n        return packedSingleBlock3;\n      case 4:\n        return packedSingleBlock4;\n      case 5:\n        return packedSingleBlock5;\n      case 6:\n        return packedSingleBlock6;\n      case 7:\n        return packedSingleBlock7;\n      case 8:\n        return packedSingleBlock8;\n      case 9:\n        return packedSingleBlock9;\n      case 10:\n        return packedSingleBlock10;\n      case 12:\n        return packedSingleBlock12;\n      case 16:\n        return packedSingleBlock16;\n      case 21:\n        return packedSingleBlock21;\n      case 32:\n        return packedSingleBlock32;\n      default:\n        throw new AssertionError();\n      }\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation#of(PackedInts.Format,int).mjava","sourceNew":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    switch (format) {\n    case PACKED:\n      assert packedBulkOps[bitsPerValue - 1] != null;\n      return packedBulkOps[bitsPerValue - 1];\n    case PACKED_SINGLE_BLOCK:\n      assert packedSingleBlockBulkOps[bitsPerValue - 1] != null;\n      return packedSingleBlockBulkOps[bitsPerValue - 1];\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    BulkOperation[] ops = BULK_OPERATIONS.get(format);\n    if (ops == null || ops[bitsPerValue] == null) {\n      throw new IllegalArgumentException(\"format: \" + format + \", bitsPerValue: \" + bitsPerValue);\n    }\n    return ops[bitsPerValue];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"024177009741f5819e57631cc2d5651a553a7401":["70b0fe679330f3d0bb9c4161c4ef8aa48be3915c"],"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","024177009741f5819e57631cc2d5651a553a7401"],"70b0fe679330f3d0bb9c4161c4ef8aa48be3915c":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","0e3359210474c12c0b79e6400450313e3d7ef2bb"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["024177009741f5819e57631cc2d5651a553a7401"]},"commit2Childs":{"024177009741f5819e57631cc2d5651a553a7401":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"70b0fe679330f3d0bb9c4161c4ef8aa48be3915c":["024177009741f5819e57631cc2d5651a553a7401"],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["70b0fe679330f3d0bb9c4161c4ef8aa48be3915c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}