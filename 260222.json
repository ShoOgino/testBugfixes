{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","commits":[{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> map = new HashMap();\n      Set<Map.Entry<String, Object>> entries = tupleParams.entrySet();\n\n      for (Map.Entry<String, Object> entry : entries) {\n        String name = entry.getKey();\n        Object o = entry.getValue();\n        if (o instanceof TupleStream) {\n          List<Tuple> tuples = new ArrayList();\n          TupleStream tStream = (TupleStream) o;\n          tStream.setStreamContext(streamContext);\n          try {\n            tStream.open();\n            TUPLES:\n            while (true) {\n              Tuple tuple = tStream.read();\n              if (tuple.EOF) {\n                break TUPLES;\n              } else {\n                tuples.add(tuple);\n              }\n            }\n            map.put(name, tuples);\n          } finally {\n            tStream.close();\n          }\n        } else if ((o instanceof StreamEvaluator))  {\n          Tuple eTuple = new Tuple(streamContext.getLets());\n          StreamEvaluator evaluator = (StreamEvaluator) o;\n          Object eo = evaluator.evaluate(eTuple);\n          map.put(name, eo);\n        } else {\n          map.put(name, streamContext.getLets().get(o.toString()));\n        }\n      }\n      return new Tuple(map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","date":1493430356,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      return new Tuple(values);\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> map = new HashMap();\n      Set<Map.Entry<String, Object>> entries = tupleParams.entrySet();\n\n      for (Map.Entry<String, Object> entry : entries) {\n        String name = entry.getKey();\n        Object o = entry.getValue();\n        if (o instanceof TupleStream) {\n          List<Tuple> tuples = new ArrayList();\n          TupleStream tStream = (TupleStream) o;\n          tStream.setStreamContext(streamContext);\n          try {\n            tStream.open();\n            TUPLES:\n            while (true) {\n              Tuple tuple = tStream.read();\n              if (tuple.EOF) {\n                break TUPLES;\n              } else {\n                tuples.add(tuple);\n              }\n            }\n            map.put(name, tuples);\n          } finally {\n            tStream.close();\n          }\n        } else if ((o instanceof StreamEvaluator))  {\n          Tuple eTuple = new Tuple(streamContext.getLets());\n          StreamEvaluator evaluator = (StreamEvaluator) o;\n          Object eo = evaluator.evaluate(eTuple);\n          map.put(name, eo);\n        } else {\n          map.put(name, streamContext.getLets().get(o.toString()));\n        }\n      }\n      return new Tuple(map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f790c93fee1c680312ebd5397a0c158a230a82d5","date":1493656357,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      return new Tuple(values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66beae193a521beb699f71e74c08813ac4a76916","date":1496947308,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList();\n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList();\n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList();\n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList<Tuple>();\n          \n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n      \n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n      \n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n      \n      // Add all streams\n      for(Entry<String,TupleStream> param : streamParams.entrySet()){\n        \n        try{\n          List<Tuple> streamTuples = new ArrayList();\n          // open the stream, closed in finally block\n          param.getValue().open();\n          \n          // read all values from stream (memory expensive)\n          Tuple streamTuple = param.getValue().read();\n          while(!streamTuple.EOF){\n            streamTuples.add(streamTuple);\n            streamTuple = param.getValue().read();\n          }\n          \n          values.put(param.getKey(), streamTuples);\n        }\n        finally{\n          // safely close the stream\n          param.getValue().close();\n        }        \n      }\n\n      Tuple tup = new Tuple(values);\n      tup.fieldNames = fieldNames;\n      tup.fieldLabels = fieldLabels;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(unnestedTuples == null) {\n      if (finished) {\n        Map<String, Object> m = new HashMap<>();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n        finished = true;\n        if(unnestedTuple != null) {\n          return unnestedTuple;\n        } else {\n          return tup;\n        }\n      }\n    } else {\n      if(unnestedTuples.hasNext()) {\n        return unnestedTuples.next();\n      } else {\n        Map<String, Object> m = new HashMap<>();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(unnestedTuples == null) {\n      if (finished) {\n        return Tuple.EOF();\n      } else {\n        finished = true;\n        if(unnestedTuple != null) {\n          return unnestedTuple;\n        } else {\n          return tup;\n        }\n      }\n    } else {\n      if(unnestedTuples.hasNext()) {\n        return unnestedTuples.next();\n      } else {\n        return Tuple.EOF();\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(unnestedTuples == null) {\n      if (finished) {\n        Map<String, Object> m = new HashMap<>();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n        finished = true;\n        if(unnestedTuple != null) {\n          return unnestedTuple;\n        } else {\n          return tup;\n        }\n      }\n    } else {\n      if(unnestedTuples.hasNext()) {\n        return unnestedTuples.next();\n      } else {\n        Map<String, Object> m = new HashMap<>();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f790c93fee1c680312ebd5397a0c158a230a82d5"],"f790c93fee1c680312ebd5397a0c158a230a82d5":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"66beae193a521beb699f71e74c08813ac4a76916":["f790c93fee1c680312ebd5397a0c158a230a82d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"804a8d5358fe7b7563b85ee7838714d720b89272":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["28288370235ed02234a64753cdbf0c6ec096304a"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"28288370235ed02234a64753cdbf0c6ec096304a":["f790c93fee1c680312ebd5397a0c158a230a82d5","66beae193a521beb699f71e74c08813ac4a76916"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","66beae193a521beb699f71e74c08813ac4a76916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f790c93fee1c680312ebd5397a0c158a230a82d5":["e9017cf144952056066919f1ebc7897ff9bd71b1","66beae193a521beb699f71e74c08813ac4a76916","28288370235ed02234a64753cdbf0c6ec096304a"],"66beae193a521beb699f71e74c08813ac4a76916":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["804a8d5358fe7b7563b85ee7838714d720b89272"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["f790c93fee1c680312ebd5397a0c158a230a82d5"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}