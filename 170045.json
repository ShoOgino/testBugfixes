{"path":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#rank(long).mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#rank(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the rank (number of set bits up to right before the index) for the given index in O(1).\n   * @param index offset in the originating bit set.\n   * @return the rank for the index.\n   */\n  public int rank(long index) {\n    final long cache = rankCache[((int) (index >>> LOWER_OVER_BITS))];\n    // lower cache (absolute)\n    long rank = cache >>> (Long.SIZE-LOWER_BITS);\n    int startBitIndex = (int) (index & ~LOWER_OVER_MASK);\n    // basic blocks (relative)\n    if (startBitIndex < index-BASIC_OVER_SIZE) {\n      rank += (cache >>> (BASIC_BITS*2)) & BASIC_MASK;\n      startBitIndex += BASIC_OVER_SIZE;\n      if (startBitIndex < index-BASIC_OVER_SIZE) {\n        rank += (cache >>> BASIC_BITS) & BASIC_MASK;\n        startBitIndex += BASIC_OVER_SIZE;\n        if (startBitIndex < index-BASIC_OVER_SIZE) {\n          rank += cache & BASIC_MASK;\n          startBitIndex += BASIC_OVER_SIZE;\n        }\n      }\n    }\n    // long.bitcount (relative)\n    while(startBitIndex < index-Long.SIZE) {\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6]);\n      startBitIndex += Long.SIZE;\n    }\n    // Single bits (relative)\n    if (startBitIndex < index) {\n/*      System.out.println(String.format(Locale.ENGLISH,\n          \"startBitIndex=%d, index=%d, getBits()[startBitIndex>>>6=%d]=%s, index-startBitIndex=%d, mask=%s\",\n          startBitIndex, index, startBitIndex>>>6, Long.toBinaryString(getBits()[startBitIndex>>>6]),\n          index-startBitIndex, Long.toBinaryString(~(~1L << (index-startBitIndex-1)))));*/\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6] & ~(~1L << (index-startBitIndex-1)));\n    }\n//    for (int i = startBitIndex ; i < index ; i++) {\n//      rank += fastGet(i) ? 1 : 0;\n//    }\n    return (int) rank;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#rank(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the rank (number of set bits up to right before the index) for the given index in O(1).\n   * @param index offset in the originating bit set.\n   * @return the rank for the index.\n   */\n  public int rank(long index) {\n    final long cache = rankCache[((int) (index >>> LOWER_OVER_BITS))];\n    // lower cache (absolute)\n    long rank = cache >>> (Long.SIZE-LOWER_BITS);\n    int startBitIndex = (int) (index & ~LOWER_OVER_MASK);\n    // basic blocks (relative)\n    if (startBitIndex < index-BASIC_OVER_SIZE) {\n      rank += (cache >>> (BASIC_BITS*2)) & BASIC_MASK;\n      startBitIndex += BASIC_OVER_SIZE;\n      if (startBitIndex < index-BASIC_OVER_SIZE) {\n        rank += (cache >>> BASIC_BITS) & BASIC_MASK;\n        startBitIndex += BASIC_OVER_SIZE;\n        if (startBitIndex < index-BASIC_OVER_SIZE) {\n          rank += cache & BASIC_MASK;\n          startBitIndex += BASIC_OVER_SIZE;\n        }\n      }\n    }\n    // long.bitcount (relative)\n    while(startBitIndex < index-Long.SIZE) {\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6]);\n      startBitIndex += Long.SIZE;\n    }\n    // Single bits (relative)\n    if (startBitIndex < index) {\n/*      System.out.println(String.format(Locale.ENGLISH,\n          \"startBitIndex=%d, index=%d, getBits()[startBitIndex>>>6=%d]=%s, index-startBitIndex=%d, mask=%s\",\n          startBitIndex, index, startBitIndex>>>6, Long.toBinaryString(getBits()[startBitIndex>>>6]),\n          index-startBitIndex, Long.toBinaryString(~(~1L << (index-startBitIndex-1)))));*/\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6] & ~(~1L << (index-startBitIndex-1)));\n    }\n//    for (int i = startBitIndex ; i < index ; i++) {\n//      rank += fastGet(i) ? 1 : 0;\n//    }\n    return (int) rank;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#rank(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the rank (number of set bits up to right before the index) for the given index in O(1).\n   * @param index offset in the originating bit set.\n   * @return the rank for the index.\n   */\n  public int rank(long index) {\n    final long cache = rankCache[((int) (index >>> LOWER_OVER_BITS))];\n    // lower cache (absolute)\n    long rank = cache >>> (Long.SIZE-LOWER_BITS);\n    int startBitIndex = (int) (index & ~LOWER_OVER_MASK);\n    // basic blocks (relative)\n    if (startBitIndex < index-BASIC_OVER_SIZE) {\n      rank += (cache >>> (BASIC_BITS*2)) & BASIC_MASK;\n      startBitIndex += BASIC_OVER_SIZE;\n      if (startBitIndex < index-BASIC_OVER_SIZE) {\n        rank += (cache >>> BASIC_BITS) & BASIC_MASK;\n        startBitIndex += BASIC_OVER_SIZE;\n        if (startBitIndex < index-BASIC_OVER_SIZE) {\n          rank += cache & BASIC_MASK;\n          startBitIndex += BASIC_OVER_SIZE;\n        }\n      }\n    }\n    // long.bitcount (relative)\n    while(startBitIndex < index-Long.SIZE) {\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6]);\n      startBitIndex += Long.SIZE;\n    }\n    // Single bits (relative)\n    if (startBitIndex < index) {\n/*      System.out.println(String.format(Locale.ENGLISH,\n          \"startBitIndex=%d, index=%d, getBits()[startBitIndex>>>6=%d]=%s, index-startBitIndex=%d, mask=%s\",\n          startBitIndex, index, startBitIndex>>>6, Long.toBinaryString(getBits()[startBitIndex>>>6]),\n          index-startBitIndex, Long.toBinaryString(~(~1L << (index-startBitIndex-1)))));*/\n      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6] & ~(~1L << (index-startBitIndex-1)));\n    }\n//    for (int i = startBitIndex ; i < index ; i++) {\n//      rank += fastGet(i) ? 1 : 0;\n//    }\n    return (int) rank;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}