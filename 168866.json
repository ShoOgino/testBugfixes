{"path":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","commits":[{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd1a40477a0ea93015c918e8285103cef0e718a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd1a40477a0ea93015c918e8285103cef0e718a3","date":1249044842,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fd1a40477a0ea93015c918e8285103cef0e718a3":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"ad94625fb8d088209f46650c8097196fec67f00c":["fd1a40477a0ea93015c918e8285103cef0e718a3"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"fd1a40477a0ea93015c918e8285103cef0e718a3":["ad94625fb8d088209f46650c8097196fec67f00c"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["fd1a40477a0ea93015c918e8285103cef0e718a3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}