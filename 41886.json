{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      File udir = new File(instanceDir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      File udir = new File(instanceDir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      File udir = new File(instanceDir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n    \n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      String instanceDir = cd.getInstanceDir();\n      Path udir = Paths.get(instanceDir).resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + cc.getSolrHome());\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","fbcfc050b9f253136eaa5950b57248b2109eac11"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["6c8a2521797f14d1d697a17a0069f5619cd211a6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6c8a2521797f14d1d697a17a0069f5619cd211a6"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}