{"path":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6d0ca44ce171ad041951fa8fb94731b7d778d9","date":1316629244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91489a962261537277285219d9ee9ee40f4053c0","date":1341957256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = _TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.getTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\");\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\");\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\").toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\");\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\").toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = createTempDir(\"collation1\").toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig.snippet.randomindexconfig.xml\"), new File(confDir, \"solrconfig.snippet.randomindexconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["91489a962261537277285219d9ee9ee40f4053c0","f33ef255480d446ae7aa03506be85d0356a9850f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f33ef255480d446ae7aa03506be85d0356a9850f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f4abec28b874149a7223e32cc7a01704c27790de"],"91489a962261537277285219d9ee9ee40f4053c0":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"aba371508186796cc6151d8223a5b4e16d02e26e":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","91489a962261537277285219d9ee9ee40f4053c0"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f33ef255480d446ae7aa03506be85d0356a9850f":["91489a962261537277285219d9ee9ee40f4053c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa6d0ca44ce171ad041951fa8fb94731b7d778d9":["c26f00b574427b55127e869b935845554afde1fa"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9","91489a962261537277285219d9ee9ee40f4053c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["91489a962261537277285219d9ee9ee40f4053c0","aba371508186796cc6151d8223a5b4e16d02e26e"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"c26f00b574427b55127e869b935845554afde1fa":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9"],"f4abec28b874149a7223e32cc7a01704c27790de":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91489a962261537277285219d9ee9ee40f4053c0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aba371508186796cc6151d8223a5b4e16d02e26e","f33ef255480d446ae7aa03506be85d0356a9850f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"aa6d0ca44ce171ad041951fa8fb94731b7d778d9":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}