{"path":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7","378c6150f20ef79f184ab9cd89a056771fc918c7","378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"167d88dee5d85da5ab1a3558c976d07b884a2a63","date":1261684600,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1,null);\n    ValueSource v2 = s2.getType().getValueSource(s2,null);\n    assertEquals(v1,v2);\n    assertEquals(v1.hashCode(),v2.hashCode());\n  }\n\n","sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1,null);\n    ValueSource v2 = s2.getType().getValueSource(s2,null);\n    assertEquals(v1,v2);\n    assertEquals(v1.hashCode(),v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["167d88dee5d85da5ab1a3558c976d07b884a2a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"167d88dee5d85da5ab1a3558c976d07b884a2a63":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["167d88dee5d85da5ab1a3558c976d07b884a2a63"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"167d88dee5d85da5ab1a3558c976d07b884a2a63":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}