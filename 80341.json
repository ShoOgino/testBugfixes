{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":null,"sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":null,"sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":null,"sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene54DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      RAMInputStream in = new RAMInputStream(\"\", buffer);\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(in.readVLong(), values.nextValue());\n        assertEquals(in.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","cc018b79379c67835b40b1259cd3dc931df60944"],"85b9829d27224bda451a373a47f081afb1c664b8":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}