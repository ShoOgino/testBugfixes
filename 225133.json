{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    query1.setBoost(random().nextFloat());\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n    query2.setBoost(random().nextFloat());\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new ConstantScoreQuery(query1), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final LeafReaderContext leaf1 = reader.leaves().get(0);\n\n    final Filter filter1 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    // different instance yet equal\n    final Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    final LRUFilterCache filterCache = new LRUFilterCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n\n    final Filter cachedFilter1 = filterCache.doCache(filter1, FilterCachingPolicy.ALWAYS_CACHE);\n    cachedFilter1.getDocIdSet(leaf1, null);\n\n    filterCache.clearFilter(filter2);\n\n    assertTrue(filterCache.cachedFilters().isEmpty());\n    filterCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    query1.setBoost(random().nextFloat());\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n    query2.setBoost(random().nextFloat());\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new ConstantScoreQuery(query1), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    query1.setBoost(random().nextFloat());\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n    query2.setBoost(random().nextFloat());\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new ConstantScoreQuery(query1), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testClearFilter().mjava","sourceNew":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true, 1);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClearFilter() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(random().nextBoolean() ? \"red\" : \"blue\");\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n\n    final Query query1 = new TermQuery(new Term(\"color\", \"blue\"));\n    // different instance yet equal\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    final LRUQueryCache queryCache = new LRUQueryCache(Integer.MAX_VALUE, Long.MAX_VALUE, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.search(new BoostQuery(new ConstantScoreQuery(query1), random().nextFloat()), 1);\n    assertEquals(1, queryCache.cachedQueries().size());\n\n    queryCache.clearQuery(query2);\n\n    assertTrue(queryCache.cachedQueries().isEmpty());\n    queryCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"aac61ee5b4492f174e60bd54939aba9539906edf":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}