{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#randomLiveDocs(int).mjava","commits":[{"id":"b064dbb1533155122c805e1d26c3fc1df1a599e0","date":1363340948,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#randomLiveDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  Bits randomLiveDocs(int maxDoc) {\n    if (rarely()) {\n      if (random().nextBoolean()) {\n        return null;\n      } else {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n    }\n    final FixedBitSet bits = new FixedBitSet(maxDoc);\n    final int bitsSet = _TestUtil.nextInt(random(), 1, maxDoc - 1);\n    for (int i = 0; i < bitsSet; ++i) {\n      while (true) {\n        final int index = random().nextInt(maxDoc);\n        if (!bits.get(index)) {\n          bits.set(index);\n          break;\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#randomLiveDocs(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#randomLiveDocs(int).mjava","sourceNew":"  Bits randomLiveDocs(int maxDoc) {\n    if (rarely()) {\n      if (random().nextBoolean()) {\n        return null;\n      } else {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n    }\n    final FixedBitSet bits = new FixedBitSet(maxDoc);\n    final int bitsSet = TestUtil.nextInt(random(), 1, maxDoc - 1);\n    for (int i = 0; i < bitsSet; ++i) {\n      while (true) {\n        final int index = random().nextInt(maxDoc);\n        if (!bits.get(index)) {\n          bits.set(index);\n          break;\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  Bits randomLiveDocs(int maxDoc) {\n    if (rarely()) {\n      if (random().nextBoolean()) {\n        return null;\n      } else {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n    }\n    final FixedBitSet bits = new FixedBitSet(maxDoc);\n    final int bitsSet = _TestUtil.nextInt(random(), 1, maxDoc - 1);\n    for (int i = 0; i < bitsSet; ++i) {\n      while (true) {\n        final int index = random().nextInt(maxDoc);\n        if (!bits.get(index)) {\n          bits.set(index);\n          break;\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#randomLiveDocs(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#randomLiveDocs(int).mjava","sourceNew":"  Bits randomLiveDocs(int maxDoc) {\n    if (rarely()) {\n      if (random().nextBoolean()) {\n        return null;\n      } else {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n    }\n    final FixedBitSet bits = new FixedBitSet(maxDoc);\n    final int bitsSet = TestUtil.nextInt(random(), 1, maxDoc - 1);\n    for (int i = 0; i < bitsSet; ++i) {\n      while (true) {\n        final int index = random().nextInt(maxDoc);\n        if (!bits.get(index)) {\n          bits.set(index);\n          break;\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  Bits randomLiveDocs(int maxDoc) {\n    if (rarely()) {\n      if (random().nextBoolean()) {\n        return null;\n      } else {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n    }\n    final FixedBitSet bits = new FixedBitSet(maxDoc);\n    final int bitsSet = TestUtil.nextInt(random(), 1, maxDoc - 1);\n    for (int i = 0; i < bitsSet; ++i) {\n      while (true) {\n        final int index = random().nextInt(maxDoc);\n        if (!bits.get(index)) {\n          bits.set(index);\n          break;\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}