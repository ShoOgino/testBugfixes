{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Store.YES,\n                                  Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Store.NO, Index.NOT_ANALYZED,\n                                      TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when many adjacent merges are required\n  public void testForceMergeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.forceMergeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ce7c842452c79b12c45a8feb64e4597c7110e8"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}