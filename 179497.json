{"path":"lucene/core/src/java/org/apache/lucene/geo/Line#Line(double[],double[]).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Line#Line(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line#Line(double[],double[]).mjava","sourceNew":"  /**\n   * Creates a new Line from the supplied latitude/longitude array.\n   */\n  public Line(double[] lats, double[] lons) {\n    if (lats == null) {\n      throw new IllegalArgumentException(\"lats must not be null\");\n    }\n    if (lons == null) {\n      throw new IllegalArgumentException(\"lons must not be null\");\n    }\n    if (lats.length != lons.length) {\n      throw new IllegalArgumentException(\"lats and lons must be equal length\");\n    }\n    if (lats.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minLat = lats[0];\n    double minLon = lons[0];\n    double maxLat = lats[0];\n    double maxLon = lons[0];\n    for (int i = 0; i < lats.length; ++i) {\n      GeoUtils.checkLatitude(lats[i]);\n      GeoUtils.checkLongitude(lons[i]);\n      minLat = Math.min(lats[i], minLat);\n      minLon = Math.min(lons[i], minLon);\n      maxLat = Math.max(lats[i], maxLat);\n      maxLon = Math.max(lons[i], maxLon);\n    }\n\n    this.lats = lats.clone();\n    this.lons = lons.clone();\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Line from the supplied latitude/longitude array.\n   */\n  public Line(double[] lats, double[] lons) {\n    if (lats == null) {\n      throw new IllegalArgumentException(\"lats must not be null\");\n    }\n    if (lons == null) {\n      throw new IllegalArgumentException(\"lons must not be null\");\n    }\n    if (lats.length != lons.length) {\n      throw new IllegalArgumentException(\"lats and lons must be equal length\");\n    }\n    if (lats.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minLat = lats[0];\n    double minLon = lons[0];\n    double maxLat = lats[0];\n    double maxLon = lons[0];\n    for (int i = 0; i < lats.length; ++i) {\n      GeoUtils.checkLatitude(lats[i]);\n      GeoUtils.checkLongitude(lons[i]);\n      minLat = Math.min(lats[i], minLat);\n      minLon = Math.min(lons[i], minLon);\n      maxLat = Math.max(lats[i], maxLat);\n      maxLon = Math.max(lons[i], maxLon);\n    }\n\n    this.lats = lats.clone();\n    this.lons = lons.clone();\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}