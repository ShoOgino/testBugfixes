{"path":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}