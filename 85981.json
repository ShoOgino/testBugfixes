{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","commits":[{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#clearDeleted(IndexReader,FixedBitSet).mjava","sourceNew":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","sourceOld":"  /** Clear all deleted documents from a given open-bit-set according to a given reader */\n  private static void clearDeleted(final IndexReader reader, final FixedBitSet set) throws IOException {\n    // TODO use BitsFilteredDocIdSet?\n    \n    // If there are no deleted docs\n    if (!reader.hasDeletions()) {\n      return; // return immediately\n    }\n    \n    DocIdSetIterator it = set.iterator();\n    int doc = it.nextDoc(); \n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      final int maxDoc = r.maxDoc() + context.docBase;\n      if (doc >= maxDoc) { // skip this segment\n        continue;\n      }\n      if (!r.hasDeletions()) { // skip all docs that belong to this reader as it has no deletions\n        while ((doc = it.nextDoc()) < maxDoc) {}\n        continue;\n      }\n      Bits liveDocs = r.getLiveDocs();\n      do {\n        if (!liveDocs.get(doc - context.docBase)) {\n          set.clear(doc);\n        }\n      } while ((doc = it.nextDoc()) < maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["8917bfede3b4ca30f4305c1e391e9218959cd723","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":["61d5f95d14e5b9b046998c51e16709a398c15226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","61d5f95d14e5b9b046998c51e16709a398c15226","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}