{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter,boolean).mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directoryOrig, Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer, boolean initialIndexExists) throws IOException {\n    Objects.requireNonNull(writer);\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getSegmentsFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directoryOrig = directoryOrig;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    CommitPoint currentCommitPoint = null;\n    String[] files = directory.listAll();\n\n    if (currentSegmentsFile != null) {\n      Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n      for (String fileName : files) {\n        m.reset(fileName);\n        if (!fileName.endsWith(\"write.lock\") && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n          \n          // Add this file to refCounts with initial count 0:\n          getRefCount(fileName);\n          \n          if (fileName.startsWith(IndexFileNames.SEGMENTS) && !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n            \n            // This is a commit (segments or segments_N), and\n            // it's valid (<= the max gen).  Load it, then\n            // incref all files it refers to:\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = null;\n            try {\n              sis = SegmentInfos.readCommit(directoryOrig, fileName);\n            } catch (FileNotFoundException | NoSuchFileException e) {\n              // LUCENE-948: on NFS (and maybe others), if\n              // you have writers switching back and forth\n              // between machines, it's very likely that the\n              // dir listing will be stale and will claim a\n              // file segments_X exists when in fact it\n              // doesn't.  So, we catch this and handle it\n              // as if the file does not exist\n              if (infoStream.isEnabled(\"IFD\")) {\n                infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n              }\n            }\n            if (sis != null) {\n              final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n              if (sis.getGeneration() == segmentInfos.getGeneration()) {\n                currentCommitPoint = commitPoint;\n              }\n              commits.add(commitPoint);\n              incRef(sis, true);\n              \n              if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n                lastSegmentInfos = sis;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null && initialIndexExists) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = null;\n      try {\n        sis = SegmentInfos.readCommit(directoryOrig, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"unable to read current segments_N file\", currentSegmentsFile, e);\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getSegmentsFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.timSort(commits);\n\n    // refCounts only includes \"normal\" filenames (does not include write.lock)\n    inflateGens(segmentInfos, refCounts.keySet(), infoStream);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer, boolean initialIndexExists) throws IOException {\n    Objects.requireNonNull(writer);\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getSegmentsFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    CommitPoint currentCommitPoint = null;\n    String[] files = directory.listAll();\n\n    if (currentSegmentsFile != null) {\n      Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n      for (String fileName : files) {\n        m.reset(fileName);\n        if (!fileName.endsWith(\"write.lock\") && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n          \n          // Add this file to refCounts with initial count 0:\n          getRefCount(fileName);\n          \n          if (fileName.startsWith(IndexFileNames.SEGMENTS) && !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n            \n            // This is a commit (segments or segments_N), and\n            // it's valid (<= the max gen).  Load it, then\n            // incref all files it refers to:\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = null;\n            try {\n              sis = SegmentInfos.readCommit(directory, fileName);\n            } catch (FileNotFoundException | NoSuchFileException e) {\n              // LUCENE-948: on NFS (and maybe others), if\n              // you have writers switching back and forth\n              // between machines, it's very likely that the\n              // dir listing will be stale and will claim a\n              // file segments_X exists when in fact it\n              // doesn't.  So, we catch this and handle it\n              // as if the file does not exist\n              if (infoStream.isEnabled(\"IFD\")) {\n                infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n              }\n            }\n            if (sis != null) {\n              final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n              if (sis.getGeneration() == segmentInfos.getGeneration()) {\n                currentCommitPoint = commitPoint;\n              }\n              commits.add(commitPoint);\n              incRef(sis, true);\n              \n              if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n                lastSegmentInfos = sis;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null && initialIndexExists) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = null;\n      try {\n        sis = SegmentInfos.readCommit(directory, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"unable to read current segments_N file\", currentSegmentsFile, e);\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getSegmentsFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.timSort(commits);\n\n    // refCounts only includes \"normal\" filenames (does not include write.lock)\n    inflateGens(segmentInfos, refCounts.keySet(), infoStream);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,Directory,IndexDeletionPolicy,SegmentInfos,InfoStream,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directoryOrig, Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer, boolean initialIndexExists,\n                          boolean isReaderInit) throws IOException {\n    Objects.requireNonNull(writer);\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getSegmentsFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directoryOrig = directoryOrig;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    CommitPoint currentCommitPoint = null;\n    String[] files = directory.listAll();\n\n    if (currentSegmentsFile != null) {\n      Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n      for (String fileName : files) {\n        m.reset(fileName);\n        if (!fileName.endsWith(\"write.lock\") && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n          \n          // Add this file to refCounts with initial count 0:\n          getRefCount(fileName);\n          \n          if (fileName.startsWith(IndexFileNames.SEGMENTS) && !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n            \n            // This is a commit (segments or segments_N), and\n            // it's valid (<= the max gen).  Load it, then\n            // incref all files it refers to:\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = null;\n            try {\n              sis = SegmentInfos.readCommit(directoryOrig, fileName);\n            } catch (FileNotFoundException | NoSuchFileException e) {\n              // LUCENE-948: on NFS (and maybe others), if\n              // you have writers switching back and forth\n              // between machines, it's very likely that the\n              // dir listing will be stale and will claim a\n              // file segments_X exists when in fact it\n              // doesn't.  So, we catch this and handle it\n              // as if the file does not exist\n              if (infoStream.isEnabled(\"IFD\")) {\n                infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n              }\n            }\n            if (sis != null) {\n              final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n              if (sis.getGeneration() == segmentInfos.getGeneration()) {\n                currentCommitPoint = commitPoint;\n              }\n              commits.add(commitPoint);\n              incRef(sis, true);\n              \n              if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n                lastSegmentInfos = sis;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null && initialIndexExists) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = null;\n      try {\n        sis = SegmentInfos.readCommit(directoryOrig, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"unable to read current segments_N file\", currentSegmentsFile, e);\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getSegmentsFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    if (isReaderInit) {\n      // Incoming SegmentInfos may have NRT changes not yet visible in the latest commit, so we have to protect its files from deletion too:\n      checkpoint(segmentInfos, false);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.timSort(commits);\n\n    // refCounts only includes \"normal\" filenames (does not include write.lock)\n    inflateGens(segmentInfos, refCounts.keySet(), infoStream);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    if (currentCommitPoint == null) {\n      startingCommitDeleted = false;\n    } else {\n      startingCommitDeleted = currentCommitPoint.isDeleted();\n    }\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directoryOrig, Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          InfoStream infoStream, IndexWriter writer, boolean initialIndexExists) throws IOException {\n    Objects.requireNonNull(writer);\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getSegmentsFileName();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directoryOrig = directoryOrig;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    CommitPoint currentCommitPoint = null;\n    String[] files = directory.listAll();\n\n    if (currentSegmentsFile != null) {\n      Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n      for (String fileName : files) {\n        m.reset(fileName);\n        if (!fileName.endsWith(\"write.lock\") && (m.matches() || fileName.startsWith(IndexFileNames.SEGMENTS) || fileName.startsWith(IndexFileNames.PENDING_SEGMENTS))) {\n          \n          // Add this file to refCounts with initial count 0:\n          getRefCount(fileName);\n          \n          if (fileName.startsWith(IndexFileNames.SEGMENTS) && !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n            \n            // This is a commit (segments or segments_N), and\n            // it's valid (<= the max gen).  Load it, then\n            // incref all files it refers to:\n            if (infoStream.isEnabled(\"IFD\")) {\n              infoStream.message(\"IFD\", \"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = null;\n            try {\n              sis = SegmentInfos.readCommit(directoryOrig, fileName);\n            } catch (FileNotFoundException | NoSuchFileException e) {\n              // LUCENE-948: on NFS (and maybe others), if\n              // you have writers switching back and forth\n              // between machines, it's very likely that the\n              // dir listing will be stale and will claim a\n              // file segments_X exists when in fact it\n              // doesn't.  So, we catch this and handle it\n              // as if the file does not exist\n              if (infoStream.isEnabled(\"IFD\")) {\n                infoStream.message(\"IFD\", \"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n              }\n            }\n            if (sis != null) {\n              final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n              if (sis.getGeneration() == segmentInfos.getGeneration()) {\n                currentCommitPoint = commitPoint;\n              }\n              commits.add(commitPoint);\n              incRef(sis, true);\n              \n              if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n                lastSegmentInfos = sis;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null && initialIndexExists) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = null;\n      try {\n        sis = SegmentInfos.readCommit(directoryOrig, currentSegmentsFile);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"unable to read current segments_N file\", currentSegmentsFile, e);\n      }\n      if (infoStream.isEnabled(\"IFD\")) {\n        infoStream.message(\"IFD\", \"forced open of current segments file \" + segmentInfos.getSegmentsFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directoryOrig, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.timSort(commits);\n\n    // refCounts only includes \"normal\" filenames (does not include write.lock)\n    inflateGens(segmentInfos, refCounts.keySet(), infoStream);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}