{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null || coreContainer.isShutDown()) {\n      // silently drop request\n      return;\n    }\n    //log.info(\"#### \" + req.toString());\n    if (req.getContentStreams() == null) { // no content\n      return;\n    }\n    for (ContentStream cs : req.getContentStreams()) {\n      if (cs.getContentType() == null) {\n        log.warn(\"Missing content type - ignoring\");\n        continue;\n      }\n      ContentStreamLoader loader = loaders.get(cs.getContentType());\n      if (loader == null) {\n        throw new SolrException(SolrException.ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Unsupported content type for stream: \" + cs.getSourceInfo() + \", contentType=\" + cs.getContentType());\n      }\n      loader.load(req, rsp, cs, new MetricUpdateProcessor(metricManager));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null || coreContainer.isShutDown()) {\n      // silently drop request\n      return;\n    }\n    //log.info(\"#### {}\", req);\n    if (req.getContentStreams() == null) { // no content\n      return;\n    }\n    for (ContentStream cs : req.getContentStreams()) {\n      if (cs.getContentType() == null) {\n        log.warn(\"Missing content type - ignoring\");\n        continue;\n      }\n      ContentStreamLoader loader = loaders.get(cs.getContentType());\n      if (loader == null) {\n        throw new SolrException(SolrException.ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Unsupported content type for stream: \" + cs.getSourceInfo() + \", contentType=\" + cs.getContentType());\n      }\n      loader.load(req, rsp, cs, new MetricUpdateProcessor(metricManager));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null || coreContainer.isShutDown()) {\n      // silently drop request\n      return;\n    }\n    //log.info(\"#### \" + req.toString());\n    if (req.getContentStreams() == null) { // no content\n      return;\n    }\n    for (ContentStream cs : req.getContentStreams()) {\n      if (cs.getContentType() == null) {\n        log.warn(\"Missing content type - ignoring\");\n        continue;\n      }\n      ContentStreamLoader loader = loaders.get(cs.getContentType());\n      if (loader == null) {\n        throw new SolrException(SolrException.ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Unsupported content type for stream: \" + cs.getSourceInfo() + \", contentType=\" + cs.getContentType());\n      }\n      loader.load(req, rsp, cs, new MetricUpdateProcessor(metricManager));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}