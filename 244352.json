{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#assertGraphStrings(Analyzer,String,String...).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#assertGraphStrings(Analyzer,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enumerates all accepted strings in the token graph created by the analyzer on the provided text, and then\n   * asserts that it's equal to the expected strings.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public static void assertGraphStrings(Analyzer analyzer, String text, String... expectedStrings) throws IOException {\n    checkAnalysisConsistency(random(), analyzer, true, text, true);\n    try (TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text)) {\n      assertGraphStrings(tokenStream, expectedStrings);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#assertGraphStrings(Analyzer,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enumerates all accepted strings in the token graph created by the analyzer on the provided text, and then\n   * asserts that it's equal to the expected strings.\n   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all\n   * and only the given valid strings.\n   * @param analyzer analyzer containing the SynonymFilter under test.\n   * @param text text to be analyzed.\n   * @param expectedStrings all expected finite strings.\n   */\n  public static void assertGraphStrings(Analyzer analyzer, String text, String... expectedStrings) throws IOException {\n    checkAnalysisConsistency(random(), analyzer, true, text, true);\n    try (TokenStream tokenStream = analyzer.tokenStream(\"dummy\", text)) {\n      assertGraphStrings(tokenStream, expectedStrings);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}