{"path":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","commits":[{"id":"6eb6723414c7578e3be2fa28b281a224547cdf93","date":1144287642,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\r\n  {\r\n\r\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n    writer.setMaxBufferedDocs(2);\r\n\r\n    for (int i = start; i < (start + numDocs); i++)\r\n    {\r\n      Document temp = new Document();\r\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\r\n      writer.addDocument(temp);\r\n    }\r\n    writer.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\r\n  {\r\n\r\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMergeFactor(2);\r\n    writer.setMaxBufferedDocs(2);\r\n\r\n    for (int i = start; i < (start + numDocs); i++)\r\n    {\r\n      Document temp = new Document();\r\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\r\n      writer.addDocument(temp);\r\n    }\r\n    writer.close();\r\n  }\r\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\r\n  {\r\n\r\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n    writer.setMaxBufferedDocs(2);\r\n\r\n    for (int i = start; i < (start + numDocs); i++)\r\n    {\r\n      Document temp = new Document();\r\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\r\n      writer.addDocument(temp);\r\n    }\r\n    writer.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\r\n  {\r\n\r\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMergeFactor(2);\r\n    writer.setMaxBufferedDocs(2);\r\n\r\n    for (int i = start; i < (start + numDocs); i++)\r\n    {\r\n      Document temp = new Document();\r\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\r\n      writer.addDocument(temp);\r\n    }\r\n    writer.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException {\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException {\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException {\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException\n  {\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#fillIndex(Directory,int,int).mjava","sourceNew":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException {\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","sourceOld":"  private void fillIndex(Directory dir, int start, int numDocs) throws IOException {\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = start; i < (start + numDocs); i++)\n    {\n      Document temp = new Document();\n      temp.add(new Field(\"count\", (\"\"+i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      writer.addDocument(temp);\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2123bddbd65dea198cac380540636ce43a880403"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}