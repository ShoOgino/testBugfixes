{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","commits":[{"id":"541f6605a29362fa8a42f33b69069e7da5178034","date":1337786849,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<String,Integer>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<SimpleOrderedMap>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest, SpellingResult spellingResult, String origQuery, boolean extendedResults, boolean collate) {\n    NamedList result = new NamedList();\n    Map<Token, LinkedHashMap<String, Integer>> suggestions = spellingResult.getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean isCorrectlySpelled = false;\n    \n    int numSuggestions = 0;\n    for(LinkedHashMap<String, Integer> theSuggestion : suggestions.values())\n    {\n    \tif(theSuggestion.size()>0)\n    \t{\n    \t\tnumSuggestions++;\n    \t}\n    } \n    \n    // will be flipped to false if any of the suggestions are not in the index and hasFreqInfo is true\n    if(numSuggestions > 0) {\n      isCorrectlySpelled = true;\n    }\n    \n    for (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n      Token inputToken = entry.getKey();\n      Map<String, Integer> theSuggestions = entry.getValue();\n      if (theSuggestions != null && (theSuggestions.size()>0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        //     {\"word\":\"alt1\",\"freq\":7},\n        //     {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult.getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<SimpleOrderedMap>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String, Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\",suggEntry.getKey());\n            sugEntry.add(\"freq\",suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          isCorrectlySpelled = isCorrectlySpelled && spellingResult.getTokenFrequency(inputToken) > 0;\n        }\n        result.add(new String(inputToken.buffer(), 0, inputToken.length()), suggestionList);\n      }\n    }\n    if (hasFreqInfo) {\n      result.add(\"correctlySpelled\", isCorrectlySpelled);\n    } else if(extendedResults && suggestions.size() == 0) { // if the word is misspelled, its added to suggestions with freqinfo\n      result.add(\"correctlySpelled\", true);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<String,Integer>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<SimpleOrderedMap>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest, SpellingResult spellingResult, String origQuery, boolean extendedResults, boolean collate) {\n    NamedList result = new NamedList();\n    Map<Token, LinkedHashMap<String, Integer>> suggestions = spellingResult.getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean isCorrectlySpelled = false;\n    \n    int numSuggestions = 0;\n    for(LinkedHashMap<String, Integer> theSuggestion : suggestions.values())\n    {\n    \tif(theSuggestion.size()>0)\n    \t{\n    \t\tnumSuggestions++;\n    \t}\n    } \n    \n    // will be flipped to false if any of the suggestions are not in the index and hasFreqInfo is true\n    if(numSuggestions > 0) {\n      isCorrectlySpelled = true;\n    }\n    \n    for (Map.Entry<Token, LinkedHashMap<String, Integer>> entry : suggestions.entrySet()) {\n      Token inputToken = entry.getKey();\n      Map<String, Integer> theSuggestions = entry.getValue();\n      if (theSuggestions != null && (theSuggestions.size()>0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        //     {\"word\":\"alt1\",\"freq\":7},\n        //     {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult.getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<SimpleOrderedMap>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String, Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\",suggEntry.getKey());\n            sugEntry.add(\"freq\",suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          isCorrectlySpelled = isCorrectlySpelled && spellingResult.getTokenFrequency(inputToken) > 0;\n        }\n        result.add(new String(inputToken.buffer(), 0, inputToken.length()), suggestionList);\n      }\n    }\n    if (hasFreqInfo) {\n      result.add(\"correctlySpelled\", isCorrectlySpelled);\n    } else if(extendedResults && suggestions.size() == 0) { // if the word is misspelled, its added to suggestions with freqinfo\n      result.add(\"correctlySpelled\", true);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<String,Integer>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<SimpleOrderedMap>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["541f6605a29362fa8a42f33b69069e7da5178034"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","541f6605a29362fa8a42f33b69069e7da5178034"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"541f6605a29362fa8a42f33b69069e7da5178034":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3599646b4d4c346cf74d334813488b8b337b5bf5","541f6605a29362fa8a42f33b69069e7da5178034"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"541f6605a29362fa8a42f33b69069e7da5178034":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}