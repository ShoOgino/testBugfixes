{"path":"src/java/org/apache/solr/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a06d6dd4713420efafb5bd917f8bd789482920","date":1181839199,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"src/java/org/apache/solr/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        // Hmmm, if we used StringBuilder rather than Appendable, it\n        // could add an integer more efficiently.\n        dest.append(Integer.toString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f9a06d6dd4713420efafb5bd917f8bd789482920":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f9a06d6dd4713420efafb5bd917f8bd789482920"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}