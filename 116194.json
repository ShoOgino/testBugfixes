{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testFilteredOutSpan().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testFilteredOutSpan().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteredOutSpan() throws IOException {\n    indexWriter.addDocument(newDoc(\"freezing cold stuff like stuff freedom of speech\"));\n    initReaderSearcherHighlighter();\n\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"body\", \"free*\"));\n    SpanMultiTermQueryWrapper<WildcardQuery> wildcardSpanQuery = new SpanMultiTermQueryWrapper<>(wildcardQuery);\n    SpanTermQuery termQuery = new SpanTermQuery(new Term(\"body\", \"speech\"));\n    SpanQuery spanQuery = new SpanNearQuery(new SpanQuery[]{wildcardSpanQuery, termQuery}, 3, false);\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(spanQuery, BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertArrayEquals(new String[]{\"freezing cold stuff like stuff <b>freedom</b> of <b>speech</b>\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testFilteredOutSpan().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteredOutSpan() throws IOException {\n    indexWriter.addDocument(newDoc(\"freezing cold stuff like stuff freedom of speech\"));\n    initReaderSearcherHighlighter();\n\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"body\", \"free*\"));\n    SpanMultiTermQueryWrapper<WildcardQuery> wildcardSpanQuery = new SpanMultiTermQueryWrapper<>(wildcardQuery);\n    SpanTermQuery termQuery = new SpanTermQuery(new Term(\"body\", \"speech\"));\n    SpanQuery spanQuery = new SpanNearQuery(new SpanQuery[]{wildcardSpanQuery, termQuery}, 3, false);\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(spanQuery, BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertArrayEquals(new String[]{\"freezing cold stuff like stuff <b>freedom</b> of <b>speech</b>\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testFilteredOutSpan().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testFilteredOutSpan().mjava","sourceNew":"  public void testFilteredOutSpan() throws IOException {\n    indexWriter.addDocument(newDoc(\"freezing cold stuff like stuff freedom of speech\"));\n    initReaderSearcherHighlighter();\n\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"body\", \"free*\"));\n    SpanMultiTermQueryWrapper<WildcardQuery> wildcardSpanQuery = new SpanMultiTermQueryWrapper<>(wildcardQuery);\n    SpanTermQuery termQuery = new SpanTermQuery(new Term(\"body\", \"speech\"));\n    SpanQuery spanQuery = new SpanNearQuery(new SpanQuery[]{wildcardSpanQuery, termQuery}, 3, false);\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(spanQuery, BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n    // spans' MatchesIterator exposes each underlying term; thus doesn't enclose intermediate \"of\"\n    assertArrayEquals(new String[]{\"freezing cold stuff like stuff <b>freedom</b> of <b>speech</b>\"}, snippets);\n  }\n\n","sourceOld":"  public void testFilteredOutSpan() throws IOException {\n    indexWriter.addDocument(newDoc(\"freezing cold stuff like stuff freedom of speech\"));\n    initReaderSearcherHighlighter();\n\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"body\", \"free*\"));\n    SpanMultiTermQueryWrapper<WildcardQuery> wildcardSpanQuery = new SpanMultiTermQueryWrapper<>(wildcardQuery);\n    SpanTermQuery termQuery = new SpanTermQuery(new Term(\"body\", \"speech\"));\n    SpanQuery spanQuery = new SpanNearQuery(new SpanQuery[]{wildcardSpanQuery, termQuery}, 3, false);\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(spanQuery, BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertArrayEquals(new String[]{\"freezing cold stuff like stuff <b>freedom</b> of <b>speech</b>\"}, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["795822cce6616d4035b5a4bdbb6c113ea2f715ba","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}