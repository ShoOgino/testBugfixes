{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writePosDict(String).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writePosDict(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/BinaryDictionaryWriter#writePosDict(String).mjava","sourceNew":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 3 : \"malformed pos/inflection: \" + s;\n          out.writeString(data[0]);\n          out.writeString(data[1]);\n          out.writeString(data[2]);\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 3 : \"malformed pos/inflection: \" + s;\n          out.writeString(data[0]);\n          out.writeString(data[1]);\n          out.writeString(data[2]);\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writePosDict(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writePosDict(String).mjava","sourceNew":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 3 : \"malformed pos/inflection: \" + s;\n          out.writeString(data[0]);\n          out.writeString(data[1]);\n          out.writeString(data[2]);\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  protected void writePosDict(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.POSDICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(posDict.size());\n      for (String s : posDict) {\n        if (s == null) {\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n          out.writeByte((byte)0);\n        } else {\n          String data[] = CSVUtil.parse(s);\n          assert data.length == 3 : \"malformed pos/inflection: \" + s;\n          out.writeString(data[0]);\n          out.writeString(data[1]);\n          out.writeString(data[2]);\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}