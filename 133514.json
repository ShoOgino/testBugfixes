{"path":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":null,"sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cb064ec06551e8c06745ab60be789d2077cf25d","date":1271172812,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      in = url.openStream();\n      content = IOUtils.toString( in );\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      in = url.openStream();\n      content = IOUtils.toString( in );\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a613a8df324c5f834b6c2b6fb5bb945431755","date":1296820909,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      in = url.openStream();\n      content = IOUtils.toString( in );\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = url.openStream();\n    try {\n      content = IOUtils.toString( in );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    String content = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      in = url.openStream();\n      content = IOUtils.toString( in );\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length() > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length(), stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream( content.getBytes() ), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader( content ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["651a613a8df324c5f834b6c2b6fb5bb945431755","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"4cb064ec06551e8c06745ab60be789d2077cf25d":["1da8d55113b689b06716246649de6f62430f15c0"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4cb064ec06551e8c06745ab60be789d2077cf25d","651a613a8df324c5f834b6c2b6fb5bb945431755"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["4cb064ec06551e8c06745ab60be789d2077cf25d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["4cb064ec06551e8c06745ab60be789d2077cf25d","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["4cb064ec06551e8c06745ab60be789d2077cf25d"],"4cb064ec06551e8c06745ab60be789d2077cf25d":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["651a613a8df324c5f834b6c2b6fb5bb945431755","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}