{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","commits":[{"id":"ad100f9e08ad77986f3b61ff2e904679206b68dd","date":1456369337,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","pathOld":"/dev/null","sourceNew":"  // Check for overflow of sumOfSquares\n  public void testFieldStatisticsResultsDateFieldOverflow() throws Exception {\n    SolrCore core = h.getCore();\n\n    assertU(adoc(\"id\", \"1\", \"active_dt\", \"2015-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_dt\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test date statistics values\", req,\n            \"//long[@name='count'][.='1']\",\n            \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='max'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='sum'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='mean'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sumOfSquares'][.='\" + Double.toString(2102742446988960000000000.0)+\"']\"\n            );\n\n    assertU(adoc(\"id\", \"2\", \"active_dt\", \"2115-12-14T09:00:00Z\"));\n    assertU(adoc(\"id\", \"3\", \"active_dt\", \"2215-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    assertQ(\"test date statistics values\", req,\n        \"//long[@name='count'][.='3']\",\n        \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n        \"//date[@name='max'][.='2215-12-14T09:00:00Z']\",\n        \"//date[@name='sum'][.='2407-11-08T03:00:00Z']\",\n        \"//date[@name='mean'][.='2115-12-14T09:00:00Z']\",\n        \"//double[@name='sumOfSquares'][.='\" + Double.toString(83555549895529430000000000.0)+\"']\",\n        // The following number matches the number returned by the current solr\n        // implementation of standard deviation. Should be 3155673600000.\n        // That number is not precise, and the implementation should be fixed.\n        \"//double[@name='stddev'][.='\" + Double.toString(3155673599999.999)+\"']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"478975a88c8e5d52a75d512356092f23beef583c","date":1456610550,"type":3,"author":"Tomás Fernández Löbbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","sourceNew":"  // Check for overflow of sumOfSquares\n  public void testFieldStatisticsResultsDateFieldOverflow() throws Exception {\n    SolrCore core = h.getCore();\n\n    assertU(adoc(\"id\", \"1\", \"active_dt\", \"2015-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_dt\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test date statistics values\", req,\n            \"//long[@name='count'][.='1']\",\n            \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='max'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sum'][.='1.4500836E12']\",\n            \"//date[@name='mean'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sumOfSquares'][.='\" + Double.toString(2102742446988960000000000.0)+\"']\"\n            );\n\n    assertU(adoc(\"id\", \"2\", \"active_dt\", \"2115-12-14T09:00:00Z\"));\n    assertU(adoc(\"id\", \"3\", \"active_dt\", \"2215-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    assertQ(\"test date statistics values\", req,\n        \"//long[@name='count'][.='3']\",\n        \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n        \"//date[@name='max'][.='2215-12-14T09:00:00Z']\",\n        \"//double[@name='sum'][.='1.38172716E13']\",\n        \"//date[@name='mean'][.='2115-12-14T09:00:00Z']\",\n        \"//double[@name='sumOfSquares'][.='\" + Double.toString(83555549895529430000000000.0)+\"']\",\n        // The following number matches the number returned by the current solr\n        // implementation of standard deviation. Should be 3155673600000.\n        // That number is not precise, and the implementation should be fixed.\n        \"//double[@name='stddev'][.='\" + Double.toString(3155673599999.999)+\"']\"\n        );\n  }\n\n","sourceOld":"  // Check for overflow of sumOfSquares\n  public void testFieldStatisticsResultsDateFieldOverflow() throws Exception {\n    SolrCore core = h.getCore();\n\n    assertU(adoc(\"id\", \"1\", \"active_dt\", \"2015-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_dt\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test date statistics values\", req,\n            \"//long[@name='count'][.='1']\",\n            \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='max'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='sum'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='mean'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sumOfSquares'][.='\" + Double.toString(2102742446988960000000000.0)+\"']\"\n            );\n\n    assertU(adoc(\"id\", \"2\", \"active_dt\", \"2115-12-14T09:00:00Z\"));\n    assertU(adoc(\"id\", \"3\", \"active_dt\", \"2215-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    assertQ(\"test date statistics values\", req,\n        \"//long[@name='count'][.='3']\",\n        \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n        \"//date[@name='max'][.='2215-12-14T09:00:00Z']\",\n        \"//date[@name='sum'][.='2407-11-08T03:00:00Z']\",\n        \"//date[@name='mean'][.='2115-12-14T09:00:00Z']\",\n        \"//double[@name='sumOfSquares'][.='\" + Double.toString(83555549895529430000000000.0)+\"']\",\n        // The following number matches the number returned by the current solr\n        // implementation of standard deviation. Should be 3155673600000.\n        // That number is not precise, and the implementation should be fixed.\n        \"//double[@name='stddev'][.='\" + Double.toString(3155673599999.999)+\"']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsDateFieldOverflow().mjava","sourceNew":"  // Check for overflow of sumOfSquares\n  public void testFieldStatisticsResultsDateFieldOverflow() throws Exception {\n    SolrCore core = h.getCore();\n\n    assertU(adoc(\"id\", \"1\", \"active_dt\", \"2015-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_dt\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test date statistics values\", req,\n            \"//long[@name='count'][.='1']\",\n            \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='max'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sum'][.='1.4500836E12']\",\n            \"//date[@name='mean'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sumOfSquares'][.='\" + Double.toString(2102742446988960000000000.0)+\"']\"\n            );\n\n    assertU(adoc(\"id\", \"2\", \"active_dt\", \"2115-12-14T09:00:00Z\"));\n    assertU(adoc(\"id\", \"3\", \"active_dt\", \"2215-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    assertQ(\"test date statistics values\", req,\n        \"//long[@name='count'][.='3']\",\n        \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n        \"//date[@name='max'][.='2215-12-14T09:00:00Z']\",\n        \"//double[@name='sum'][.='1.38172716E13']\",\n        \"//date[@name='mean'][.='2115-12-14T09:00:00Z']\",\n        \"//double[@name='sumOfSquares'][.='\" + Double.toString(83555549895529430000000000.0)+\"']\",\n        // The following number matches the number returned by the current solr\n        // implementation of standard deviation. Should be 3155673600000.\n        // That number is not precise, and the implementation should be fixed.\n        \"//double[@name='stddev'][.='\" + Double.toString(3155673599999.999)+\"']\"\n        );\n  }\n\n","sourceOld":"  // Check for overflow of sumOfSquares\n  public void testFieldStatisticsResultsDateFieldOverflow() throws Exception {\n    SolrCore core = h.getCore();\n\n    assertU(adoc(\"id\", \"1\", \"active_dt\", \"2015-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_dt\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test date statistics values\", req,\n            \"//long[@name='count'][.='1']\",\n            \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='max'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='sum'][.='2015-12-14T09:00:00Z']\",\n            \"//date[@name='mean'][.='2015-12-14T09:00:00Z']\",\n            \"//double[@name='sumOfSquares'][.='\" + Double.toString(2102742446988960000000000.0)+\"']\"\n            );\n\n    assertU(adoc(\"id\", \"2\", \"active_dt\", \"2115-12-14T09:00:00Z\"));\n    assertU(adoc(\"id\", \"3\", \"active_dt\", \"2215-12-14T09:00:00Z\"));\n    assertU(commit());\n\n    assertQ(\"test date statistics values\", req,\n        \"//long[@name='count'][.='3']\",\n        \"//date[@name='min'][.='2015-12-14T09:00:00Z']\",\n        \"//date[@name='max'][.='2215-12-14T09:00:00Z']\",\n        \"//date[@name='sum'][.='2407-11-08T03:00:00Z']\",\n        \"//date[@name='mean'][.='2115-12-14T09:00:00Z']\",\n        \"//double[@name='sumOfSquares'][.='\" + Double.toString(83555549895529430000000000.0)+\"']\",\n        // The following number matches the number returned by the current solr\n        // implementation of standard deviation. Should be 3155673600000.\n        // That number is not precise, and the implementation should be fixed.\n        \"//double[@name='stddev'][.='\" + Double.toString(3155673599999.999)+\"']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad100f9e08ad77986f3b61ff2e904679206b68dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["ad100f9e08ad77986f3b61ff2e904679206b68dd","478975a88c8e5d52a75d512356092f23beef583c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"478975a88c8e5d52a75d512356092f23beef583c":["ad100f9e08ad77986f3b61ff2e904679206b68dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"ad100f9e08ad77986f3b61ff2e904679206b68dd":["af2638813028b254a88b418ebeafb541afb49653","478975a88c8e5d52a75d512356092f23beef583c"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad100f9e08ad77986f3b61ff2e904679206b68dd"],"478975a88c8e5d52a75d512356092f23beef583c":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}