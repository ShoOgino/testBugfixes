{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","commits":[{"id":"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","date":1445465230,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}