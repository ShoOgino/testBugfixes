{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","bugFix":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","sourceNew":null,"sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","sourceNew":null,"sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0837ab0472feecb3a54260729d845f839e1cbd72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}