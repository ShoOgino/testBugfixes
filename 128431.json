{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","commits":[{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   */\n  public final BytesRef copyFrom(final BytesRef bytes) {\n    final int length = bytes.length;\n    final int offset = bytes.offset;\n    bytes.offset = 0;\n    bytes.grow(length);\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3222ad44aa082c1f052ae9c69137184acdd2255a","date":1329769500,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","sourceNew":"  /**\n   *\n   */\n  public final BytesRef copyFrom(final BytesRef bytes) {\n    final int length = bytes.length;\n    final int offset = bytes.offset;\n    bytes.offset = 0;\n    bytes.grow(length);\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public final BytesRef copyFrom(final BytesRef bytes) {\n    final int length = bytes.length;\n    final int offset = bytes.offset;\n    bytes.offset = 0;\n    bytes.grow(length);\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   */\n  public final BytesRef copyFrom(final BytesRef bytes) {\n    final int length = bytes.length;\n    final int offset = bytes.offset;\n    bytes.offset = 0;\n    bytes.grow(length);\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef).mjava","sourceNew":"  /**\n   * Copies bytes from the pool starting at the given offset with the given  \n   * length into the given {@link BytesRef} at offset <tt>0</tt> and returns it.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public final BytesRef copyFrom(final BytesRef bytes, final int offset, final int length) {\n    bytes.offset = 0;\n    bytes.grow(length);\n    bytes.length = length;\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public final BytesRef copyFrom(final BytesRef bytes) {\n    final int length = bytes.length;\n    final int offset = bytes.offset;\n    bytes.offset = 0;\n    bytes.grow(length);\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3222ad44aa082c1f052ae9c69137184acdd2255a":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3222ad44aa082c1f052ae9c69137184acdd2255a"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3222ad44aa082c1f052ae9c69137184acdd2255a"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"3222ad44aa082c1f052ae9c69137184acdd2255a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["3222ad44aa082c1f052ae9c69137184acdd2255a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}