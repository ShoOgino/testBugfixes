{"path":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","commits":[{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"/dev/null","sourceNew":"    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["455aeff4fef915340c5b19d71d5e147034e83093"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"455aeff4fef915340c5b19d71d5e147034e83093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"455aeff4fef915340c5b19d71d5e147034e83093":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["455aeff4fef915340c5b19d71d5e147034e83093"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}