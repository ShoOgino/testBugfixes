{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestWholeBreakIterator#assertSameBreaks(CharacterIterator,CharacterIterator,BreakIterator,BreakIterator).mjava","commits":[{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestWholeBreakIterator#assertSameBreaks(CharacterIterator,CharacterIterator,BreakIterator,BreakIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Asserts that two breakiterators break the text the same way */\n  public static void assertSameBreaks(CharacterIterator one, CharacterIterator two, BreakIterator expected, BreakIterator actual) {\n    expected.setText(one);\n    actual.setText(two);\n\n    assertEquals(expected.current(), actual.current());\n\n    // next()\n    int v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.next(), actual.next());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // first()\n    assertEquals(expected.first(), actual.first());\n    assertEquals(expected.current(), actual.current());\n    // last()\n    assertEquals(expected.last(), actual.last());\n    assertEquals(expected.current(), actual.current());\n    \n    // previous()\n    v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.previous(), actual.previous());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // following()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.first();\n      actual.first();\n      assertEquals(expected.following(i), actual.following(i));\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // preceding()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.last();\n      actual.last();\n      assertEquals(expected.preceding(i), actual.preceding(i));\n      assertEquals(expected.current(), actual.current());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestWholeBreakIterator#assertSameBreaks(CharacterIterator,CharacterIterator,BreakIterator,BreakIterator).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator#assertSameBreaks(CharacterIterator,CharacterIterator,BreakIterator,BreakIterator).mjava","sourceNew":"  /** Asserts that two breakiterators break the text the same way */\n  public static void assertSameBreaks(CharacterIterator one, CharacterIterator two, BreakIterator expected, BreakIterator actual) {\n    expected.setText(one);\n    actual.setText(two);\n\n    assertEquals(expected.current(), actual.current());\n\n    // next()\n    int v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.next(), actual.next());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // first()\n    assertEquals(expected.first(), actual.first());\n    assertEquals(expected.current(), actual.current());\n    // last()\n    assertEquals(expected.last(), actual.last());\n    assertEquals(expected.current(), actual.current());\n    \n    // previous()\n    v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.previous(), actual.previous());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // following()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.first();\n      actual.first();\n      assertEquals(expected.following(i), actual.following(i));\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // preceding()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.last();\n      actual.last();\n      assertEquals(expected.preceding(i), actual.preceding(i));\n      assertEquals(expected.current(), actual.current());\n    }\n  }\n\n","sourceOld":"  /** Asserts that two breakiterators break the text the same way */\n  public static void assertSameBreaks(CharacterIterator one, CharacterIterator two, BreakIterator expected, BreakIterator actual) {\n    expected.setText(one);\n    actual.setText(two);\n\n    assertEquals(expected.current(), actual.current());\n\n    // next()\n    int v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.next(), actual.next());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // first()\n    assertEquals(expected.first(), actual.first());\n    assertEquals(expected.current(), actual.current());\n    // last()\n    assertEquals(expected.last(), actual.last());\n    assertEquals(expected.current(), actual.current());\n    \n    // previous()\n    v = expected.current();\n    while (v != BreakIterator.DONE) {\n      assertEquals(v = expected.previous(), actual.previous());\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // following()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.first();\n      actual.first();\n      assertEquals(expected.following(i), actual.following(i));\n      assertEquals(expected.current(), actual.current());\n    }\n    \n    // preceding()\n    for (int i = one.getBeginIndex(); i <= one.getEndIndex(); i++) {\n      expected.last();\n      actual.last();\n      assertEquals(expected.preceding(i), actual.preceding(i));\n      assertEquals(expected.current(), actual.current());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","381618eac2691bb34ab9a3fca76ad55c6274517e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}