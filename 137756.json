{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b43aca0f70aef9b914114574de1d0916ad2a32b","date":1360908147,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testNodeTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testNodeTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while(c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      c = c.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["6b43aca0f70aef9b914114574de1d0916ad2a32b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3b41f996b22bd5518650f897d050088ff808ec03","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["3b41f996b22bd5518650f897d050088ff808ec03","8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8259c159da2de2e8528524fb76b244b46cbded59":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}