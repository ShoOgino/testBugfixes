{"path":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","commits":[{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      try {\n        zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      try {\n        zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.makePath(\"/collection\", true);\n\n      try {\n        zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      try {\n        zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      try {\n        zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.makePath(\"/collection\", true);\n\n      try {\n        zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","sourceNew":"  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      KeeperException e =expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1));\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n\n      zkClient.makePath(\"/collection\", true);\n\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","sourceOld":"  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      try {\n        zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      try {\n        zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n\n      zkClient.makePath(\"/collection\", true);\n\n      try {\n        zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n        fail(\"We should not be able to create this path\");\n      } catch (Exception e) {\n\n      }\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testSkipPathPartsOnMakePath().mjava","sourceNew":"  @SuppressWarnings({\"try\"})\n  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      KeeperException e =expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1));\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n\n      zkClient.makePath(\"/collection\", true);\n\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","sourceOld":"  public void testSkipPathPartsOnMakePath() throws Exception {\n    try (ZkConnection conn = new ZkConnection()) {\n      final SolrZkClient zkClient = conn.getClient();\n\n      zkClient.makePath(\"/test\", true);\n\n      // should work\n      zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1);\n\n      zkClient.clean(\"/\");\n\n      // should not work\n      KeeperException e =expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkClient.makePath(\"/test/path/here\", (byte[]) null, CreateMode.PERSISTENT, (Watcher) null, true, true, 1));\n\n      zkClient.clean(\"/\");\n\n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(30000);\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n\n      zkClient.makePath(\"/collection\", true);\n\n      expectThrows(KeeperException.NoNodeException.class,\n          \"We should not be able to create this path\",\n          () -> zkCmdExecutor.ensureExists(\"/collections/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2));\n      zkClient.makePath(\"/collection/collection\", true);\n \n      byte[] bytes = new byte[10];\n      zkCmdExecutor.ensureExists(\"/collection/collection\", bytes, CreateMode.PERSISTENT, zkClient, 2);\n      \n      byte[] returnedBytes = zkClient.getData(\"/collection/collection\", null, null, true);\n      \n      assertNull(\"We skipped 2 path parts, so data won't be written\", returnedBytes);\n\n      zkClient.makePath(\"/collection/collection/leader\", true);\n\n      zkCmdExecutor.ensureExists(\"/collection/collection/leader\", (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["92f789dbd1886e4b468e61b0def88b29a3f55228","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}