{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<IndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<IndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicIndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<IndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicIndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<IndexReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":null,"sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"/dev/null","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#toString().mjava","sourceNew":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder(\"ParallelReader(\");\n    final Iterator<AtomicReader> iter = readers.iterator();\n    if (iter.hasNext()) {\n      buffer.append(iter.next());\n    }\n    while (iter.hasNext()) {\n      buffer.append(\", \").append(iter.next());\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9454a6510e2db155fb01faa5c049b06ece95fab9","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}