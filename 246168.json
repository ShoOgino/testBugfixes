{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, docFieldProcessor.fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        writer.codecs);\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush(boolean closeDocStore) throws IOException {\n    assert numDocsInRAM > 0;\n\n    initFlushState(closeDocStore);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n      \n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            docStoreOffset, flushState.docStoreSegmentName,\n            false,    \n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   docStoreOffset, flushState.docStoreSegmentName,\n                                   false,    \n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      boolean hasVectors = flushState.hasVectors;\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec(),\n            hasVectors);\n\n        final long newSegmentSize = si.sizeInBytes(true);\n        String message = \"  ramUsed=\" + nf.format(((double) bytesUsed.get())/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/bytesUsed.get()) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec(),\n                                   hasVectors);\n\n\n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, docFieldProcessor.fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        writer.codecs);\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      boolean hasVectors = flushState.hasVectors;\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec(),\n            hasVectors);\n\n        final long newSegmentSize = si.sizeInBytes(true);\n        String message = \"  ramUsed=\" + nf.format(((double) bytesUsed.get())/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/bytesUsed.get()) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec(),\n                                   hasVectors);\n\n\n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      boolean hasVectors = flushState.hasVectors;\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec(),\n            hasVectors);\n\n        final long newSegmentSize = si.sizeInBytes(true);\n        String message = \"  ramUsed=\" + nf.format(((double) bytesUsed.get())/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/bytesUsed.get()) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec(),\n                                   hasVectors);\n\n\n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false);\n      consumer.flush(flushState);\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      boolean hasVectors = flushState.hasVectors;\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec(),\n            hasVectors);\n\n        final long newSegmentSize = si.sizeInBytes(true);\n        String message = \"  ramUsed=\" + nf.format(((double) bytesUsed.get())/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/bytesUsed.get()) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec(),\n                                   hasVectors);\n\n\n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeb75d1685f27b55c20770200a5a24a8251ce9d5","date":1295257851,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false);\n      consumer.flush(flushState);\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false);\n      consumer.flush(flushState);\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos);\n      consumer.flush(flushState);\n      newSegment.clearFilesCache();\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs));\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false);\n      consumer.flush(flushState);\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.clearFilesCache();\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      BufferedDeletes segmentDeletes = null;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos);\n      consumer.flush(flushState);\n      newSegment.clearFilesCache();\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      BufferedDeletes segmentDeletes = null;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        SegmentCodecs.build(fieldInfos, writer.codecs), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.clearFilesCache();\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      BufferedDeletes segmentDeletes = null;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + flushState.deletedDocs.count() + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      BufferedDeletes segmentDeletes = null;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2500d3d93fac349c088b68441331fd1240d889e","date":1303982679,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      doAfterFlush();\n\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n\n      SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, fieldInfos.hasProx(), flushState.segmentCodecs, false, fieldInfos);\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      newSegment.setHasVectors(flushState.hasVectors);\n\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (flushState.hasVectors ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(Context.FLUSH));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(Context.FLUSH));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.deletedDocs = new BitVector(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.deletedDocs.set(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.deletedDocs == null ? 0 : flushState.deletedDocs.count()) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.deletedDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes);\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes(false);\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        fieldInfos.buildSegmentCodecs(true), pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.segmentCodecs, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codecs=\" + newSegment.getSegmentCodecs());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        message(\"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        message(\"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        message(\"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        message(\"flushedFiles=\" + newSegment.files());\n        message(\"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        message(\"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream != null) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream != null) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5fd20ed668e3a00e9b27810fa855182276b3b58","date":1326994874,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da5ca503d2914753714af960bdfea65c0fe0fc59","date":1327688040,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = new BitVector(numDocsInRAM);\n      flushState.liveDocs.invertAll();\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.liveDocs.count())) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"853713e230bedc03301dd29e00764247dd5e3e02","date":1327927949,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        // nocommit: some of this is confusing since it includes docstores\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSize / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2eb0105a11d9294086684d4e25ee3d02720c285","date":1327945808,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize(includes docstores)=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSize / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        // nocommit: some of this is confusing since it includes docstores\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSize / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize(includes docstores)=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize));\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize(includes docstores)=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize));\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;\n        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" (\" + nf.format(newSegmentSizeNoStore) + \" MB w/o doc stores)\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize) +\n                \" new/old=\" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + \"%\");\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize(includes docstores)=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize));\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  FlushedSegment flush() throws IOException {\n    assert numDocsInRAM > 0;\n    assert deleteSlice == null : \"all deletes must be applied in prepareFlush\";\n    flushState = new SegmentWriteState(infoStream, directory, segment, fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        codec, pendingDeletes, new IOContext(new FlushInfo(numDocsInRAM, bytesUsed())));\n    final double startMBUsed = parent.flushControl.netBytes() / 1024. / 1024.;\n    // Apply delete-by-docID now (delete-byDocID only\n    // happens when an exception is hit processing that\n    // doc, eg if analyzer has some problem w/ the text):\n    if (pendingDeletes.docIDs.size() > 0) {\n      flushState.liveDocs = codec.liveDocsFormat().newLiveDocs(numDocsInRAM);\n      for(int delDocID : pendingDeletes.docIDs) {\n        flushState.liveDocs.clear(delDocID);\n      }\n      flushState.delCountOnFlush = pendingDeletes.docIDs.size();\n      pendingDeletes.bytesUsed.addAndGet(-pendingDeletes.docIDs.size() * BufferedDeletes.BYTES_PER_DEL_DOCID);\n      pendingDeletes.docIDs.clear();\n    }\n\n    if (infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", \"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n\n    if (aborting) {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"flush: skip because aborting is set\");\n      }\n      return null;\n    }\n\n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n      pendingDeletes.terms.clear();\n      final SegmentInfo newSegment = new SegmentInfo(segment, flushState.numDocs, directory, false, flushState.codec, fieldInfos.asReadOnly());\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"new segment has \" + (flushState.liveDocs == null ? 0 : (flushState.numDocs - flushState.delCountOnFlush)) + \" deleted docs\");\n        infoStream.message(\"DWPT\", \"new segment has \" + (newSegment.getHasVectors() ? \"vectors\" : \"no vectors\"));\n        infoStream.message(\"DWPT\", \"flushedFiles=\" + newSegment.files());\n        infoStream.message(\"DWPT\", \"flushed codec=\" + newSegment.getCodec());\n      }\n      flushedDocCount += flushState.numDocs;\n\n      final BufferedDeletes segmentDeletes;\n      if (pendingDeletes.queries.isEmpty()) {\n        pendingDeletes.clear();\n        segmentDeletes = null;\n      } else {\n        segmentDeletes = pendingDeletes;\n        pendingDeletes = new BufferedDeletes();\n      }\n\n      if (infoStream.isEnabled(\"DWPT\")) {\n        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;\n        infoStream.message(\"DWPT\", \"flushed: segment=\" + newSegment + \n                \" ramUsed=\" + nf.format(startMBUsed) + \" MB\" +\n                \" newFlushedSize(includes docstores)=\" + nf.format(newSegmentSize) + \" MB\" +\n                \" docs/MB=\" + nf.format(flushedDocCount / newSegmentSize));\n      }\n      doAfterFlush();\n      success = true;\n\n      return new FlushedSegment(newSegment, segmentDeletes, flushState.liveDocs, flushState.delCountOnFlush);\n    } finally {\n      if (!success) {\n        if (segment != null) {\n          synchronized(parent.indexWriter) {\n            parent.indexWriter.deleter.refresh(segment);\n          }\n        }\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eeb75d1685f27b55c20770200a5a24a8251ce9d5":["86c34ea6a885f625f2e464756450d45b72653ef3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["da5ca503d2914753714af960bdfea65c0fe0fc59"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2500d3d93fac349c088b68441331fd1240d889e":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["eeb75d1685f27b55c20770200a5a24a8251ce9d5","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"410e066f093e407222d9681429d209084e783149":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"a2eb0105a11d9294086684d4e25ee3d02720c285":["853713e230bedc03301dd29e00764247dd5e3e02"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b2500d3d93fac349c088b68441331fd1240d889e"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","a2eb0105a11d9294086684d4e25ee3d02720c285"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"853713e230bedc03301dd29e00764247dd5e3e02":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"da5ca503d2914753714af960bdfea65c0fe0fc59":["e5fd20ed668e3a00e9b27810fa855182276b3b58"],"7b91922b55d15444d554721b352861d028eb8278":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"86c34ea6a885f625f2e464756450d45b72653ef3":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e5fd20ed668e3a00e9b27810fa855182276b3b58":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"]},"commit2Childs":{"eeb75d1685f27b55c20770200a5a24a8251ce9d5":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","e5fd20ed668e3a00e9b27810fa855182276b3b58"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["853713e230bedc03301dd29e00764247dd5e3e02","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["410e066f093e407222d9681429d209084e783149"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"b2500d3d93fac349c088b68441331fd1240d889e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","bde51b089eb7f86171eb3406e38a274743f9b7ac","833a7987bc1c94455fde83e3311f72bddedcfb93","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["86c34ea6a885f625f2e464756450d45b72653ef3"],"410e066f093e407222d9681429d209084e783149":[],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"a2eb0105a11d9294086684d4e25ee3d02720c285":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","410e066f093e407222d9681429d209084e783149"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"853713e230bedc03301dd29e00764247dd5e3e02":["a2eb0105a11d9294086684d4e25ee3d02720c285"],"da5ca503d2914753714af960bdfea65c0fe0fc59":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["b2500d3d93fac349c088b68441331fd1240d889e"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"86c34ea6a885f625f2e464756450d45b72653ef3":["eeb75d1685f27b55c20770200a5a24a8251ce9d5"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"e5fd20ed668e3a00e9b27810fa855182276b3b58":["da5ca503d2914753714af960bdfea65c0fe0fc59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}