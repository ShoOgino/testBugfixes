{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery();\n    SpanOrQuery b = new SpanOrQuery();\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery();\n    SpanOrQuery b = new SpanOrQuery();\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery();\n    SpanOrQuery b = new SpanOrQuery();\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery();\n    SpanOrQuery b = new SpanOrQuery();\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery();\n    SpanOrQuery b = new SpanOrQuery();\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}