{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":["3fc55735df93d56525bef197403d867c1fe93fe7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    try {\n      return getSearcher(false,true,null);\n    } catch (IOException e) {\n      SolrException.log(log,null,e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","sourceOld":"  /**\n  * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * This method should not be called from SolrCoreAware.inform() since it can result\n  * in a deadlock if useColdSearcher==false.\n  * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n  */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fc55735df93d56525bef197403d867c1fe93fe7","date":1558373042,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    if ( searchEnabled ) {\n      return getSearcher(false,true,null);\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Search is temporarily disabled\");\n  }\n\n","sourceOld":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    return getSearcher(false,true,null);\n  }\n\n","bugFix":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getSearcher().mjava","sourceNew":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   *\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    if (searchEnabled) {\n      return getSearcher(false, true, null);\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Search is temporarily disabled\");\n  }\n\n","sourceOld":"  /**\n   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n   * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n   * This method should not be called from SolrCoreAware.inform() since it can result\n   * in a deadlock if useColdSearcher==false.\n   * If handling a normal request, the searcher should be obtained from\n   * {@link org.apache.solr.request.SolrQueryRequest#getSearcher()} instead.\n   * If you still think you need to call this, consider {@link #withSearcher(IOFunction)} instead which is easier to\n   * use.\n   * @see SolrQueryRequest#getSearcher()\n   * @see #withSearcher(IOFunction)\n   */\n  public RefCounted<SolrIndexSearcher> getSearcher() {\n    if ( searchEnabled ) {\n      return getSearcher(false,true,null);\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Search is temporarily disabled\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["3fc55735df93d56525bef197403d867c1fe93fe7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3fc55735df93d56525bef197403d867c1fe93fe7":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"4ab833f2b623042c834458d4cbcad05073a93793":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3fc55735df93d56525bef197403d867c1fe93fe7":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["3fc55735df93d56525bef197403d867c1fe93fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}