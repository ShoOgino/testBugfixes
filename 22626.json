{"path":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // Even though this won't delete any docs,\n      // IndexWriter's flush will still make a clone for all\n      // SegmentInfos on hitting the exception:\n      writer.deleteDocuments(new Term(\"id\", \"1000\"));\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fd1f3c5c06036aebe90bc6da756a37d03f63884","290c401c31db375e771805c3ba7ac5f64c7370dc","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // Even though this won't delete any docs,\n      // IndexWriter's flush will still make a clone for all\n      // SegmentInfos on hitting the exception:\n      writer.deleteDocuments(new Term(\"id\", \"1000\"));\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // Even though this won't delete any docs,\n      // IndexWriter's flush will still make a clone for all\n      // SegmentInfos on hitting the exception:\n      writer.deleteDocuments(new Term(\"id\", \"1000\"));\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fd1f3c5c06036aebe90bc6da756a37d03f63884","date":1200847858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // Even though this won't delete any docs,\n      // IndexWriter's flush will still make a clone for all\n      // SegmentInfos on hitting the exception:\n      writer.deleteDocuments(new Term(\"id\", \"1000\"));\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush();\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      writer.addDocument(doc);\n\n      failure.setDoFail();\n      try {\n        writer.flush();\n        fail(\"failed to hit IOException\");\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush();\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ae99f08f69aa3acba7cd75134e8447eb747559","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"87c966e9308847938a7c905c2e46a56d8df788b8":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}