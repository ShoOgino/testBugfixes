{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","commits":[{"id":"a4278fc65afbb35739525c37f818cded6fe6e9ae","date":1369132128,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","sourceNew":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","sourceNew":"  final synchronized void unlockAllAfterAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","sourceOld":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#unlockAllAfterAbortAll().mjava","sourceNew":null,"sourceOld":"  final synchronized void unlockAllAfterAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"unlockAll\");\n    }\n    final int limit = perThreadPool.getMaxThreadStates();\n    for (int i = 0; i < limit; i++) {\n      try {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        if (perThread.isHeldByCurrentThread()) {\n          perThread.unlock();\n        }\n      } catch(Throwable e) {\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAll: could not unlock state: \" + i + \" msg:\" + e.getMessage());\n        }\n        // ignore & keep on unlocking\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7af110b00ea8df9429309d83e38e0533d82e144f"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}