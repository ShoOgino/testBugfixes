{"path":"lucene/core/src/java/org/apache/lucene/util/MathUtil#asinh(double).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MathUtil#asinh(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates inverse hyperbolic sine of a {@code double} value.\n   * <p>\n   * Special cases:\n   * <ul>\n   *    <li>If the argument is NaN, then the result is NaN.\n   *    <li>If the argument is zero, then the result is a zero with the same sign as the argument.\n   *    <li>If the argument is infinite, then the result is infinity with the same sign as the argument.\n   * </ul>\n   */\n  public static double asinh(double a) {\n    final double sign;\n    // check the sign bit of the raw representation to handle -0\n    if (Double.doubleToRawLongBits(a) < 0) {\n      a = Math.abs(a);\n      sign = -1.0d;\n    } else {\n      sign = 1.0d;\n    }\n\n    return sign * Math.log(Math.sqrt(a * a + 1.0d) + a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MathUtil#asinh(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates inverse hyperbolic sine of a {@code double} value.\n   * <p>\n   * Special cases:\n   * <ul>\n   *    <li>If the argument is NaN, then the result is NaN.\n   *    <li>If the argument is zero, then the result is a zero with the same sign as the argument.\n   *    <li>If the argument is infinite, then the result is infinity with the same sign as the argument.\n   * </ul>\n   */\n  public static double asinh(double a) {\n    final double sign;\n    // check the sign bit of the raw representation to handle -0\n    if (Double.doubleToRawLongBits(a) < 0) {\n      a = Math.abs(a);\n      sign = -1.0d;\n    } else {\n      sign = 1.0d;\n    }\n\n    return sign * Math.log(Math.sqrt(a * a + 1.0d) + a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f18d4e1cdc7330101ca433af5e8564dfd894f2bf"]},"commit2Childs":{"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}