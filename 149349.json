{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","commits":[{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    boolean indexed = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId) {\n        indexed |= fieldInfo.isIndexed;\n        if (fieldInfo.hasDocValues()) {\n          String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case INTS:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n           default:\n             assert false;\n          }\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    boolean indexed = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId) {\n        indexed |= fieldInfo.isIndexed;\n        if (fieldInfo.hasDocValues()) {\n          String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case INTS:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n           default:\n             assert false;\n          }\n        }\n\n      }\n    }\n    if (indexed) {\n      other.files(dir, segmentInfo, codecId, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebb742ffd3fae76a577a68de595d711f43e6944","date":1305546231,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    boolean indexed = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId) {\n        indexed |= fieldInfo.isIndexed;\n        if (fieldInfo.hasDocValues()) {\n          String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case INTS:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n           default:\n             assert false;\n          }\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    boolean indexed = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId) {\n        indexed |= fieldInfo.isIndexed;\n        if (fieldInfo.hasDocValues()) {\n          String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case INTS:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n           default:\n             assert false;\n          }\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94","date":1305894342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    boolean indexed = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId) {\n        indexed |= fieldInfo.isIndexed;\n        if (fieldInfo.hasDocValues()) {\n          String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case INTS:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n           default:\n             assert false;\n          }\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case INTS:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.INDEX_EXTENSION));\n          // until here all types use an index\n        case BYTES_FIXED_STRAIGHT:\n        case FLOAT_32:\n        case FLOAT_64:\n        case VAR_INTS:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FIXED_INTS_8:\n          files.add(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n              Writer.DATA_EXTENSION));\n          break;\n      \n        default:\n          assert false;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","sourceNew":"  public static void files(Directory dir, SegmentInfo segmentInfo, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.hasDocValues()) {\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"bc0b8069918917b33f361011899a1af0cdd2d462":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"7b91922b55d15444d554721b352861d028eb8278":["37f149c99eae8edb6c2f44fda36f194e0e345565"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["d47326e0c6ce589b6962777df409aad0550940fa"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","bc0b8069918917b33f361011899a1af0cdd2d462"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"d47326e0c6ce589b6962777df409aad0550940fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","37f149c99eae8edb6c2f44fda36f194e0e345565"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["bc0b8069918917b33f361011899a1af0cdd2d462","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","d47326e0c6ce589b6962777df409aad0550940fa"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["7b91922b55d15444d554721b352861d028eb8278"],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"d47326e0c6ce589b6962777df409aad0550940fa":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}