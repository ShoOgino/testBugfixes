{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#printState().mjava","sourceNew":"  @After\n  public void printState() throws Exception {\n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n\n  }\n\n","sourceOld":"  @After\n  public void printState() throws Exception {\n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","sourceNew":"  @After\n  public void printState() throws Exception {\n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n    shutdownCluster();\n  }\n\n","sourceOld":"  @After\n  public void printState() throws Exception {\n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1edfe287b5d8d16a9effaad9cf334bedae0c8857","date":1561656486,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","sourceNew":"  @After\n  public void printState() throws Exception {\n    if (null == cluster) {\n      // test didn't init, nothing to do\n      return;\n    }\n                          \n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n    shutdownCluster();\n  }\n\n","sourceOld":"  @After\n  public void printState() throws Exception {\n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n    shutdownCluster();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","sourceNew":"  @After\n  public void printState() throws Exception {\n    if (null == cluster) {\n      // test didn't init, nothing to do\n      return;\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"-------------_ FINAL STATE --------------\");\n      log.info(\"* Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues())); // logOk\n      log.info(\"* Live nodes: {}\", cluster.getClusterStateProvider().getLiveNodes()); // logOk\n      ClusterState state = cluster.getClusterStateProvider().getClusterState();\n      for (String coll : cluster.getSimClusterStateProvider().simListCollections()) {\n        log.info(\"* Collection {} state: {}\", coll, state.getCollection(coll)); // logOk\n      }\n    }\n    shutdownCluster();\n  }\n\n","sourceOld":"  @After\n  public void printState() throws Exception {\n    if (null == cluster) {\n      // test didn't init, nothing to do\n      return;\n    }\n                          \n    log.info(\"-------------_ FINAL STATE --------------\");\n    log.info(\"* Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"* Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cluster.getClusterStateProvider().getClusterState();\n    for (String coll: cluster.getSimClusterStateProvider().simListCollections()) {\n      log.info(\"* Collection \" + coll + \" state: \" + state.getCollection(coll));\n    }\n    shutdownCluster();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#printState().mjava","sourceNew":null,"sourceOld":"  @After\n  public void printState() throws Exception {\n    if (null == cluster) {\n      // test didn't init, nothing to do\n      return;\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"-------------_ FINAL STATE --------------\");\n      log.info(\"* Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues())); // logOk\n      log.info(\"* Live nodes: {}\", cluster.getClusterStateProvider().getLiveNodes()); // logOk\n      ClusterState state = cluster.getClusterStateProvider().getClusterState();\n      for (String coll : cluster.getSimClusterStateProvider().simListCollections()) {\n        log.info(\"* Collection {} state: {}\", coll, state.getCollection(coll)); // logOk\n      }\n    }\n    shutdownCluster();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["967a6347853ee35b432c965743a902d42f24e697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["967a6347853ee35b432c965743a902d42f24e697"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"967a6347853ee35b432c965743a902d42f24e697":["1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}