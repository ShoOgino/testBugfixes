{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard2\", Replica.Type.PULL).process(cluster.getSolrClient());    \n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard2\", Replica.Type.PULL).process(cluster.getSolrClient());    \n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard2\", Replica.Type.PULL).process(cluster.getSolrClient());    \n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.PULL).process(cluster.getSolrClient());\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard2\", Replica.Type.PULL).process(cluster.getSolrClient());    \n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 2));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 4));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 1));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 2));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 2));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n\n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n\n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 4));\n\n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName,\n        \"shard1\",\n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 2));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n    \n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n    \n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 4));\n    \n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName, \n        \"shard1\", \n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddRemovePullReplica().mjava","sourceNew":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 2));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n\n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n\n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 4));\n\n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName,\n        \"shard1\",\n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","sourceOld":"  public void testAddRemovePullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1, 0, 0)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 2 shards and 1 replica each\", collectionName, clusterShape(2, 2));\n    DocCollection docCollection = assertNumberOfReplicas(2, 0, 0, false, true);\n    assertEquals(2, docCollection.getSlices().size());\n\n    addReplicaToShard(\"shard1\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 1, true, false);\n    addReplicaToShard(\"shard2\", Replica.Type.PULL);\n    docCollection = assertNumberOfReplicas(2, 0, 2, true, false);\n\n    waitForState(\"Expecting collection to have 2 shards and 2 replica each\", collectionName, clusterShape(2, 4));\n\n    //Delete pull replica from shard1\n    CollectionAdminRequest.deleteReplica(\n        collectionName,\n        \"shard1\",\n        docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getName())\n    .process(cluster.getSolrClient());\n    assertNumberOfReplicas(2, 0, 1, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["28288370235ed02234a64753cdbf0c6ec096304a"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"61c45e99cf6676da48f19d7511c73712ad39402b":["4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}