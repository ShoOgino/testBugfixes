{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#toArray(float[]).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#toArray(float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Translates the mapped pairs' values into an array of T\n   * \n   * @param a\n   *            the array into which the elements of the list are to be\n   *            stored. If it is big enough use whatever space we need,\n   *            setting the one after the true data as {@link Float#NaN}.\n   * \n   * @return an array containing the elements of the list, using the given\n   *         parameter if big enough, otherwise allocate an appropriate array\n   *         and return it.\n   * \n   */\n  public float[] toArray(float[] a) {\n    int j = 0;\n    if (a.length < this.size()) {\n      a = new float[this.size()];\n    }\n\n    // Iterates over the values, adding them to the array.\n    for (FloatIterator iterator = iterator(); iterator.hasNext(); ++j) {\n      a[j] = iterator.next();\n    }\n\n    if (j < a.length) {\n      a[j] = Float.NaN;\n    }\n\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#toArray(float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Translates the mapped pairs' values into an array of T\n   * \n   * @param a\n   *            the array into which the elements of the list are to be\n   *            stored. If it is big enough use whatever space we need,\n   *            setting the one after the true data as {@link Float#NaN}.\n   * \n   * @return an array containing the elements of the list, using the given\n   *         parameter if big enough, otherwise allocate an appropriate array\n   *         and return it.\n   * \n   */\n  public float[] toArray(float[] a) {\n    int j = 0;\n    if (a.length < this.size()) {\n      a = new float[this.size()];\n    }\n\n    // Iterates over the values, adding them to the array.\n    for (FloatIterator iterator = iterator(); iterator.hasNext(); ++j) {\n      a[j] = iterator.next();\n    }\n\n    if (j < a.length) {\n      a[j] = Float.NaN;\n    }\n\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#toArray(float[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#toArray(float[]).mjava","sourceNew":"  /**\n   * Translates the mapped pairs' values into an array of T\n   * \n   * @param a\n   *            the array into which the elements of the list are to be\n   *            stored. If it is big enough use whatever space we need,\n   *            setting the one after the true data as {@link Float#NaN}.\n   * \n   * @return an array containing the elements of the list, using the given\n   *         parameter if big enough, otherwise allocate an appropriate array\n   *         and return it.\n   * \n   */\n  public float[] toArray(float[] a) {\n    int j = 0;\n    if (a.length < this.size()) {\n      a = new float[this.size()];\n    }\n\n    // Iterates over the values, adding them to the array.\n    for (FloatIterator iterator = iterator(); iterator.hasNext(); ++j) {\n      a[j] = iterator.next();\n    }\n\n    if (j < a.length) {\n      a[j] = Float.NaN;\n    }\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Translates the mapped pairs' values into an array of T\n   * \n   * @param a\n   *            the array into which the elements of the list are to be\n   *            stored. If it is big enough use whatever space we need,\n   *            setting the one after the true data as {@link Float#NaN}.\n   * \n   * @return an array containing the elements of the list, using the given\n   *         parameter if big enough, otherwise allocate an appropriate array\n   *         and return it.\n   * \n   */\n  public float[] toArray(float[] a) {\n    int j = 0;\n    if (a.length < this.size()) {\n      a = new float[this.size()];\n    }\n\n    // Iterates over the values, adding them to the array.\n    for (FloatIterator iterator = iterator(); iterator.hasNext(); ++j) {\n      a[j] = iterator.next();\n    }\n\n    if (j < a.length) {\n      a[j] = Float.NaN;\n    }\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}