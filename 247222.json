{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testCreateAndDeleteThenCreateAgain().mjava","commits":[{"id":"121de2b1a2f90238d017b11597526f7441dd0792","date":1598038996,"type":0,"author":"Anderson Dorow","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testCreateAndDeleteThenCreateAgain().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    @ShardsFixed(num = 1)\n    public void testCreateAndDeleteThenCreateAgain() throws Exception {\n        String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n        String notOverseerNode = null;\n        for (CloudJettyRunner cloudJetty : cloudJettys) {\n            if (!overseerNode.equals(cloudJetty.nodeName)) {\n                notOverseerNode = cloudJetty.nodeName;\n                break;\n            }\n        }\n        String collectionName = \"SimpleCollectionCreateDeleteTest\";\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n                .setCreateNodeSet(overseerNode);\n\n        NamedList<Object> request = create.process(cloudClient).getResponse();\n\n        if (request.get(\"success\") != null) {\n            assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n            CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collectionName);\n            cloudClient.request(delete);\n\n            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n            // currently, removing a collection does not wait for cores to be unloaded\n            TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n            while (true) {\n\n                if (timeout.hasTimedOut()) {\n                    throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n                }\n\n                boolean allContainersEmpty = true;\n                for (JettySolrRunner jetty : jettys) {\n\n                    Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n                    for (SolrCore core : cores) {\n                        CoreDescriptor cd = core.getCoreDescriptor();\n                        if (cd != null) {\n                            if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                                allContainersEmpty = false;\n                            }\n                        }\n                    }\n                }\n                if (allContainersEmpty) {\n                    break;\n                }\n            }\n\n            // create collection again on a node other than the overseer leader\n            create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n                    .setCreateNodeSet(notOverseerNode);\n            request = create.process(cloudClient).getResponse();\n            assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"121de2b1a2f90238d017b11597526f7441dd0792":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["121de2b1a2f90238d017b11597526f7441dd0792"]},"commit2Childs":{"121de2b1a2f90238d017b11597526f7441dd0792":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["121de2b1a2f90238d017b11597526f7441dd0792"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}