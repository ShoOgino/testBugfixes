{"path":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":null,"sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec3ba1d2792d1ffb27f73257ac395fb32728705e","date":1275503651,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\", \"stopwords\",\"false\",\n           \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81c86ba78280d33631b3536414395ad80a19a8af","date":1302972671,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":["20349324eb18d1565d301e59be543989f38743d3"],"bugIntro":["576a4c26b3d237aa2626e691ea3b4fa016037fe3","576a4c26b3d237aa2626e691ea3b4fa016037fe3","576a4c26b3d237aa2626e691ea3b4fa016037fe3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \"trait_ss\", \"Obnoxious\",\n            \"subject\", \"Defeated the pacifists op the Gandhi nebula\"));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestExtendedDismaxParser#testFocusQueryParser().mjava","sourceNew":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","sourceOld":"  // test the edismax query parser based on the dismax parser\n  public void testFocusQueryParser() {\n    assertU(adoc(\"id\", \"42\", \"trait_ss\", \"Tool\", \"trait_ss\", \"Obnoxious\",\n            \"name\", \"Zapp Brannigan\"));\n    assertU(adoc(\"id\", \"43\" ,\n            \"title\", \"Democratic Order op Planets\"));\n    assertU(adoc(\"id\", \"44\", \"trait_ss\", \"Tool\",\n            \"name\", \"The Zapper\"));\n    assertU(adoc(\"id\", \"45\", \"trait_ss\", \"Chauvinist\",\n            \"title\", \"25 star General\"));\n    assertU(adoc(\"id\", \"46\", \n                 \"trait_ss\", \"Obnoxious\",\n                 \"subject\", \"Defeated the pacifists op the Gandhi nebula\",\n                 \"t_special\", \"literal:colon value\",\n                 \"movies_t\", \"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...\",\n                 \"foo_i\", \"8\"\n    ));\n    assertU(adoc(\"id\", \"47\", \"trait_ss\", \"Pig\",\n            \"text\", \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"));\n    assertU(adoc(\"id\", \"48\", \"text_sw\", \"this has gigabyte potential\", \"foo_i\",\"100\"));\n    assertU(adoc(\"id\", \"49\", \"text_sw\", \"start the big apple end\", \"foo_i\",\"-100\"));\n    assertU(adoc(\"id\", \"50\", \"text_sw\", \"start new big city end\"));\n\n    assertU(commit());\n    String allq = \"id:[42 TO 50]\";\n    String allr = \"*[count(//doc)=9]\";\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n\n  assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n          req(\"q\", \"literal:colon\", \n              \"qf\", \"t_special\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='46']\"); \n\n    assertQ(\"standard request handler returns all matches\",\n            req(allq),\n            allr\n    );\n\n   assertQ(\"edismax query parser returns all matches\",\n            req(\"q\", allq,\n                \"defType\", \"edismax\"\n            ),\n            allr\n    );\n\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that field types that aren't applicable don't cause an exception to be thrown\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b\",\n               \"q\",\"Tool\"), twor\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:100\"), oner\n    );\n\n   // test that numeric field types can be queried\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n               \"q\",\"foo_i:-100\"), oner\n    );\n\n   // test that numeric field types can be queried  via qf\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw foo_i\",\n               \"q\",\"100\"), oner\n    );\n\n   assertQ(\"qf defaults to defaultSearchField\"\n           , req( \"defType\", \"edismax\"\n                 ,\"q\",\"op\")\n           , twor\n           );\n   \n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"AND\",\n               \"q\",\"Order op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \n               \"qf\", \"name title subject text\",\n               \"q.op\", \"OR\",\n               \"q\",\"Order op\"), twor\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order AND op\"), oner\n    );\n   assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order and op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"+Order op\"), oner\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order OR op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"Order or op\"), twor\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n               \"q\",\"*:*\"), allr\n    );\n\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"star OR (-star)\"), allr\n    );\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"name title subject text\",\n           \"q\",\"id:42 OR (-id:42)\"), allr\n    );\n\n    // test that basic synonyms work\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"GB\"), oner\n    );\n\n    // test for stopword removal in main query part\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_sw\",\n           \"q\",\"the big\"), twor\n    );\n\n    // test for stopwords not removed   \n    assertQ(req(\"defType\", \"edismax\", \n                \"qf\", \"text_sw\", \n                \"stopwords\",\"false\",\n                \"q.op\",\"AND\",\n                \"q\",\"the big\"), oner\n    );\n\n    // searching for a literal colon value when clearly not used for a field\n    assertQ(\"expected doc is missing (using standard)\",\n            req(\"q\", \"t_special:literal\\\\:colon\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal\\\\:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/field)\",\n            req(\"q\", \"t_special:literal:colon\", \n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using escaped edismax w/qf)\",\n            req(\"q\", \"literal\\\\:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\"); \n    assertQ(\"expected doc is missing (using un-escaped edismax w/qf)\",\n            req(\"q\", \"literal:colon\", \n                \"qf\", \"t_special\",\n                \"defType\", \"edismax\"),\n            \"//doc[1]/str[@name='id'][.='46']\");\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"terminator:3\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission:Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission : Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Mission: Impossible\", \"qf\",\"movies_t\"),\n            oner);\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 2: Judgement Day\", \"qf\",\"movies_t\"),\n            oner);\n\n    // make sure the clause wasn't eliminated\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator 10: Judgement Day\", \"qf\",\"movies_t\"),\n            nor);\n\n    // throw in a numeric field\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"),\n            nor);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 8\", \"qf\",\"movies_t foo_i\"),\n            oner);\n\n    assertQ(req(\"defType\",\"edismax\", \"mm\",\"0\", \"q\",\"movies_t:Terminator 100\", \"qf\",\"movies_t foo_i\"),\n            twor);\n\n\n    /** stopword removal in conjunction with multi-word synonyms at query time\n     * break this test.\n     // multi-word synonyms\n     // remove id:50 which contans the false match      \n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"text_t\", \"indent\",\"true\", \"debugQuery\",\"true\",\n           \"q\",\"-id:50 nyc\"), oner\n    );\n    **/\n\n    /*** these fail because multi-word synonyms are being used at query time\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"id title\",\n           \"q\",\"nyc\"), oner\n    );\n\n    // this will incorrectly match \"new big city\"\n    assertQ(req(\"defType\", \"edismax\", \"qf\", \"title\",\n           \"q\",\"the big apple\"), nor\n    );\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["81c86ba78280d33631b3536414395ad80a19a8af","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ec3ba1d2792d1ffb27f73257ac395fb32728705e","81c86ba78280d33631b3536414395ad80a19a8af"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["ec3ba1d2792d1ffb27f73257ac395fb32728705e","81c86ba78280d33631b3536414395ad80a19a8af"],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"81c86ba78280d33631b3536414395ad80a19a8af":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ec3ba1d2792d1ffb27f73257ac395fb32728705e","81c86ba78280d33631b3536414395ad80a19a8af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["81c86ba78280d33631b3536414395ad80a19a8af"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","81c86ba78280d33631b3536414395ad80a19a8af","a3776dccca01c11e7046323cfad46a3b4a471233"],"1da8d55113b689b06716246649de6f62430f15c0":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"81c86ba78280d33631b3536414395ad80a19a8af":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}