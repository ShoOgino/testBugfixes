{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90a98516f7d5652f9ba2dbd999fdd97be2a3843","date":1351606421,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    sloppyFreq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (sloppyFreq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      sloppyFreq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","bugFix":null,"bugIntro":["07c6861cb029cd251d930aa4c4578c8ca21aa957","07c6861cb029cd251d930aa4c4578c8ca21aa957"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"757496f10c991c553a874f78fb06c3f0dc110dff","date":1351616733,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    sloppyFreq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (sloppyFreq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      sloppyFreq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"757496f10c991c553a874f78fb06c3f0dc110dff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d90a98516f7d5652f9ba2dbd999fdd97be2a3843"],"d90a98516f7d5652f9ba2dbd999fdd97be2a3843":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["757496f10c991c553a874f78fb06c3f0dc110dff"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["757496f10c991c553a874f78fb06c3f0dc110dff","d90a98516f7d5652f9ba2dbd999fdd97be2a3843"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"757496f10c991c553a874f78fb06c3f0dc110dff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d90a98516f7d5652f9ba2dbd999fdd97be2a3843":["757496f10c991c553a874f78fb06c3f0dc110dff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}