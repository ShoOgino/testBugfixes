{"path":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets,MapOfSets,Set).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection checkValueMismatch(MapOfSets valIdToItems,\n                                        MapOfSets readerFieldToValIds,\n                                        Set valMismatchKeys) {\n\n    final List insanity = new ArrayList(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map rfMap = readerFieldToValIds.getMap();\n      final Map valMap = valIdToItems.getMap();\n      final Iterator mismatchIter = valMismatchKeys.iterator();\n      while (mismatchIter.hasNext()) {\n        final ReaderField rf = (ReaderField)mismatchIter.next();\n        final List badEntries = new ArrayList(valMismatchKeys.size() * 2);\n        final Iterator valIter = ((Set)rfMap.get(rf)).iterator();\n        while (valIter.hasNext()) {\n          Iterator entriesIter = ((Set)valMap.get(valIter.next())).iterator();\n          while (entriesIter.hasNext()) {\n            badEntries.add(entriesIter.next());\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = (CacheEntry[]) badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}