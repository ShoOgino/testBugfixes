{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    watcher.waitForTrigger();\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    assertTrue(watcher.getProps().isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd2416e0666fe28e88bf4c6db287f44aa41518b8","date":1564790537,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","sourceNew":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher(\"Watcher\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    log.info(\"(value2) waitForTrigger=={}\", watcher.waitForTrigger());\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    log.info(\"deleting props\");\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    final Map<String, String> props = watcher.getProps();\n    assertTrue(props.toString(), props.isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    log.info(\"removing watcher\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    log.info(\"setting value1 (again)\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","sourceOld":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    watcher.waitForTrigger();\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    assertTrue(watcher.getProps().isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","sourceNew":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher(\"Watcher\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    log.info(\"(value2) waitForTrigger=={}\", watcher.waitForTrigger());\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    log.info(\"deleting props\");\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    final Map<String, String> props = watcher.getProps();\n    assertTrue(props.toString(), props.isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    log.info(\"removing watcher\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    log.info(\"setting value1 (again)\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","sourceOld":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    watcher.waitForTrigger();\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    assertTrue(watcher.getProps().isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","sourceNew":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher(\"Watcher\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    log.info(\"(value2) waitForTrigger=={}\", watcher.waitForTrigger());\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    log.info(\"deleting props\");\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    final Map<String, String> props = watcher.getProps();\n    assertTrue(props.toString(), props.isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    log.info(\"removing watcher\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    log.info(\"setting value1 (again)\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","sourceOld":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    watcher.waitForTrigger();\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    assertTrue(watcher.getProps().isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testWatcher().mjava","sourceNew":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher(\"Watcher\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    if (log.isInfoEnabled()) {\n      log.info(\"(value2) waitForTrigger=={}\", watcher.waitForTrigger());\n    }\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    log.info(\"deleting props\");\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    final Map<String, String> props = watcher.getProps();\n    assertTrue(props.toString(), props.isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    log.info(\"removing watcher\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    log.info(\"setting value1 (again)\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","sourceOld":"  @Test\n  public void testWatcher() throws KeeperException, InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Add a watcher to collection props\n    final Watcher watcher = new Watcher(\"Watcher\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher);\n    assertEquals(0, watcher.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Trigger a new znode event\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher.waitForTrigger());\n    assertEquals(\"value1\", watcher.getProps().get(\"property\"));\n\n    // Trigger a value change event\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    log.info(\"(value2) waitForTrigger=={}\", watcher.waitForTrigger());\n    assertEquals(\"value2\", watcher.getProps().get(\"property\"));\n\n    // Delete the properties znode\n    log.info(\"deleting props\");\n    zkStateReader.getZkClient().delete(\"/collections/\" + collectionName + \"/collectionprops.json\", -1, true);\n    assertEquals(1, watcher.waitForTrigger());\n    final Map<String, String> props = watcher.getProps();\n    assertTrue(props.toString(), props.isEmpty());\n\n    // Remove watcher and make sure that the watcher is not triggered\n    log.info(\"removing watcher\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher);\n    log.info(\"setting value1 (again)\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(\"ZK watcher was triggered after it was removed for collection \" + collectionName, 0, watcher.waitForTrigger());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["de3459a54b4c8751d9ef19b035577e2418064be7"],"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"f8061ddd97f3352007d927dae445884a6f3d857b":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","a966532d92cf9ba2856f15a8140151bb6b518e4b","f8061ddd97f3352007d927dae445884a6f3d857b"],"de3459a54b4c8751d9ef19b035577e2418064be7":["cd2416e0666fe28e88bf4c6db287f44aa41518b8","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}