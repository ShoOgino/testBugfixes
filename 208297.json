{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"/dev/null","sourceNew":"  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect, true);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a63d32fe2b29dda520043ef60a1424a4d9ccd5c","date":1480426632,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort == Sort.RELEVANCE) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, true, needScores, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, true, needScores, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      collector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      collector = TopFieldCollector.create(sort, docsToCollect, true, needScores, needScores, true);\n    }\n    filterCollector = new FilterCollector(docSet, collector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, needScores, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, true, needScores, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, needScores, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand#create().mjava","sourceNew":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect, Integer.MAX_VALUE);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, Integer.MAX_VALUE);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","sourceOld":"  @Override\n  public List<Collector> create() throws IOException {\n    Collector subCollector;\n    if (sort == null || sort.equals(Sort.RELEVANCE)) {\n      subCollector = topDocsCollector = TopScoreDocCollector.create(docsToCollect);\n    } else {\n      topDocsCollector = TopFieldCollector.create(sort, docsToCollect, true);\n      if (needScores) {\n        maxScoreCollector = new MaxScoreCollector();\n        subCollector = MultiCollector.wrap(topDocsCollector, maxScoreCollector);\n      } else {\n        subCollector = topDocsCollector;\n      }\n    }\n    filterCollector = new FilterCollector(docSet, subCollector);\n    return Arrays.asList((Collector) filterCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ccc08aa684aee4964baee0644a6ba047bfd70829","7530de27b87b961b51f01bd1299b7004d46e8823"],"404d1ab7f6f396235047017c88d545fec15dafb7":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0a63d32fe2b29dda520043ef60a1424a4d9ccd5c":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["b101c3c0e7f5871415e80d970cb3289309f3522e","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","0a63d32fe2b29dda520043ef60a1424a4d9ccd5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","b101c3c0e7f5871415e80d970cb3289309f3522e"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"0a63d32fe2b29dda520043ef60a1424a4d9ccd5c":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b101c3c0e7f5871415e80d970cb3289309f3522e":["404d1ab7f6f396235047017c88d545fec15dafb7","1aad05eeff7818b0833c02ac6b743aa72054963b","9856095f7afb5a607bf5e65077615ed91273508c"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["0a63d32fe2b29dda520043ef60a1424a4d9ccd5c","b101c3c0e7f5871415e80d970cb3289309f3522e","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}