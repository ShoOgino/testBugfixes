{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","commits":[{"id":"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f","date":1477377788,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"970a667af41fa94f5b9e55f7d08c90b51daf989d","date":1478330202,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":["8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setRealtimeReplicas(onlyLeaderIndexes? 1: -1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setRealtimeReplicas(onlyLeaderIndexes? 1: -1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setRealtimeReplicas(onlyLeaderIndexes? 1: -1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setRealtimeReplicas(onlyLeaderIndexes? 1: -1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, 2)\n        .setRealtimeReplicas(onlyLeaderIndexes? 1: -1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1","date":1499091633,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    TestInjection.prepRecoveryOpPauseForever = \"true:30\";\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d","date":1527531709,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n\n    //SOLR-12314 : assert that these values are from the solr.xml file and not UpdateShardHandlerConfig#DEFAULT\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      UpdateShardHandler shardHandler = jettySolrRunner.getCoreContainer().getUpdateShardHandler();\n      int socketTimeout = shardHandler.getSocketTimeout();\n      int connectionTimeout = shardHandler.getConnectionTimeout();\n      assertEquals(340000, socketTimeout);\n      assertEquals(45000, connectionTimeout);\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n    System.setProperty(\"solr.ulog.numRecordsToKeep\", \"1000\");\n\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, onlyLeaderIndexes?0:2,onlyLeaderIndexes?2:0,0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n\n    //SOLR-12314 : assert that these values are from the solr.xml file and not UpdateShardHandlerConfig#DEFAULT\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      UpdateShardHandler shardHandler = jettySolrRunner.getCoreContainer().getUpdateShardHandler();\n      int socketTimeout = shardHandler.getSocketTimeout();\n      int connectionTimeout = shardHandler.getConnectionTimeout();\n      assertEquals(340000, socketTimeout);\n      assertEquals(45000, connectionTimeout);\n    }\n  }\n\n","bugFix":["be320990bdc77e643388fa801e75017f19289c42","40b4f9867bcb3a1cf45f8a02b05af0bdf552746f","a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d":["8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40b4f9867bcb3a1cf45f8a02b05af0bdf552746f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"be320990bdc77e643388fa801e75017f19289c42":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"ab68488225b6a6c357dda72ed11dedca9914a192":["970a667af41fa94f5b9e55f7d08c90b51daf989d","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["970a667af41fa94f5b9e55f7d08c90b51daf989d","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","40b4f9867bcb3a1cf45f8a02b05af0bdf552746f","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["a2e58c9eb8714e96373ecfded6d0bfc84ad1d93d","30c8e5574b55d57947e989443dfde611646530ee"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}