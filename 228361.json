{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d091e7c3a63aee14c79ef93ab871879b9f5fa972","f9462128d6aef6f10f721e3635944ede9327665c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","sourceNew":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","sourceNew":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d091e7c3a63aee14c79ef93ab871879b9f5fa972","date":1397659281,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","sourceNew":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = in.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = in.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = super.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = super.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","bugFix":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9462128d6aef6f10f721e3635944ede9327665c","date":1397750801,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/http/HttpClientBase#responseInputStream(HttpResponse,boolean).mjava","sourceNew":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        in.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = in.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = in.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne == -1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: can we simplify this Consuming !?!?!?\n  /**\n   * Internal utility: input stream of the provided response, which optionally \n   * consumes the response's resources when the input stream is exhausted.\n   */\n  public InputStream responseInputStream(HttpResponse response, boolean consume) throws IOException {\n    final HttpEntity entity = response.getEntity();\n    final InputStream in = entity.getContent();\n    if (!consume) {\n      return in;\n    }\n    return new InputStream() {\n      private boolean consumed = false;\n      @Override\n      public int read() throws IOException {\n        final int res = in.read();\n        consume(res);\n        return res;\n      }\n      @Override\n      public void close() throws IOException {\n        super.close();\n        consume(-1);\n      }\n      @Override\n      public int read(byte[] b) throws IOException {\n        final int res = in.read(b);\n        consume(res);\n        return res;\n      }\n      @Override\n      public int read(byte[] b, int off, int len) throws IOException {\n        final int res = in.read(b, off, len);\n        consume(res);\n        return res;\n      }\n      private void consume(int minusOne) {\n        if (!consumed && minusOne==-1) {\n          try {\n            EntityUtils.consume(entity);\n          } catch (Exception e) {\n            // ignored on purpose\n          }\n          consumed = true;\n        }\n      }\n    };\n  }\n\n","bugFix":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d091e7c3a63aee14c79ef93ab871879b9f5fa972":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"f9462128d6aef6f10f721e3635944ede9327665c":["d091e7c3a63aee14c79ef93ab871879b9f5fa972"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9462128d6aef6f10f721e3635944ede9327665c"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"d091e7c3a63aee14c79ef93ab871879b9f5fa972":["f9462128d6aef6f10f721e3635944ede9327665c"],"f9462128d6aef6f10f721e3635944ede9327665c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d091e7c3a63aee14c79ef93ab871879b9f5fa972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}