{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}