{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","commits":[{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","pathOld":"/dev/null","sourceNew":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 2, 5);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","pathOld":"/dev/null","sourceNew":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 2, 5);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","sourceNew":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 2, numDataDims);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDataDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 2, 5);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimLowCard().mjava","sourceNew":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = Math.min(TestUtil.nextInt(random(), 2, numDataDims), PointValues.MAX_INDEX_DIMENSIONS);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDataDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","sourceOld":"  // This triggers the logic that makes sure all dimensions get indexed\n  // by looking at how many times each dim has been split\n  public void testOneDimLowCard() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 2, numDataDims);\n\n    int numDocs = atLeast(10000);\n    int theLowCardDim = random().nextInt(numDataDims);\n\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = value1.clone();\n    if (value2[numBytesPerDim-1] == 0 || random().nextBoolean()) {\n      value2[numBytesPerDim-1]++;\n    } else {\n      value2[numBytesPerDim-1]--;\n    }\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theLowCardDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    // Use a small number of points in leaf blocks to trigger a lot of splitting\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 20, 50));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["f6652c943595e92c187ee904c382863013eae28f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}