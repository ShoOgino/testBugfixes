{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int,int).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int from, int to, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int pointCount, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int from, int to, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}