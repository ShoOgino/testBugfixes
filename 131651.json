{"path":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["df16fc2e9b615e0138edac46655ae628f5d098ad","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["df16fc2e9b615e0138edac46655ae628f5d098ad","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["568cba246a11f491637ba492f881589c2142667c"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["568cba246a11f491637ba492f881589c2142667c","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}