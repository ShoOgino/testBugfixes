{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","commits":[{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","sourceNew":"  final public Query andExpression(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query andExpression(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","sourceNew":"  final public Query andExpression(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query andExpression(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#andExpression(String).mjava","sourceNew":"  final public Query andExpression(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query andExpression(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  int modifier;\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    firstQuery = q;\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_2;\n      }\n      jj_consume_token(AND);\n      modifier = Modifier();\n      q = Clause(field);\n      addClause(clauses, CONJ_AND, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}