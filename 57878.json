{"path":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<SegmentCommitInfo,Boolean>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<SegmentCommitInfo>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentInfoPerCommit,Boolean> oldSegments = new HashMap<SegmentInfoPerCommit,Boolean>();\n    for (final SegmentInfoPerCommit si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentInfoPerCommit> newInfos = new ArrayList<SegmentInfoPerCommit>();\n      for (final SegmentInfoPerCommit si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<SegmentCommitInfo,Boolean>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<SegmentCommitInfo>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose(writer)) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments, writer);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments, writer);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose(writer)) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments, writer);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose()) {\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"027bee21e09164c9ee230395405076d1e0034b30":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["027bee21e09164c9ee230395405076d1e0034b30"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}