{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,FieldDoc,int,Sort,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort, boolean, boolean)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, FieldDoc after, int nDocs,\n                                Sort sort, boolean fillFields,\n                                boolean doDocScores, boolean doMaxScore)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search(leafContexts, weight, after, nDocs, sort, fillFields, doDocScores, doMaxScore);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      after,\n                                                                      fillFields,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, after, nDocs, topCollector, sort, doDocScores, doMaxScore));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,FieldDoc,int,Sort,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort, boolean, boolean)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, FieldDoc after, int nDocs,\n                                Sort sort, boolean fillFields,\n                                boolean doDocScores, boolean doMaxScore)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search(leafContexts, weight, after, nDocs, sort, fillFields, doDocScores, doMaxScore);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      after,\n                                                                      fillFields,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, after, nDocs, topCollector, sort, doDocScores, doMaxScore));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}