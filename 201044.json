{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}