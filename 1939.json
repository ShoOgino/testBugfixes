{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#OfflineSorter(Directory,String,Comparator[BytesRef],BufferSize,int,int,ExecutorService,int).mjava","commits":[{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#OfflineSorter(Directory,String,Comparator[BytesRef],BufferSize,int,int,ExecutorService,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#OfflineSorter(Directory,String,Comparator[BytesRef],BufferSize,int,int).mjava","sourceNew":"  /**\n   * All-details constructor.  If {@code valueLength} is -1 (the default), the length of each value differs; otherwise,\n   * all values have the specified length.  If you pass a non-null {@code ExecutorService} then it will be\n   * used to run sorting operations that can be run concurrently, and maxPartitionsInRAM is the maximum\n   * concurrent in-memory partitions.  Thus the maximum possible RAM used by this class while sorting is\n   * {@code maxPartitionsInRAM * ramBufferSize}.\n   */\n  public OfflineSorter(Directory dir, String tempFileNamePrefix, Comparator<BytesRef> comparator,\n                       BufferSize ramBufferSize, int maxTempfiles, int valueLength, ExecutorService exec,\n                       int maxPartitionsInRAM) {\n    if (exec != null) {\n      this.exec = exec;\n      if (maxPartitionsInRAM <= 0) {\n        throw new IllegalArgumentException(\"maxPartitionsInRAM must be > 0; got \" + maxPartitionsInRAM);\n      }\n    } else {\n      this.exec = new SameThreadExecutorService();\n      maxPartitionsInRAM = 1;\n    }\n    this.partitionsInRAM = new Semaphore(maxPartitionsInRAM);\n\n    if (ramBufferSize.bytes < ABSOLUTE_MIN_SORT_BUFFER_SIZE) {\n      throw new IllegalArgumentException(MIN_BUFFER_SIZE_MSG + \": \" + ramBufferSize.bytes);\n    }\n    \n    if (maxTempfiles < 2) {\n      throw new IllegalArgumentException(\"maxTempFiles must be >= 2\");\n    }\n\n    if (valueLength != -1 && (valueLength == 0 || valueLength > Short.MAX_VALUE)) {\n      throw new IllegalArgumentException(\"valueLength must be 1 .. \" + Short.MAX_VALUE + \"; got: \" + valueLength);\n    }\n    \n    this.valueLength = valueLength;\n    this.ramBufferSize = ramBufferSize;\n    this.maxTempFiles = maxTempfiles;\n    this.comparator = comparator;\n    this.dir = dir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n  }\n\n","sourceOld":"  /**\n   * All-details constructor.  If {@code valueLength} is -1 (the default), the length of each value differs; otherwise,\n   * all values have the specified length.\n   */\n  public OfflineSorter(Directory dir, String tempFileNamePrefix, Comparator<BytesRef> comparator, BufferSize ramBufferSize, int maxTempfiles, int valueLength) {\n    if (ramBufferSize.bytes < ABSOLUTE_MIN_SORT_BUFFER_SIZE) {\n      throw new IllegalArgumentException(MIN_BUFFER_SIZE_MSG + \": \" + ramBufferSize.bytes);\n    }\n    \n    if (maxTempfiles < 2) {\n      throw new IllegalArgumentException(\"maxTempFiles must be >= 2\");\n    }\n    if (valueLength == -1) {\n      buffer = new BytesRefArray(bufferBytesUsed);\n    } else {\n      if (valueLength == 0 || valueLength > Short.MAX_VALUE) {\n        throw new IllegalArgumentException(\"valueLength must be 1 .. \" + Short.MAX_VALUE + \"; got: \" + valueLength);\n      }\n      buffer = new FixedLengthBytesRefArray(valueLength);\n    }\n    this.valueLength = valueLength;\n    this.ramBufferSize = ramBufferSize;\n    this.maxTempFiles = maxTempfiles;\n    this.comparator = comparator;\n    this.dir = dir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#OfflineSorter(Directory,String,Comparator[BytesRef],BufferSize,int,int,ExecutorService,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * All-details constructor.  If {@code valueLength} is -1 (the default), the length of each value differs; otherwise,\n   * all values have the specified length.  If you pass a non-null {@code ExecutorService} then it will be\n   * used to run sorting operations that can be run concurrently, and maxPartitionsInRAM is the maximum\n   * concurrent in-memory partitions.  Thus the maximum possible RAM used by this class while sorting is\n   * {@code maxPartitionsInRAM * ramBufferSize}.\n   */\n  public OfflineSorter(Directory dir, String tempFileNamePrefix, Comparator<BytesRef> comparator,\n                       BufferSize ramBufferSize, int maxTempfiles, int valueLength, ExecutorService exec,\n                       int maxPartitionsInRAM) {\n    if (exec != null) {\n      this.exec = exec;\n      if (maxPartitionsInRAM <= 0) {\n        throw new IllegalArgumentException(\"maxPartitionsInRAM must be > 0; got \" + maxPartitionsInRAM);\n      }\n    } else {\n      this.exec = new SameThreadExecutorService();\n      maxPartitionsInRAM = 1;\n    }\n    this.partitionsInRAM = new Semaphore(maxPartitionsInRAM);\n\n    if (ramBufferSize.bytes < ABSOLUTE_MIN_SORT_BUFFER_SIZE) {\n      throw new IllegalArgumentException(MIN_BUFFER_SIZE_MSG + \": \" + ramBufferSize.bytes);\n    }\n    \n    if (maxTempfiles < 2) {\n      throw new IllegalArgumentException(\"maxTempFiles must be >= 2\");\n    }\n\n    if (valueLength != -1 && (valueLength == 0 || valueLength > Short.MAX_VALUE)) {\n      throw new IllegalArgumentException(\"valueLength must be 1 .. \" + Short.MAX_VALUE + \"; got: \" + valueLength);\n    }\n    \n    this.valueLength = valueLength;\n    this.ramBufferSize = ramBufferSize;\n    this.maxTempFiles = maxTempfiles;\n    this.comparator = comparator;\n    this.dir = dir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}