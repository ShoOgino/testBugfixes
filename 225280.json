{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    if (val == null) {\n      val = BinaryDocValuesUpdate.MISSING;\n    }\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n      docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n    }\n    \n    if (val != BinaryDocValuesUpdate.MISSING) {\n      // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n      docsWithField.set(size);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length);\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length);\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    if (val == null) {\n      val = BinaryDocValuesUpdate.MISSING;\n    }\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n      docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n    }\n    \n    if (val != BinaryDocValuesUpdate.MISSING) {\n      // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n      docsWithField.set(size);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length);\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length);\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":["06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","sourceOld":"  @Override\n  public void add(int doc, Object value) {\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, value.length);\n    values.append(value);\n    ++size;\n  }\n\n","sourceOld":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#add(int,Object).mjava","sourceNew":"  @Override\n  synchronized public void add(int doc, BytesRef value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, value.length);\n    values.append(value);\n    ++size;\n  }\n\n","sourceOld":"  // NOTE: we fully consume the incoming BytesRef so caller is free to reuse it after we return:\n  @Override\n  synchronized public void add(int doc, Object value) {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n\n    assert doc < maxDoc: \"doc=\" + doc + \" maxDoc=\" + maxDoc;\n\n    // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n    if (size == Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n    }\n\n    BytesRef val = (BytesRef) value;\n    \n    // grow the structures to have room for more elements\n    if (docs.size() == size) {\n      docs = docs.grow(size + 1);\n      offsets = offsets.grow(size + 1);\n      lengths = lengths.grow(size + 1);\n    }\n    \n    docs.set(size, doc);\n    offsets.set(size, values.length());\n    lengths.set(size, val.length);\n    values.append(val);\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f42883db49d143abc1a0f176ba47e3388dafb608":["28288370235ed02234a64753cdbf0c6ec096304a","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["06805da26538ed636bd89b10c2699cc3834032ae"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f42883db49d143abc1a0f176ba47e3388dafb608"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"06805da26538ed636bd89b10c2699cc3834032ae":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"f42883db49d143abc1a0f176ba47e3388dafb608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}