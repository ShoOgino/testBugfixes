{"path":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","commits":[{"id":"88cad0b82c4fc846896801e268b13def4dc1b84e","date":1564824026,"type":0,"author":"Leonardo Menezes","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","pathOld":"/dev/null","sourceNew":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term],[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","pathOld":"/dev/null","sourceNew":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term],[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","pathOld":"/dev/null","sourceNew":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term],[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3f81218fdc170a818bb0a75b395a3650a661d","date":1568804028,"type":3,"author":"Amish Shah","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","sourceNew":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          selectedDelimiter = Delimiter.getSelectedDelimiterValue((String) delimiterCombo.getSelectedItem());\n\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field, selectedDelimiter);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term]\" + selectedDelimiter + \"[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","sourceOld":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term],[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/ExportTermsDialogFactory.ListenerFunctions#export(ActionEvent).mjava","sourceNew":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          selectedDelimiter = Delimiter.getSelectedDelimiterValue((String) delimiterCombo.getSelectedItem());\n\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field, selectedDelimiter);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field {}\", field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field {}\", field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term]\" + selectedDelimiter + \"[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","sourceOld":"    void export(ActionEvent e) {\n      ExecutorService executor = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"export-terms-dialog\"));\n\n      SwingWorker<Void, Void> task = new SwingWorker<Void, Void>() {\n\n        String filename;\n\n        @Override\n        protected Void doInBackground() {\n          setProgress(0);\n          statusLbl.setText(\"Exporting...\");\n          indicatorLbl.setVisible(true);\n          String field = (String) fieldCombo.getSelectedItem();\n          selectedDelimiter = Delimiter.getSelectedDelimiterValue((String) delimiterCombo.getSelectedItem());\n\n          String directory = destDir.getText();\n          try {\n            filename = toolsModel.exportTerms(directory, field, selectedDelimiter);\n          } catch (LukeException e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.error\", e.getMessage()));\n          } catch (Exception e) {\n            log.error(\"Error while exporting terms from field \" + field, e);\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"message.error.unknown\"));\n            throw e;\n          } finally {\n            setProgress(100);\n          }\n          return null;\n        }\n\n        @Override\n        protected void done() {\n          indicatorLbl.setVisible(false);\n          if (filename != null) {\n            statusLbl.setText(MessageUtils.getLocalizedMessage(\"export.terms.label.success\", filename, \"[term]\" + selectedDelimiter + \"[doc frequency]\"));\n          }\n        }\n      };\n\n      executor.submit(task);\n      executor.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88cad0b82c4fc846896801e268b13def4dc1b84e"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["01e3f81218fdc170a818bb0a75b395a3650a661d"],"01e3f81218fdc170a818bb0a75b395a3650a661d":["88cad0b82c4fc846896801e268b13def4dc1b84e"],"88cad0b82c4fc846896801e268b13def4dc1b84e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88cad0b82c4fc846896801e268b13def4dc1b84e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","88cad0b82c4fc846896801e268b13def4dc1b84e","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"88cad0b82c4fc846896801e268b13def4dc1b84e":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","01e3f81218fdc170a818bb0a75b395a3650a661d","f8061ddd97f3352007d927dae445884a6f3d857b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01e3f81218fdc170a818bb0a75b395a3650a661d":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}