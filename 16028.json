{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,SegmentReader).mjava","sourceNew":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_DEREF:\n        checkSortedDocValues(fi, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_STRAIGHT:\n        checkBinaryDocValues(fi, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  // nocommit\n  private void checkSimpleDocValues(FieldInfo fi, SegmentReader reader) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(\"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_DEREF:\n        checkSortedDocValues(fi, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_STRAIGHT:\n        checkBinaryDocValues(fi, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_DEREF:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_STRAIGHT:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_DEREF:\n        checkSortedDocValues(fi, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_STRAIGHT:\n        checkBinaryDocValues(fi, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_DEREF:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_STRAIGHT:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50599bdf4e0c26952f76b740a4280d058cab3539":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0837ab0472feecb3a54260729d845f839e1cbd72":["50599bdf4e0c26952f76b740a4280d058cab3539"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"50599bdf4e0c26952f76b740a4280d058cab3539":["0837ab0472feecb3a54260729d845f839e1cbd72"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["50599bdf4e0c26952f76b740a4280d058cab3539"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e13bf6998389e201ae22c6e84079b9d6b5da0af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}