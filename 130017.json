{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","commits":[{"id":"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","date":1330786058,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int,CommitUpdateCommand,ModifiableSolrParams).mjava","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushAdds(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (commitParams != null) combinedParams.add(commitParams);\n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"/dev/null","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79ec7e176bd0b09932c017c341b5f1cae2a33b6","date":1343925223,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) return false;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","sourceNew":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequest ureq = new UpdateRequest();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n\n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n       \n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushAdds(int).mjava","sourceNew":null,"sourceOld":"  boolean flushAdds(int limit) {\n    // check for pending deletes\n  \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = adds.keySet();\n \n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null || alist.size() < limit) continue;\n  \n      UpdateRequest ureq = new UpdateRequest();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n\n      for (AddRequest aReq : alist) {\n        AddUpdateCommand cmd = aReq.cmd;\n        combinedParams.add(aReq.params);\n        ureq.add(cmd.solrDoc, cmd.commitWithin, cmd.overwrite);\n      }\n      \n      if (ureq.getParams() == null) ureq.setParams(new ModifiableSolrParams());\n      ureq.getParams().add(combinedParams);\n\n      removeNodes.add(node);\n      \n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      adds.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["d79ec7e176bd0b09932c017c341b5f1cae2a33b6"],"d79ec7e176bd0b09932c017c341b5f1cae2a33b6":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","d79ec7e176bd0b09932c017c341b5f1cae2a33b6"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","d79ec7e176bd0b09932c017c341b5f1cae2a33b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d79ec7e176bd0b09932c017c341b5f1cae2a33b6","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d79ec7e176bd0b09932c017c341b5f1cae2a33b6":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}