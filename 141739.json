{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","commits":[{"id":"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","date":1343692569,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c","date":1396698402,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c96362be7a015af2bd16ce584c1e9ac999b1e701","date":1402509045,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n          success = false;\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ded7f336122df7671eaad33d3164a701e13744d","date":1452097400,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c96362be7a015af2bd16ce584c1e9ac999b1e701":["01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c","c96362be7a015af2bd16ce584c1e9ac999b1e701"],"7ded7f336122df7671eaad33d3164a701e13744d":["c96362be7a015af2bd16ce584c1e9ac999b1e701"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ded7f336122df7671eaad33d3164a701e13744d"],"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c":["c2c3a504730329ae644b009dee43024116605d47"]},"commit2Childs":{"c96362be7a015af2bd16ce584c1e9ac999b1e701":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","7ded7f336122df7671eaad33d3164a701e13744d"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["c2c3a504730329ae644b009dee43024116605d47","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"7ded7f336122df7671eaad33d3164a701e13744d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01b8fc5bcd71df6f67aff7ec5c95db9f2458c78c":["c96362be7a015af2bd16ce584c1e9ac999b1e701","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}