{"path":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1ff48f427e50e77e8d613a82e026521f628838","date":1321406846,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      switch (type) {\n        case INTEGER:\n          ts.setIntValue(Integer.parseInt(v));\n          break;\n        case FLOAT:\n          ts.setFloatValue(Float.parseFloat(v));\n          break;\n        case LONG:\n          ts.setLongValue(Long.parseLong(v));\n          break;\n        case DOUBLE:\n          ts.setDoubleValue(Double.parseDouble(v));\n          break;\n        case DATE:\n          ts.setLongValue(dateField.parseMath(null, v).getTime());\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":["be29e0e2cef1fd569147732e48caf8538790339b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void reset(Reader input) {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":["be29e0e2cef1fd569147732e48caf8538790339b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#setReader(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":"  @Override\n  public void setReader(Reader input) {\n   try {\n      super.setReader(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset(Reader input) {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void reset(Reader input) throws IOException {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset(Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void reset(Reader input) {\n   try {\n      super.reset(input);\n      input = super.input;\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["ec1ff48f427e50e77e8d613a82e026521f628838","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ec1ff48f427e50e77e8d613a82e026521f628838"],"ec1ff48f427e50e77e8d613a82e026521f628838":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"]},"commit2Childs":{"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ec1ff48f427e50e77e8d613a82e026521f628838"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e"],"ec1ff48f427e50e77e8d613a82e026521f628838":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}