{"path":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  static private final void quickSort(Posting[] postings, int lo, int hi) {\n    if(lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if(postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n      \n      if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n\tPosting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return; \n\n    Term partition = postings[mid].term;\n    \n    for( ;; ) {\n      while(postings[right].term.compareTo(partition) > 0)\n\t--right;\n      \n      while(left < right && postings[left].term.compareTo(partition) <= 0)\n\t++left;\n      \n      if(left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n\tbreak;\n      }\n    }\n    \n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","sourceNew":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if(lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if(postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n\tPosting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for( ;; ) {\n      while(postings[right].term.compareTo(partition) > 0)\n\t--right;\n\n      while(left < right && postings[left].term.compareTo(partition) <= 0)\n\t++left;\n\n      if(left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n\tbreak;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","sourceOld":"  static private final void quickSort(Posting[] postings, int lo, int hi) {\n    if(lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if(postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n      \n      if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n\tPosting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return; \n\n    Term partition = postings[mid].term;\n    \n    for( ;; ) {\n      while(postings[right].term.compareTo(partition) > 0)\n\t--right;\n      \n      while(left < right && postings[left].term.compareTo(partition) <= 0)\n\t++left;\n      \n      if(left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n\tbreak;\n      }\n    }\n    \n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f8ac981e8707cfae011613a8168a2edeb0b6e3","date":1064079760,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","sourceNew":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n        Posting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for (; ;) {\n      while (postings[right].term.compareTo(partition) > 0)\n        --right;\n\n      while (left < right && postings[left].term.compareTo(partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","sourceOld":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if(lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if(postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if(postings[lo].term.compareTo(postings[mid].term) > 0) {\n\tPosting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for( ;; ) {\n      while(postings[right].term.compareTo(partition) > 0)\n\t--right;\n\n      while(left < right && postings[left].term.compareTo(partition) <= 0)\n\t++left;\n\n      if(left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n\tbreak;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290ddf70ef4230015d4b5ff6758c630a466d757c","date":1183739680,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","sourceNew":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n\n    int mid = (lo + hi) >>> 1;\n\n    if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n        Posting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for (; ;) {\n      while (postings[right].term.compareTo(partition) > 0)\n        --right;\n\n      while (left < right && postings[left].term.compareTo(partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","sourceOld":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n\n    int mid = (lo + hi) / 2;\n\n    if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n        Posting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for (; ;) {\n      while (postings[right].term.compareTo(partition) > 0)\n        --right;\n\n      while (left < right && postings[left].term.compareTo(partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#quickSort(Posting[],int,int).mjava","sourceNew":null,"sourceOld":"  private static final void quickSort(Posting[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n\n    int mid = (lo + hi) >>> 1;\n\n    if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n      Posting tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (postings[mid].term.compareTo(postings[hi].term) > 0) {\n      Posting tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (postings[lo].term.compareTo(postings[mid].term) > 0) {\n        Posting tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    Term partition = postings[mid].term;\n\n    for (; ;) {\n      while (postings[right].term.compareTo(partition) > 0)\n        --right;\n\n      while (left < right && postings[left].term.compareTo(partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        Posting tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290ddf70ef4230015d4b5ff6758c630a466d757c":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}