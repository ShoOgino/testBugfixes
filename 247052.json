{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#stringToPath(String).mjava","commits":[{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#stringToPath(String).mjava","sourceNew":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#stringToPath(String).mjava","sourceNew":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}