{"path":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","commits":[{"id":"c8f9fd570bc31c72df35ff9374f45131e8e74d0c","date":1415015820,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyParamSet(SolrConfig,PluginInfo).mjava","sourceNew":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);\n      for (InitParams initParam : ags) {\n        initParam.apply(info.initArgs);\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private PluginInfo applyParamSet(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values()) {\n      if(args.matchPath(info.name)) ags.add(args);\n    }\n    if(!ags.isEmpty()){\n      info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);\n      for (InitParams args : ags) {\n        args.apply(info.initArgs);\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8c61a314df19c300ce6ea1e4ab945374980883","date":1416415639,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","sourceNew":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);\n      for (InitParams initParam : ags) {\n        initParam.apply(info);\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);\n      for (InitParams initParam : ags) {\n        initParam.apply(info.initArgs);\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9bd61f133870fb7f5098ae91eeda31b729d446","date":1418891132,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","sourceNew":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = info.copy();\n      for (InitParams initParam : ags) {\n        initParam.apply(info);\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);\n      for (InitParams initParam : ags) {\n        initParam.apply(info);\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#applyInitParams(SolrConfig,PluginInfo).mjava","sourceNew":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info);\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = info.copy();\n      for (InitParams initParam : ags) {\n        initParam.apply(info);\n      }\n    }\n    return info;\n  }\n\n","sourceOld":"  private PluginInfo applyInitParams(SolrConfig config, PluginInfo info) {\n    List<InitParams> ags = new ArrayList<>();\n    String p = info.attributes.get(InitParams.TYPE);\n    if(p!=null) {\n      for (String arg : StrUtils.splitSmart(p, ',')) {\n        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));\n        else log.warn(\"INVALID paramSet {} in requestHandler {}\", arg, info.toString());\n      }\n    }\n    for (InitParams args : config.getInitParams().values())\n      if(args.matchPath(info.name)) ags.add(args);\n    if(!ags.isEmpty()){\n      info = info.copy();\n      for (InitParams initParam : ags) {\n        initParam.apply(info);\n      }\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"140be51d03394488536f4aacedace29f9b318347":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["140be51d03394488536f4aacedace29f9b318347"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}