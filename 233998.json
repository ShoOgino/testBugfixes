{"path":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#largeEstimator(int,int,double).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#largeEstimator(int,int,double).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The \"large range correction\" formula from the HyperLogLog algorithm, adapted\n     * for 64 bit hashes. Only appropriate for estimators whose value exceeds\n     * the return of {@link #largeEstimatorCutoff(int, int)}.\n     *\n     * @param  log2m log-base-2 of the number of registers in the HLL. <em>b<em> in the paper.\n     * @param  registerSizeInBits the size of the HLL registers, in bits.\n     * @param  estimator the original estimator (\"E\" in the paper).\n     * @return a corrected cardinality estimate.\n     * @see \"<a href='http://research.neustar.biz/2013/01/24/hyperloglog-googles-take-on-engineering-hll/'>Blog post with section on 64 bit hashes and 'large range correction'</a>\"\n     */\n    public static double largeEstimator(final int log2m, final int registerSizeInBits, final double estimator) {\n        final double twoToL = TWO_TO_L[(REG_WIDTH_INDEX_MULTIPLIER * registerSizeInBits) + log2m];\n        return -1 * twoToL * Math.log(1.0 - (estimator/twoToL));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#largeEstimator(int,int,double).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The \"large range correction\" formula from the HyperLogLog algorithm, adapted\n     * for 64 bit hashes. Only appropriate for estimators whose value exceeds\n     * the return of {@link #largeEstimatorCutoff(int, int)}.\n     *\n     * @param  log2m log-base-2 of the number of registers in the HLL. <em>b<em> in the paper.\n     * @param  registerSizeInBits the size of the HLL registers, in bits.\n     * @param  estimator the original estimator (\"E\" in the paper).\n     * @return a corrected cardinality estimate.\n     * @see \"<a href='http://research.neustar.biz/2013/01/24/hyperloglog-googles-take-on-engineering-hll/'>Blog post with section on 64 bit hashes and 'large range correction'</a>\"\n     */\n    public static double largeEstimator(final int log2m, final int registerSizeInBits, final double estimator) {\n        final double twoToL = TWO_TO_L[(REG_WIDTH_INDEX_MULTIPLIER * registerSizeInBits) + log2m];\n        return -1 * twoToL * Math.log(1.0 - (estimator/twoToL));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}