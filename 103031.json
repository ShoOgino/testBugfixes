{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","commits":[{"id":"ceda6e120988250de73c77f0144d2b2a3f42e39f","date":1063198717,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"/dev/null","sourceNew":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n          // add 100 documents\n          for (i = 0; i < 100; i++) {\n              addDoc(writer);\n          }\n          assertEquals(100, writer.docCount());\n          writer.close();\n\n          // delete 50 documents\n          reader = IndexReader.open(dir);\n          for (i = 0; i < 50; i++) {\n              reader.delete(i);\n          }\n          reader.close();\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n          assertEquals(50, writer.docCount());\n          writer.optimize();\n          assertEquals(50, writer.docCount());\n          writer.close();\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"805bde9f9a2567c4cf0110aea5e44a6bc08ca719","date":1063629187,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 50 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 50; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(50, reader.numDocs());\n            reader.close();\n\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(50, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(50, reader.maxDoc());\n            assertEquals(50, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","sourceOld":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n          // add 100 documents\n          for (i = 0; i < 100; i++) {\n              addDoc(writer);\n          }\n          assertEquals(100, writer.docCount());\n          writer.close();\n\n          // delete 50 documents\n          reader = IndexReader.open(dir);\n          for (i = 0; i < 50; i++) {\n              reader.delete(i);\n          }\n          reader.close();\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n          assertEquals(50, writer.docCount());\n          writer.optimize();\n          assertEquals(50, writer.docCount());\n          writer.close();\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 40 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 40; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            // test doc count before segments are merged/index is optimized\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n\n            // optimize the index and check that the new doc count is correct\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(60, writer.docCount());\n            writer.close();\n\n            // check that the index reader gives the same numbers.\n            reader = IndexReader.open(dir);\n            assertEquals(60, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","sourceOld":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 50 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 50; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(50, reader.numDocs());\n            reader.close();\n\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(50, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(50, reader.maxDoc());\n            assertEquals(50, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.delete(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","sourceOld":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 40 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 40; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            // test doc count before segments are merged/index is optimized\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n\n            // optimize the index and check that the new doc count is correct\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(60, writer.docCount());\n            writer.close();\n\n            // check that the index reader gives the same numbers.\n            reader = IndexReader.open(dir);\n            assertEquals(60, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":["5a664b1395d4341b88e32d36297d7670f1a665ac","5a664b1395d4341b88e32d36297d7670f1a665ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.delete(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd49c7f07f6faacd67421990cbf4219d62582c4e","date":1151703989,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        IndexWriter.setDefaultCommitLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n        assertEquals(2000, IndexWriter.getDefaultCommitLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n        IndexWriter.setDefaultCommitLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        IndexWriter.setDefaultCommitLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n        assertEquals(2000, IndexWriter.getDefaultCommitLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n        IndexWriter.setDefaultCommitLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","bugFix":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        assertEquals(60, writer.docCount());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.docCount());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void xxxtestDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void xxxtestDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.docCount());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97effd701717136c340272d1ecc58546af0c8da","date":1266753142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        IndexWriter.setDefaultWriteLockTimeout(2000);\n        assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        IndexWriter.setDefaultWriteLockTimeout(1000);\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["f97effd701717136c340272d1ecc58546af0c8da"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["8b6187898fc4413ccd18229711786550a280383c"],"805bde9f9a2567c4cf0110aea5e44a6bc08ca719":["ceda6e120988250de73c77f0144d2b2a3f42e39f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["805bde9f9a2567c4cf0110aea5e44a6bc08ca719"],"8b6187898fc4413ccd18229711786550a280383c":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"bd49c7f07f6faacd67421990cbf4219d62582c4e":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["34e2c71b6406443562df54db233fde0728502f64"],"34e2c71b6406443562df54db233fde0728502f64":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"f97effd701717136c340272d1ecc58546af0c8da":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["bd49c7f07f6faacd67421990cbf4219d62582c4e"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ceda6e120988250de73c77f0144d2b2a3f42e39f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["8b6187898fc4413ccd18229711786550a280383c"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["34e2c71b6406443562df54db233fde0728502f64"],"805bde9f9a2567c4cf0110aea5e44a6bc08ca719":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceda6e120988250de73c77f0144d2b2a3f42e39f"],"1acbe60842541f8c38e2d60b03591478c9f91546":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"8b6187898fc4413ccd18229711786550a280383c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"87c966e9308847938a7c905c2e46a56d8df788b8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd49c7f07f6faacd67421990cbf4219d62582c4e":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"34e2c71b6406443562df54db233fde0728502f64":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["f97effd701717136c340272d1ecc58546af0c8da"],"f97effd701717136c340272d1ecc58546af0c8da":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["bd49c7f07f6faacd67421990cbf4219d62582c4e"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"ceda6e120988250de73c77f0144d2b2a3f42e39f":["805bde9f9a2567c4cf0110aea5e44a6bc08ca719"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}