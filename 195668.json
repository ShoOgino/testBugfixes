{"path":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","commits":[{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"411cb1cf92a234858e3d3d0ef541d0419a5f6982","date":1346670653,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34","date":1351548783,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") ||\n        threadName.startsWith(\"metrics-\") ||\n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa4edb64993bc5b128a0fcbeae7dae892a714e8a","date":1356623317,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") ||\n        threadName.startsWith(\"metrics-\") ||\n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") ||\n        threadName.startsWith(\"metrics-\") ||\n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n\n    if (threadName.startsWith(\"facetExecutor-\") || \n        threadName.startsWith(\"cmdDistribExecutor-\") ||\n        threadName.startsWith(\"httpShardExecutor-\")) {\n      return true;\n    }\n    \n    // This is a bug in ZooKeeper where they call System.exit(11) when\n    // this thread receives an interrupt signal.\n    if (threadName.startsWith(\"SyncThread\")) {\n      return true;\n    }\n\n    // THESE ARE LIKELY BUGS - these threads should be closed!\n    if (threadName.startsWith(\"Overseer-\") ||\n        threadName.startsWith(\"aliveCheckExecutor-\") ||\n        threadName.startsWith(\"concurrentUpdateScheduler-\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":["411cb1cf92a234858e3d3d0ef541d0419a5f6982","aa4edb64993bc5b128a0fcbeae7dae892a714e8a","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Log4j2-TF-2-AsyncLoggerConfig\")) {\n      return true;\n    }\n    \n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Log4j2-TF-2-AsyncLoggerConfig\")) {\n      return true;\n    }\n    \n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25cb5cbb09a5c3f10ef2c36e0992afa9a53b93","date":1594819407,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrIgnoredThreadsFilter#reject(Thread).mjava","sourceNew":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Log4j2-TF-2-AsyncLoggerConfig\")) {\n      return true;\n    }\n    \n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean reject(Thread t) {\n    /*\n     * IMPORTANT! IMPORTANT!\n     * \n     * Any threads added here should have ABSOLUTELY NO SIDE EFFECTS\n     * (should be stateless). This includes no references to cores or other\n     * test-dependent information.\n     */\n\n    String threadName = t.getName();\n    if (threadName.equals(TimerThread.THREAD_NAME)) {\n      return true;\n    }\n    \n    // due to netty - will stop on it's own\n    if (threadName.startsWith(\"globalEventExecutor\")) {\n      return true;\n    }\n    \n    // HttpClient Connection evictor threads can take a moment to wake and shutdown\n    if (threadName.startsWith(\"Connection evictor\")) {\n      return true;\n    }\n    \n    // These is a java pool for the collection stream api\n    if (threadName.startsWith(\"ForkJoinPool.\")) {\n      return true;\n    }\n    \n    if (threadName.startsWith(\"Image Fetcher\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34","aa4edb64993bc5b128a0fcbeae7dae892a714e8a"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["aa4edb64993bc5b128a0fcbeae7dae892a714e8a"],"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34":["411cb1cf92a234858e3d3d0ef541d0419a5f6982"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"aa4edb64993bc5b128a0fcbeae7dae892a714e8a":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25cb5cbb09a5c3f10ef2c36e0992afa9a53b93":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"411cb1cf92a234858e3d3d0ef541d0419a5f6982":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25cb5cbb09a5c3f10ef2c36e0992afa9a53b93"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aa4edb64993bc5b128a0fcbeae7dae892a714e8a"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aa4edb64993bc5b128a0fcbeae7dae892a714e8a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"df25cb5cbb09a5c3f10ef2c36e0992afa9a53b93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["df25cb5cbb09a5c3f10ef2c36e0992afa9a53b93"],"411cb1cf92a234858e3d3d0ef541d0419a5f6982":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","411cb1cf92a234858e3d3d0ef541d0419a5f6982","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}