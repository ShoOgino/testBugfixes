{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","commits":[{"id":"097495779e1cbcffe6097dfa0afe0bd40c03e418","date":1395231661,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","pathOld":"/dev/null","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.getDocCount());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.getDocCount());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.getDocCount());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.getDocCount());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.MergedDeletesAndUpdates#init(ReaderPool,MergePolicy.OneMerge,MergeState,boolean).mjava","sourceNew":null,"sourceOld":"    final void init(ReaderPool readerPool, MergePolicy.OneMerge merge, MergeState mergeState, boolean initWritableLiveDocs) throws IOException {\n      if (mergedDeletesAndUpdates == null) {\n        mergedDeletesAndUpdates = readerPool.get(merge.info, true);\n        docMap = merge.getDocMap(mergeState);\n        assert docMap.isConsistent(merge.info.info.maxDoc());\n      }\n      if (initWritableLiveDocs && !initializedWritableLiveDocs) {\n        mergedDeletesAndUpdates.initWritableLiveDocs();\n        this.initializedWritableLiveDocs = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["097495779e1cbcffe6097dfa0afe0bd40c03e418","b0267c69e2456a3477a1ad785723f2135da3117e"],"097495779e1cbcffe6097dfa0afe0bd40c03e418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["097495779e1cbcffe6097dfa0afe0bd40c03e418","b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["097495779e1cbcffe6097dfa0afe0bd40c03e418"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["b0267c69e2456a3477a1ad785723f2135da3117e","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["b0267c69e2456a3477a1ad785723f2135da3117e","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b0267c69e2456a3477a1ad785723f2135da3117e","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"097495779e1cbcffe6097dfa0afe0bd40c03e418":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","b06445ae1731e049327712db0454e5643ca9b7fe","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["097495779e1cbcffe6097dfa0afe0bd40c03e418"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}