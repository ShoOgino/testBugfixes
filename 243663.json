{"path":"lucene/src/test-framework/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,InputStream).mjava","commits":[{"id":"41f3c2b3d8212ea105d4303867902ef79d92be71","date":1313590755,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,InputStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/VocabularyAssert#assertVocabulary(Analyzer,InputStream).mjava","sourceNew":"  /** Run a vocabulary test against one file: tab separated. */\n  public static void assertVocabulary(Analyzer a, InputStream vocOut)\n  throws IOException {\n    BufferedReader vocReader = new BufferedReader(\n        new InputStreamReader(vocOut, \"UTF-8\"));\n    String inputLine = null;\n    while ((inputLine = vocReader.readLine()) != null) {\n      if (inputLine.startsWith(\"#\") || inputLine.trim().length() == 0)\n        continue; /* comment */\n      String words[] = inputLine.split(\"\\t\");\n      BaseTokenStreamTestCase.checkOneTermReuse(a, words[0], words[1]);\n    }\n  }\n\n","sourceOld":"  /** Run a vocabulary test against one file: tab separated. */\n  public static void assertVocabulary(Analyzer a, InputStream vocOut)\n  throws IOException {\n    BufferedReader vocReader = new BufferedReader(\n        new InputStreamReader(vocOut, \"UTF-8\"));\n    String inputLine = null;\n    while ((inputLine = vocReader.readLine()) != null) {\n      if (inputLine.startsWith(\"#\") || inputLine.trim().length() == 0)\n        continue; /* comment */\n      String words[] = inputLine.split(\"\\t\");\n      BaseTokenStreamTestCase.checkOneTermReuse(a, words[0], words[1]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,InputStream).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,InputStream).mjava","sourceNew":"  /** Run a vocabulary test against one file: tab separated. */\n  public static void assertVocabulary(Analyzer a, InputStream vocOut)\n  throws IOException {\n    BufferedReader vocReader = new BufferedReader(\n        new InputStreamReader(vocOut, \"UTF-8\"));\n    String inputLine = null;\n    while ((inputLine = vocReader.readLine()) != null) {\n      if (inputLine.startsWith(\"#\") || inputLine.trim().length() == 0)\n        continue; /* comment */\n      String words[] = inputLine.split(\"\\t\");\n      BaseTokenStreamTestCase.checkOneTermReuse(a, words[0], words[1]);\n    }\n  }\n\n","sourceOld":"  /** Run a vocabulary test against one file: tab separated. */\n  public static void assertVocabulary(Analyzer a, InputStream vocOut)\n  throws IOException {\n    BufferedReader vocReader = new BufferedReader(\n        new InputStreamReader(vocOut, \"UTF-8\"));\n    String inputLine = null;\n    while ((inputLine = vocReader.readLine()) != null) {\n      if (inputLine.startsWith(\"#\") || inputLine.trim().length() == 0)\n        continue; /* comment */\n      String words[] = inputLine.split(\"\\t\");\n      BaseTokenStreamTestCase.checkOneTermReuse(a, words[0], words[1]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41f3c2b3d8212ea105d4303867902ef79d92be71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["41f3c2b3d8212ea105d4303867902ef79d92be71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"41f3c2b3d8212ea105d4303867902ef79d92be71":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41f3c2b3d8212ea105d4303867902ef79d92be71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}