{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","commits":[{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the sourceText into an ANTLR 4 parse tree\n   *\n   * @return The ANTLR parse tree\n   * @throws ParseException on failure to parse\n   */\n  private ParseTree getAntlrParseTree() throws ParseException {\n    try {\n      final ANTLRInputStream antlrInputStream = new ANTLRInputStream(sourceText);\n      final JavascriptErrorHandlingLexer javascriptLexer = new JavascriptErrorHandlingLexer(antlrInputStream);\n      javascriptLexer.removeErrorListeners();\n      final JavascriptParser javascriptParser = new JavascriptParser(new CommonTokenStream(javascriptLexer));\n      javascriptParser.removeErrorListeners();\n      javascriptParser.setErrorHandler(new JavascriptParserErrorStrategy());\n      return javascriptParser.compile();\n    } catch (RuntimeException re) {\n      if (re.getCause() instanceof ParseException) {\n        throw (ParseException)re.getCause();\n      }\n      throw re;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d","date":1495118387,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","sourceNew":"  /**\n   * Parses the sourceText into an ANTLR 4 parse tree\n   *\n   * @return The ANTLR parse tree\n   * @throws ParseException on failure to parse\n   */\n  private ParseTree getAntlrParseTree() throws ParseException {\n    final ANTLRInputStream antlrInputStream = new ANTLRInputStream(sourceText);\n    final JavascriptErrorHandlingLexer javascriptLexer = new JavascriptErrorHandlingLexer(antlrInputStream);\n    javascriptLexer.removeErrorListeners();\n    final JavascriptParser javascriptParser = new JavascriptParser(new CommonTokenStream(javascriptLexer));\n    javascriptParser.removeErrorListeners();\n    javascriptParser.setErrorHandler(new JavascriptParserErrorStrategy());\n    return javascriptParser.compile();\n  }\n\n","sourceOld":"  /**\n   * Parses the sourceText into an ANTLR 4 parse tree\n   *\n   * @return The ANTLR parse tree\n   * @throws ParseException on failure to parse\n   */\n  private ParseTree getAntlrParseTree() throws ParseException {\n    try {\n      final ANTLRInputStream antlrInputStream = new ANTLRInputStream(sourceText);\n      final JavascriptErrorHandlingLexer javascriptLexer = new JavascriptErrorHandlingLexer(antlrInputStream);\n      javascriptLexer.removeErrorListeners();\n      final JavascriptParser javascriptParser = new JavascriptParser(new CommonTokenStream(javascriptLexer));\n      javascriptParser.removeErrorListeners();\n      javascriptParser.setErrorHandler(new JavascriptParserErrorStrategy());\n      return javascriptParser.compile();\n    } catch (RuntimeException re) {\n      if (re.getCause() instanceof ParseException) {\n        throw (ParseException)re.getCause();\n      }\n      throw re;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#getAntlrParseTree().mjava","sourceNew":"  /**\n   * Parses the sourceText into an ANTLR 4 parse tree\n   *\n   * @return The ANTLR parse tree\n   * @throws ParseException on failure to parse\n   */\n  private ParseTree getAntlrParseTree() throws ParseException {\n    final ANTLRInputStream antlrInputStream = new ANTLRInputStream(sourceText);\n    final JavascriptErrorHandlingLexer javascriptLexer = new JavascriptErrorHandlingLexer(antlrInputStream);\n    javascriptLexer.removeErrorListeners();\n    final JavascriptParser javascriptParser = new JavascriptParser(new CommonTokenStream(javascriptLexer));\n    javascriptParser.removeErrorListeners();\n    javascriptParser.setErrorHandler(new JavascriptParserErrorStrategy());\n    return javascriptParser.compile();\n  }\n\n","sourceOld":"  /**\n   * Parses the sourceText into an ANTLR 4 parse tree\n   *\n   * @return The ANTLR parse tree\n   * @throws ParseException on failure to parse\n   */\n  private ParseTree getAntlrParseTree() throws ParseException {\n    try {\n      final ANTLRInputStream antlrInputStream = new ANTLRInputStream(sourceText);\n      final JavascriptErrorHandlingLexer javascriptLexer = new JavascriptErrorHandlingLexer(antlrInputStream);\n      javascriptLexer.removeErrorListeners();\n      final JavascriptParser javascriptParser = new JavascriptParser(new CommonTokenStream(javascriptLexer));\n      javascriptParser.removeErrorListeners();\n      javascriptParser.setErrorHandler(new JavascriptParserErrorStrategy());\n      return javascriptParser.compile();\n    } catch (RuntimeException re) {\n      if (re.getCause() instanceof ParseException) {\n        throw (ParseException)re.getCause();\n      }\n      throw re;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["d23d4828afa583ebf35b4a541763af6206133458","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"d23d4828afa583ebf35b4a541763af6206133458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d23d4828afa583ebf35b4a541763af6206133458":["e9017cf144952056066919f1ebc7897ff9bd71b1","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d23d4828afa583ebf35b4a541763af6206133458"],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}