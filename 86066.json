{"path":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","sourceNew":"\t/* (non-Javadoc)\r\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\r\n\t */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n\t{\r\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe4180fe035aef61e1fb51d0361fb9bbe25bf611","date":1222875425,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\r\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\r\n\t */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n\t{\r\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\r\n\t */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n\t{\r\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"/* (non-Javadoc)\r\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\r\n\t */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n\t{\r\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"fe4180fe035aef61e1fb51d0361fb9bbe25bf611":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["fe4180fe035aef61e1fb51d0361fb9bbe25bf611"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe4180fe035aef61e1fb51d0361fb9bbe25bf611":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["fe4180fe035aef61e1fb51d0361fb9bbe25bf611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}