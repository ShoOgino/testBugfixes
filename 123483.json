{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","commits":[{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","pathOld":"/dev/null","sourceNew":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = MMapDirectory.open(tempDir)) {\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2acbf6861e46a166a572cf1642f2a487cc7cf2","date":1553174423,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","sourceNew":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","sourceOld":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = MMapDirectory.open(tempDir)) {\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","sourceNew":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test per field\n      Map<String, String> readerAttributes = new HashMap<>();\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.OFF_HEAP.name());\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY + \".field\", BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name());\n      try (DirectoryReader r = DirectoryReader.open(d, readerAttributes)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertTrue(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    IllegalArgumentException invalid = expectThrows(IllegalArgumentException.class, () -> {\n      try (Directory d = new SimpleFSDirectory(tempDir)) {\n        Map<String, String> readerAttributes = new HashMap<>();\n        readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, \"invalid\");\n        DirectoryReader.open(d, readerAttributes);\n      }\n    });\n\n    assertEquals(\"Invalid value for blocktree.terms.fst expected one of: [OFF_HEAP, ON_HEAP, OPTIMIZE_UPDATES_OFF_HEAP, AUTO] but was: invalid\", invalid.getMessage());\n  }\n\n","sourceOld":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","sourceNew":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test per field\n      Map<String, String> readerAttributes = new HashMap<>();\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.OFF_HEAP.name());\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY + \".field\", BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name());\n      try (DirectoryReader r = DirectoryReader.open(d, readerAttributes)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertTrue(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    IllegalArgumentException invalid = expectThrows(IllegalArgumentException.class, () -> {\n      try (Directory d = new SimpleFSDirectory(tempDir)) {\n        Map<String, String> readerAttributes = new HashMap<>();\n        readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, \"invalid\");\n        DirectoryReader.open(d, readerAttributes);\n      }\n    });\n\n    assertEquals(\"Invalid value for blocktree.terms.fst expected one of: [OFF_HEAP, ON_HEAP, OPTIMIZE_UPDATES_OFF_HEAP, AUTO] but was: invalid\", invalid.getMessage());\n  }\n\n","sourceOld":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test per field\n      Map<String, String> readerAttributes = new HashMap<>();\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.OFF_HEAP.name());\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY + \".field\", BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name());\n      try (DirectoryReader r = DirectoryReader.open(d, readerAttributes)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertTrue(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    IllegalArgumentException invalid = expectThrows(IllegalArgumentException.class, () -> {\n      try (Directory d = new SimpleFSDirectory(tempDir)) {\n        Map<String, String> readerAttributes = new HashMap<>();\n        readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, \"invalid\");\n        DirectoryReader.open(d, readerAttributes);\n      }\n    });\n\n    assertEquals(\"Invalid value for blocktree.terms.fst expected one of: [OFF_HEAP, ON_HEAP, OPTIMIZE_UPDATES_OFF_HEAP, AUTO] but was: invalid\", invalid.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene84/TestLucene84PostingsFormat#testFstOffHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testFstOffHeap().mjava","sourceNew":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test per field\n      Map<String, String> readerAttributes = new HashMap<>();\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.OFF_HEAP.name());\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY + \".field\", BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name());\n      try (DirectoryReader r = DirectoryReader.open(d, readerAttributes)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertTrue(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    IllegalArgumentException invalid = expectThrows(IllegalArgumentException.class, () -> {\n      try (Directory d = new SimpleFSDirectory(tempDir)) {\n        Map<String, String> readerAttributes = new HashMap<>();\n        readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, \"invalid\");\n        DirectoryReader.open(d, readerAttributes);\n      }\n    });\n\n    assertEquals(\"Invalid value for blocktree.terms.fst expected one of: [OFF_HEAP, ON_HEAP, OPTIMIZE_UPDATES_OFF_HEAP, AUTO] but was: invalid\", invalid.getMessage());\n  }\n\n","sourceOld":"  public void testFstOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = FSDirectory.open(tempDir)) {\n      assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())))) {\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertTrue(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n\n        w.forceMerge(1);\n        try (DirectoryReader r = DirectoryReader.open(w)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertFalse(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n        w.commit();\n        try (DirectoryReader r = DirectoryReader.open(d)) {\n          assertEquals(1, r.leaves().size());\n          FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n          FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n          assertTrue(id.isFstOffHeap());\n          assertTrue(field.isFstOffHeap());\n        }\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test auto\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    try (Directory d = new SimpleFSDirectory(tempDir)) {\n      // test per field\n      Map<String, String> readerAttributes = new HashMap<>();\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.OFF_HEAP.name());\n      readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY + \".field\", BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name());\n      try (DirectoryReader r = DirectoryReader.open(d, readerAttributes)) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertTrue(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n\n    IllegalArgumentException invalid = expectThrows(IllegalArgumentException.class, () -> {\n      try (Directory d = new SimpleFSDirectory(tempDir)) {\n        Map<String, String> readerAttributes = new HashMap<>();\n        readerAttributes.put(BlockTreeTermsReader.FST_MODE_KEY, \"invalid\");\n        DirectoryReader.open(d, readerAttributes);\n      }\n    });\n\n    assertEquals(\"Invalid value for blocktree.terms.fst expected one of: [OFF_HEAP, ON_HEAP, OPTIMIZE_UPDATES_OFF_HEAP, AUTO] but was: invalid\", invalid.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["1a2acbf6861e46a166a572cf1642f2a487cc7cf2"],"1a2acbf6861e46a166a572cf1642f2a487cc7cf2":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["1a2acbf6861e46a166a572cf1642f2a487cc7cf2"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"1a2acbf6861e46a166a572cf1642f2a487cc7cf2":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}