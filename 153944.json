{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   * @param args 0 and Even numbered args are params, Odd numbered args are XML escaped values.\n   */\n  private static String delete(String val, String... args) {\n    try {\n      StringWriter r = new StringWriter();\n      XML.writeUnescapedXML(r, \"delete\", val, (Object[])args);\n      return r.getBuffer().toString();\n    } catch(IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":6,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#deleteById(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete by id xml string\n   * @param id ID that has not already been xml escaped\n   * @param args The attributes of the delete tag\n   */\n  public static String deleteById(String id, String... args) {\n    try {\n      StringWriter r = new StringWriter();\n      XML.writeXML(r, \"id\", id);\n      return delete(r.getBuffer().toString(), args);\n    } catch(IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":6,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#deleteByQuery(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":"  /**\n   * Generates a delete by query xml string\n   * @param q Query that has not already been xml escaped\n   * @param args The attributes of the delete tag\n   */\n  public static String deleteByQuery(String q, String... args) {\n    try {\n      StringWriter r = new StringWriter();\n      XML.writeXML(r, \"query\", q);\n      return delete(r.getBuffer().toString(), args);\n    } catch(IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#delete(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generates a delete xml string\n   * @param val text that has not already been xml escaped\n   */\n  private static String delete(String deltype, String val) {\n    try {\n      StringWriter r = new StringWriter();\n            \n      r.write(\"<delete>\");\n      XML.writeXML(r, deltype, val);\n      r.write(\"</delete>\");\n            \n      return r.getBuffer().toString();\n    } catch (IOException e) {\n      throw new RuntimeException\n        (\"this should never happen with a StringWriter\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","818d704eaaf0fba0561d0d2752832e1015053482"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"818d704eaaf0fba0561d0d2752832e1015053482":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818d704eaaf0fba0561d0d2752832e1015053482"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"818d704eaaf0fba0561d0d2752832e1015053482":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}