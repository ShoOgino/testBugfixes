{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fe35a54e036b5f516cb04b39f3eb96a55812376","date":1384725462,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  // nocommit remove\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8379b33539c0646537abdbac9e81ce3c3fd222e5","date":1384894522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n\n  public String toString(char delimiter) {\n    // nocommit\n    if (delimiter == '\\u001F') {\n      return DocumentBuilder.pathToString(components, length);\n    } else {\n      if (length == 0) return \"\";\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < length; i++) {\n        if (components[i].indexOf(delimiter) != -1) {\n          hasDelimiter(components[i], delimiter);\n        }\n        sb.append(components[i]).append(delimiter);\n      }\n      sb.setLength(sb.length() - 1); // remove last delimiter\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n  // nocommit remove\n  public String toString(char delimiter) {\n    if (length == 0) return \"\";\n    \n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < length; i++) {\n      if (components[i].indexOf(delimiter) != -1) {\n        hasDelimiter(components[i], delimiter);\n      }\n      sb.append(components[i]).append(delimiter);\n    }\n    sb.setLength(sb.length() - 1); // remove last delimiter\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","sourceNew":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n\n  public String toString(char delimiter) {\n    // nocommit\n    if (delimiter == '\\u001F') {\n      return FacetsConfig.pathToString(components, length);\n    } else {\n      if (length == 0) return \"\";\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < length; i++) {\n        if (components[i].indexOf(delimiter) != -1) {\n          hasDelimiter(components[i], delimiter);\n        }\n        sb.append(components[i]).append(delimiter);\n      }\n      sb.setLength(sb.length() - 1); // remove last delimiter\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n\n  public String toString(char delimiter) {\n    // nocommit\n    if (delimiter == '\\u001F') {\n      return DocumentBuilder.pathToString(components, length);\n    } else {\n      if (length == 0) return \"\";\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < length; i++) {\n        if (components[i].indexOf(delimiter) != -1) {\n          hasDelimiter(components[i], delimiter);\n        }\n        sb.append(components[i]).append(delimiter);\n      }\n      sb.setLength(sb.length() - 1); // remove last delimiter\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#toString(char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a string representation of the path, separating components with the\n   * given delimiter.\n   */\n\n  public String toString(char delimiter) {\n    // nocommit\n    if (delimiter == '\\u001F') {\n      return FacetsConfig.pathToString(components, length);\n    } else {\n      if (length == 0) return \"\";\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < length; i++) {\n        if (components[i].indexOf(delimiter) != -1) {\n          hasDelimiter(components[i], delimiter);\n        }\n        sb.append(components[i]).append(delimiter);\n      }\n      sb.setLength(sb.length() - 1); // remove last delimiter\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8379b33539c0646537abdbac9e81ce3c3fd222e5":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe9946d3cd818d329255e4c325597ac3480503e":["ae75def1e2525383b6e1397ed97c44387da9941c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["8379b33539c0646537abdbac9e81ce3c3fd222e5"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8379b33539c0646537abdbac9e81ce3c3fd222e5":["ae75def1e2525383b6e1397ed97c44387da9941c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["8379b33539c0646537abdbac9e81ce3c3fd222e5"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bbe9946d3cd818d329255e4c325597ac3480503e":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","bbe9946d3cd818d329255e4c325597ac3480503e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}