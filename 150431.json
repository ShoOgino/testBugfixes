{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimize our representation and our subqueries representations\r\n   * @param reader the IndexReader we query\r\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\r\n  public Query rewrite(IndexReader reader) throws IOException {\r\n    if (disjuncts.size() == 1) {\r\n      Query singleton = (Query) disjuncts.get(0);\r\n      Query result = singleton.rewrite(reader);\r\n      if (getBoost() != 1.0f) {\r\n        if (result == singleton) result = (Query)result.clone();\r\n        result.setBoost(getBoost() * result.getBoost());\r\n      }\r\n      return result;\r\n    }\r\n    DisjunctionMaxQuery clone = null;\r\n    for (int i = 0 ; i < disjuncts.size(); i++) {\r\n      Query clause = (Query) disjuncts.get(i);\r\n      Query rewrite = clause.rewrite(reader);\r\n      if (rewrite != clause) {\r\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\r\n        clone.disjuncts.set(i, rewrite);\r\n      }\r\n    }\r\n    if (clone != null) return clone;\r\n    else return this;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.size() == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < disjuncts.size(); i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\r\n   * @param reader the IndexReader we query\r\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\r\n  public Query rewrite(IndexReader reader) throws IOException {\r\n    if (disjuncts.size() == 1) {\r\n      Query singleton = (Query) disjuncts.get(0);\r\n      Query result = singleton.rewrite(reader);\r\n      if (getBoost() != 1.0f) {\r\n        if (result == singleton) result = (Query)result.clone();\r\n        result.setBoost(getBoost() * result.getBoost());\r\n      }\r\n      return result;\r\n    }\r\n    DisjunctionMaxQuery clone = null;\r\n    for (int i = 0 ; i < disjuncts.size(); i++) {\r\n      Query clause = (Query) disjuncts.get(i);\r\n      Query rewrite = clause.rewrite(reader);\r\n      if (rewrite != clause) {\r\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\r\n        clone.disjuncts.set(i, rewrite);\r\n      }\r\n    }\r\n    if (clone != null) return clone;\r\n    else return this;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (disjuncts.size() == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < disjuncts.size(); i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"580e487700caea83dbc40e39acb074ebde2818a4","date":1255719241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = (Query) disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = (Query) disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["052fac7830290bd38a04cddee1a121ee07656b56"],"580e487700caea83dbc40e39acb074ebde2818a4":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"052fac7830290bd38a04cddee1a121ee07656b56":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["580e487700caea83dbc40e39acb074ebde2818a4"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["580e487700caea83dbc40e39acb074ebde2818a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"580e487700caea83dbc40e39acb074ebde2818a4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2123bddbd65dea198cac380540636ce43a880403":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}