{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","commits":[{"id":"84e6840c8664c06adc970e9491e04a67505396ad","date":1435200346,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testCollapseSubConjunctions() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        System.out.println(\"cutting [\" + subSeqStart + \":\" + subSeqEnd + \") from iterators of size \" + iterators.size());\n        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"934df47315888190190246ec00b31eca01704132","date":1435201600,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","sourceNew":"  public void testCollapseSubConjunctions() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        System.out.println(\"cutting [\" + subSeqStart + \":\" + subSeqEnd + \") from iterators of size \" + iterators.size());\n        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f33f3feaa8138843f86ea31f1284b79c331f4a","date":1441788048,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        List<DocIdSetIterator> subIterators = iterators.subList(subSeqStart, subSeqEnd);\n        DocIdSetIterator subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = ConjunctionDISI.intersect(subIterators);\n        }\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["934df47315888190190246ec00b31eca01704132"],"934df47315888190190246ec00b31eca01704132":["84e6840c8664c06adc970e9491e04a67505396ad"],"84e6840c8664c06adc970e9491e04a67505396ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"]},"commit2Childs":{"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"934df47315888190190246ec00b31eca01704132":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"],"84e6840c8664c06adc970e9491e04a67505396ad":["934df47315888190190246ec00b31eca01704132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84e6840c8664c06adc970e9491e04a67505396ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}