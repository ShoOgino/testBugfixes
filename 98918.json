{"path":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NO, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NO, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          0, 0));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":["513c6554aff4f24598022d9cbb581c0e80867b1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"513c6554aff4f24598022d9cbb581c0e80867b1c","date":1452337997,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getDimensionCount(), fi.getDimensionNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          0, 0));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getDimensionCount(), fi.getDimensionNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDataDimensionCount(), fi.getPointIndexDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(LeafReader,String).mjava","sourceNew":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDimensionCount(), fi.getPointIndexDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(LeafReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), DocValuesType.NONE, -1, Collections.emptyMap(),\n                                          fi.getPointDataDimensionCount(), fi.getPointIndexDimensionCount(), fi.getPointNumBytes(), fi.isSoftDeletesField()));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["c9fb5f46e264daf5ba3860defe623a89d202dd87","05da2d758a6089e737cdfc230e57a51b472b94b6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["513c6554aff4f24598022d9cbb581c0e80867b1c"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f95ce1375367b92d411a06175eab3915fe93c6bc","79700663e164dece87bed4adfd3e28bab6cb1385"],"513c6554aff4f24598022d9cbb581c0e80867b1c":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["79700663e164dece87bed4adfd3e28bab6cb1385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"79700663e164dece87bed4adfd3e28bab6cb1385":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"299a2348fa24151d150182211b6208a38e5e3450":["f95ce1375367b92d411a06175eab3915fe93c6bc","79700663e164dece87bed4adfd3e28bab6cb1385"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"513c6554aff4f24598022d9cbb581c0e80867b1c":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["513c6554aff4f24598022d9cbb581c0e80867b1c"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ca792c26af46bd6c4a08d81117c60440cf6a7e3d","299a2348fa24151d150182211b6208a38e5e3450"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"299a2348fa24151d150182211b6208a38e5e3450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}