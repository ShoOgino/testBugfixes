{"path":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}