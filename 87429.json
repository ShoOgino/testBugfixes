{"path":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","sourceNew":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","sourceOld":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","sourceNew":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","sourceOld":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","sourceNew":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","sourceOld":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpFlagParsing().mjava","sourceNew":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      try (TermsComponent termsComponent = new TermsComponent()) {\n        int flags = termsComponent.resolveRegexpFlags(params);\n        int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n            | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n        assertEquals(expected, flags);\n      } catch (IOException e) {\n        fail(\"Error closing TermsComponent\");\n      }\n  }\n\n","sourceOld":"  @Test\n  public void testRegexpFlagParsing() {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\", \"literal\", \"comments\", \"multiline\", \"unix_lines\",\n              \"unicode_case\", \"dotall\", \"canon_eq\");\n      int flags = new TermsComponent().resolveRegexpFlags(params);\n      int expected = Pattern.CASE_INSENSITIVE | Pattern.LITERAL | Pattern.COMMENTS | Pattern.MULTILINE | Pattern.UNIX_LINES\n              | Pattern.UNICODE_CASE | Pattern.DOTALL | Pattern.CANON_EQ;\n      assertEquals(expected, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}