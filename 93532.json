{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","commits":[{"id":"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca","date":1359416803,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"003dc2cb64b06ce8caea28156505feb3c5059ba2","date":1359688932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = new BytesRef();\n        docValues.get(i, scratch);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31baa848edd05a659d7ca807d279817c6315783e","date":1406911965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsStoredFields(int,int).mjava","sourceNew":"  protected void doTestSortedVsStoredFields(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = new StoredField(\"stored\", new byte[0]);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedField.setBytesValue(buffer);\n      dvField.setBytesValue(buffer);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues docValues = r.getSortedDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        BytesRef binaryValue = r.document(i).getBinaryValue(\"stored\");\n        BytesRef scratch = docValues.get(i);\n        assertEquals(binaryValue, scratch);\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31baa848edd05a659d7ca807d279817c6315783e":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["31baa848edd05a659d7ca807d279817c6315783e"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"31baa848edd05a659d7ca807d279817c6315783e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["31baa848edd05a659d7ca807d279817c6315783e"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca":["003dc2cb64b06ce8caea28156505feb3c5059ba2"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}