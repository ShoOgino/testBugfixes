{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#close().mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#close().mjava","sourceNew":null,"sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f936b67ab4a872d22231aae4f63608e7f411071":["989d940c4bf402188f4f0ae13736836885227383"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["7f936b67ab4a872d22231aae4f63608e7f411071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f936b67ab4a872d22231aae4f63608e7f411071":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f936b67ab4a872d22231aae4f63608e7f411071","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}