{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random(), \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.getTopReaderContext().leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.shutdown();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.shutdown();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.shutdown();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.shutdown();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(AtomicReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    iters:\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          // random TV\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n            // This is an aborting exception, so writer is closed:\n            assertTrue(w.deleter.isClosed());\n            assertTrue(w.isClosed());\n            dir.close();\n            continue iters;\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    iters:\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          // random TV\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n            // This is an aborting exception, so writer is closed:\n            assertTrue(w.isDeleterClosed());\n            assertTrue(w.isClosed());\n            dir.close();\n            continue iters;\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    iters:\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newMockDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        dir.failOn(failure);\n        int numDocs = 10 + random().nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          // random TV\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n            // This is an aborting exception, so writer is closed:\n            assertTrue(w.deleter.isClosed());\n            assertTrue(w.isClosed());\n            dir.close();\n            continue iters;\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newTextField(random(), \"field\", \"a field\", Field.Store.YES);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random().nextInt(20) == 0) {\n            w.commit();\n            TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new TextField(\"field\", \"a field\", Field.Store.YES));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n        for(LeafReaderContext context : reader.leaves()) {\n          assertFalse(context.reader().getFieldInfos().hasVectors());\n        }\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4a8b14bc4241c302311422d5c6f7627f8febb86e"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c9fb5f46e264daf5ba3860defe623a89d202dd87","3384e6013a93e4d11b7d75388693f8d0388602bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d19974432be9aed28ee7dca73bdf01d139e763a9"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6613659748fe4411a7dcf85266e55db1f95f7315"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4a8b14bc4241c302311422d5c6f7627f8febb86e","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}