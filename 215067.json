{"path":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"/dev/null","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":null,"sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"/dev/null","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}