{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<SolrInputDocument>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<SolrInputDocument>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<SolrInputDocument>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + 6);\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + 6);\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + 6);\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws IOException {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrJXML().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n\n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n\n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n\n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n\n    docs.add(document1);\n    docs.add(document2);\n\n    Collections.shuffle(docs, random());\n    req.add(docs);\n\n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + 6);\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void testSolrJXML() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    \n    List<SolrInputDocument> docs = new ArrayList<>();\n    \n    SolrInputDocument document1 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"X\");\n        \n        ArrayList<SolrInputDocument> ch1 = new ArrayList<>(\n            Arrays.asList(new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"y\");\n              }\n            }, new SolrInputDocument() {\n              {\n                addField(\"id\", id());\n                addField(\"child_s\", \"z\");\n              }\n            }));\n        \n        Collections.shuffle(ch1, random());\n        addChildDocuments(ch1);\n      }\n    };\n    \n    SolrInputDocument document2 = new SolrInputDocument() {\n      {\n        final String id = id();\n        addField(\"id\", id);\n        addField(\"parent_s\", \"A\");\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"b\");\n          }\n        });\n        addChildDocument(new SolrInputDocument() {\n          {\n            addField(\"id\", id());\n            addField(\"child_s\", \"c\");\n          }\n        });\n      }\n    };\n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + 6);\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1a5eff758fefcac883606f32579ae501a14119":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb1a5eff758fefcac883606f32579ae501a14119","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}