{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"true\";\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"true\";\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"true\";\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"357888e0066ec9901a44897fac3332f4586834ba","date":1464198119,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"true\";\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"true\";\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4014209b24e71d602e579a316f994355596012","date":1465717267,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    \n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean(), anyBoolean(), anyInt());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":["6f26f74e4969851a019d28f10315cb1c77786f22","357888e0066ec9901a44897fac3332f4586834ba","f0a4eeff354e8081247783f424a8e5a0fe106633"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    \n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean(), anyBoolean(), anyInt());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollections()).thenReturn(collectionsSet);\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\")).thenReturn(\"true\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.contains(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(() -> {\n      log.info(\"SHARDHANDLER\");\n      return shardHandlerMock;\n    }).anyTimes();\n    \n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(() -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(() -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(() -> {\n      queue.remove(getCurrentArguments()[0]);\n      return null;\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(() -> {\n        // This works as long as this test does not use a\n        // webapp context with an underscore in it\n        return address.replaceAll(\"_\", \"/\");\n      }).anyTimes();\n      \n    }\n\n    zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\");\n    expectLastCall().andAnswer(() -> \"true\");\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(() -> 30000).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return collectionsSet.contains(key);\n    }).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      zkMap.put(key, null);\n      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n    \n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyObject(Watcher.class), anyBoolean(), anyBoolean(), anyInt());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return key;\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(() -> {\n      String key = (String) getCurrentArguments()[0];\n      return zkMap.containsKey(key);\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollections()).thenReturn(collectionsSet);\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\")).thenReturn(\"true\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.contains(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollections()).thenReturn(collectionsSet);\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\")).thenReturn(\"true\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.contains(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollections()).thenReturn(collectionsSet);\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"true\")).thenReturn(\"true\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.contains(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be96d8a30bc93529faa1e8ee22a48fbe6db12d11","date":1507229563,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781bec8380d3b76fa7ca27eceb50019c8c160e02","date":1507948397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any());\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(COLLECTION, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afdc19a9320c32e120924d845bddf5739ada329f","date":1539168557,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(COLLECTION, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any())).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n          zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          return null;\n        }\n    );\n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      zkMap.put(key, null);\n      handleCreateCollMessage(invocation.getArgument(1));\n      return key;\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkMap.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(stateManagerMock.hasData(anyString())).thenAnswer(invocation -> zkMap.containsKey(invocation.getArgument(0)));\n    when(stateManagerMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        if (!zkMap.containsKey(invocation.getArgument(0))) {\n          zkMap.put(invocation.getArgument(0), \"\");\n        }\n        return null;\n      }\n    }).when(stateManagerMock).makePath(anyString());\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = new VersionedData(0, invocation.getArgument(1), \"test\");\n        zkMap.put(invocation.getArgument(0), d);\n        return null;\n      }\n    }).when(stateManagerMock).createData(anyString(), any(byte[].class), any(CreateMode.class));\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        VersionedData d = (VersionedData)zkMap.get(invocation.getArgument(0));\n        if (d != null && d.getVersion() != (Integer)invocation.getArgument(2)) {\n          throw new BadVersionException(invocation.getArgument(2), invocation.getArgument(0));\n        }\n        int version = (Integer)invocation.getArgument(2) + 1;\n        zkMap.put(invocation.getArgument(0), new VersionedData(version, invocation.getArgument(1), \"test\"));\n        return null;\n      }\n    }).when(stateManagerMock).setData(anyString(), any(byte[].class), anyInt());\n    when(stateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> zkMap.get(invocation.getArgument(0)));\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkMap.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n\n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11","85212dad4ed576c7f7e6c165ee19e597b7b4efc8","651c3ddf5bc1266d9de0a972ec05e59d77099a4c","357888e0066ec9901a44897fac3332f4586834ba","707fc23d793376ed98be0bd2f100d32dd5a9c0df","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any())).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties()));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(zkStateReaderMock.getClusterProperty(\"legacyCloud\", \"false\")).thenReturn(\"false\");\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":["6f26f74e4969851a019d28f10315cb1c77786f22","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(Http2SolrClient.class))).thenReturn(shardHandlerMock);\n    when(shardHandlerFactoryMock.getShardHandler(any(HttpClient.class))).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    when(shardHandlerFactoryMock.getShardHandler()).thenReturn(shardHandlerMock);\n    when(workQueueMock.peekTopN(anyInt(), any(), anyLong())).thenAnswer(invocation -> {\n      Object result;\n      int count = 0;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n        count++;\n        if (count > 1) return null;\n      }\n\n      return Arrays.asList(result);\n    });\n\n    when(workQueueMock.getTailId()).thenAnswer(invocation -> {\n      Object result = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = queue.iterator();\n      while(iter.hasNext()) {\n        result = iter.next();\n      }\n      return result==null ? null : ((QueueEvent)result).getId();\n    });\n\n    when(workQueueMock.peek(true)).thenAnswer(invocation -> {\n      Object result;\n      while ((result = queue.peek()) == null) {\n        Thread.sleep(1000);\n      }\n      return result;\n    });\n\n    doAnswer(invocation -> {\n      queue.remove(invocation.getArgument(0));\n      return null;\n    }).when(workQueueMock).remove(any(QueueEvent.class));\n\n    when(workQueueMock.poll()).thenAnswer(invocation -> {\n      queue.poll();\n      return null;\n    });\n\n    when(zkStateReaderMock.getZkClient()).thenReturn(solrZkClientMock);\n    when(zkStateReaderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(zkStateReaderMock.getAutoScalingConfig()).thenReturn(autoScalingConfig);\n    when(zkStateReaderMock.getAliases()).thenReturn(Aliases.EMPTY);\n\n    when(clusterStateMock.getCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (!collectionsSet.containsKey(key)) return null;\n      DocCollection docCollection = collectionsSet.get(key).get();\n      Map<String, Map<String, Replica>> slices = new HashMap<>();\n      for (ZkNodeProps replica : replicas) {\n        if (!key.equals(replica.getStr(ZkStateReader.COLLECTION_PROP))) continue;\n\n        String slice = replica.getStr(ZkStateReader.SHARD_ID_PROP);\n        if (!slices.containsKey(slice)) slices.put(slice, new HashMap<>());\n        String replicaName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        slices.get(slice).put(replicaName, new Replica(replicaName, replica.getProperties(), docCollection.getName(), slice));\n      }\n\n      Map<String, Slice> slicesMap = new HashMap<>();\n      for (Map.Entry<String, Map<String, Replica>> entry : slices.entrySet()) {\n        slicesMap.put(entry.getKey(), new Slice(entry.getKey(), entry.getValue(), null,docCollection.getName()));\n      }\n\n      return docCollection.copyWithSlices(slicesMap);\n    });\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      when(zkStateReaderMock.getBaseUrlForNodeName(address)).thenAnswer(invocation -> address.replaceAll(\"_\", \"/\"));\n    }\n\n    when(solrZkClientMock.getZkClientTimeout()).thenReturn(30000);\n    \n    when(clusterStateMock.hasCollection(anyString())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return collectionsSet.containsKey(key);\n    });\n\n    when(clusterStateMock.getLiveNodes()).thenReturn(liveNodes);\n\n    when(solrZkClientMock.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n \n    when(solrZkClientMock.getData(anyString(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n        byte[] data = zkClientData.get(invocation.getArgument(0));\n        if (data == null || data.length == 0) {\n          return null;\n        }\n        return data;\n    });\n    \n    when(solrZkClientMock.create(any(), any(), any(), anyBoolean())).thenAnswer(invocation -> {\n      zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      return invocation.getArgument(0);\n    });\n\n    when(solrZkClientMock.exists(any(String.class), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      return zkClientData.containsKey(key);\n    });\n\n    when(overseerMock.getZkController()).thenReturn(zkControllerMock);\n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(overseerMock.getCoreContainer()).thenReturn(coreContainerMock);\n    when(coreContainerMock.getUpdateShardHandler()).thenReturn(updateShardHandlerMock);\n    when(updateShardHandlerMock.getDefaultHttpClient()).thenReturn(httpClientMock);\n    \n    when(zkControllerMock.getSolrCloudManager()).thenReturn(cloudDataProviderMock);\n    when(cloudDataProviderMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(clusterStateProviderMock.getClusterState()).thenReturn(clusterStateMock);\n    when(clusterStateProviderMock.getLiveNodes()).thenReturn(liveNodes);\n    when(clusterStateProviderMock.getClusterProperties()).thenReturn(Utils.makeMap(DEFAULTS, Utils.makeMap(CLUSTER, Utils.makeMap(USE_LEGACY_REPLICA_ASSIGNMENT, true))));\n    when(cloudDataProviderMock.getDistribStateManager()).thenReturn(stateManagerMock);\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    when(solrZkClientMock.exists(any(String.class), isNull(), anyBoolean())).thenAnswer(invocation -> {\n      String key = invocation.getArgument(0);\n      if (zkClientData.containsKey(key)) {\n        return new Stat();\n      } else {\n        return null;\n      }\n    });\n    \n    when(cloudManagerMock.getClusterStateProvider()).thenReturn(clusterStateProviderMock);\n    when(cloudManagerMock.getTimeSource()).thenReturn(new TimeSource.NanoTimeSource());\n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    \n    when(overseerMock.getSolrCloudManager()).thenReturn(cloudManagerMock);\n    \n    when(overseerMock.getStateUpdateQueue(any())).thenReturn(stateUpdateQueueMock);\n    when(overseerMock.getStateUpdateQueue()).thenReturn(stateUpdateQueueMock);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            try {\n              handleCreateCollMessage(invocation.getArgument(0));\n              stateUpdateQueueMock.offer(invocation.getArgument(0));\n            } catch (KeeperException e) {\n              throw new RuntimeException(e);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n            return null;\n          }}).when(overseerMock).offerStateUpdate(any());\n    \n    when(zkControllerMock.getZkClient()).thenReturn(solrZkClientMock);\n    \n    when(cloudManagerMock.getDistribStateManager()).thenReturn(distribStateManagerMock);\n    when(distribStateManagerMock.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    Mockito.doAnswer(\n      new Answer<Void>() {\n        public Void answer(InvocationOnMock invocation) {\n          System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n          if (invocation.getArgument(1) == null) {\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n          } else {\n            zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n          }\n       \n          return null;\n        }}).when(distribStateManagerMock).setData(anyString(), any(), anyInt());\n    \n    when(distribStateManagerMock.getData(anyString(), any())).thenAnswer(invocation -> {\n      byte[] data = zkClientData.get(invocation.getArgument(0));\n      if (data == null || data.length == 0) {\n        return null;\n      }\n      return new VersionedData(-1, data, CreateMode.PERSISTENT, \"\");\n        \n    });\n    \n    when(distribStateManagerMock.createData(any(), any(), any())).thenAnswer(invocation -> {\n      System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + invocation.getArgument(1));\n      if (invocation.getArgument(1) == null) {\n        zkClientData.put(invocation.getArgument(0), new byte[0]);\n      } else {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n      }\n      return null;\n    });\n    \n    when(distribStateManagerMock.hasData(anyString()))\n    .then(invocation -> zkClientData.containsKey(invocation.getArgument(0)) && zkClientData.get(invocation.getArgument(0)).length > 0);\n    \n    Mockito.doAnswer(\n        new Answer<Void>() {\n          public Void answer(InvocationOnMock invocation) {\n            System.out.println(\"set data: \" + invocation.getArgument(0) + \" \" + new byte[0]);\n            zkClientData.put(invocation.getArgument(0), new byte[0]);\n            return null;\n          }}).when(distribStateManagerMock).makePath(anyString());\n\n    zkClientData.put(\"/configs/myconfig\", new byte[1]);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","6681d02f2302c363be938426e68f8dfd090cc1bf"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["afdc19a9320c32e120924d845bddf5739ada329f"],"1e4014209b24e71d602e579a316f994355596012":["357888e0066ec9901a44897fac3332f4586834ba"],"0ad30c6a479e764150a3316e57263319775f1df2":["2209af2c265d2258ec4b29c8cc78622d36994a15","115923bc88e5b1dc4bef049b1ded8486723052ed"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["2209af2c265d2258ec4b29c8cc78622d36994a15","0ad30c6a479e764150a3316e57263319775f1df2"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["1e4014209b24e71d602e579a316f994355596012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a52341299179de5479672f7cf518bf4b173f34b3","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["560c18d71dad43d675158783c3840f8c80d6d39c"],"357888e0066ec9901a44897fac3332f4586834ba":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"3f504512a03d978990cbff30db0522b354e846db":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"83870855d82aba6819217abeff5a40779dbb28b4":["d470c8182e92b264680e34081b75e70a9f2b3c89","357888e0066ec9901a44897fac3332f4586834ba"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","1e4014209b24e71d602e579a316f994355596012"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"afdc19a9320c32e120924d845bddf5739ada329f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","115923bc88e5b1dc4bef049b1ded8486723052ed"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1e4014209b24e71d602e579a316f994355596012":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["357888e0066ec9901a44897fac3332f4586834ba","83870855d82aba6819217abeff5a40779dbb28b4"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["afdc19a9320c32e120924d845bddf5739ada329f"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"357888e0066ec9901a44897fac3332f4586834ba":["1e4014209b24e71d602e579a316f994355596012","83870855d82aba6819217abeff5a40779dbb28b4"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"28288370235ed02234a64753cdbf0c6ec096304a":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"afdc19a9320c32e120924d845bddf5739ada329f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","9856095f7afb5a607bf5e65077615ed91273508c","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}