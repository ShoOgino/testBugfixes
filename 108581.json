{"path":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","commits":[{"id":"f20bb72b0dfa147c6f1fcd7693102c63a2714eae","date":1303767270,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0663cc678850ea2c51151f9fd217342ea35b8568","date":1303828523,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21486a8058ee8d7503c7d7a5e55b6c3a218d0942","date":1303841712,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a405e749df166cf8c456ac9381f77f6c99a6270","date":1303842176,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f944ac3fe3f9d40d825177507fb381d2b106b3","date":1303868525,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["140c5f0a5d4f742f5ad240e4fde6e486b2608d0f","140c5f0a5d4f742f5ad240e4fde6e486b2608d0f","140c5f0a5d4f742f5ad240e4fde6e486b2608d0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestJoin#testJoin().mjava","pathOld":"solr/src/test/org/apache/solr/TestJoin#testJoin().mjava","sourceNew":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testJoin() throws Exception {\n    assertU(add(doc(\"id\", \"1\",\"name\", \"john\", \"title\", \"Director\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"2\",\"name\", \"mark\", \"title\", \"VP\", \"dept_s\",\"Marketing\")));\n    assertU(add(doc(\"id\", \"3\",\"name\", \"nancy\", \"title\", \"MTS\", \"dept_s\",\"Sales\")));\n    assertU(add(doc(\"id\", \"4\",\"name\", \"dave\", \"title\", \"MTS\", \"dept_s\",\"Support\", \"dept_s\",\"Engineering\")));\n    assertU(add(doc(\"id\", \"5\",\"name\", \"tina\", \"title\", \"VP\", \"dept_s\",\"Engineering\")));\n\n    assertU(add(doc(\"id\",\"10\", \"dept_id_s\", \"Engineering\", \"text\",\"These guys develop stuff\")));\n    assertU(add(doc(\"id\",\"11\", \"dept_id_s\", \"Marketing\", \"text\",\"These guys make you look good\")));\n    assertU(add(doc(\"id\",\"12\", \"dept_id_s\", \"Sales\", \"text\",\"These guys sell stuff\")));\n    assertU(add(doc(\"id\",\"13\", \"dept_id_s\", \"Support\", \"text\",\"These guys help customers\")));\n\n    assertU(commit());\n\n    // test debugging\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/debug/join/{!join from=dept_s to=dept_id_s}title:MTS=={'_MATCH_':'fromSetSize,toSetSize', 'fromSetSize':2, 'toSetSize':3}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n    // empty from\n    assertJQ(req(\"q\",\"{!join from=noexist_s to=dept_id_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // empty to\n    assertJQ(req(\"q\",\"{!join from=dept_s to=noexist_s}*:*\", \"fl\",\"id\")\n        ,\"/response=={'numFound':0,'start':0,'docs':[]}\"\n    );\n\n    // self join... return everyone with she same title as Dave\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    // find people that develop stuff\n    assertJQ(req(\"q\",\"{!join from=dept_id_s to=dept_s}text:develop\", \"fl\",\"id\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'1'},{'id':'4'},{'id':'5'}]}\"\n    );\n\n    // self join on multivalued text field\n    assertJQ(req(\"q\",\"{!join from=title to=title}name:dave\", \"fl\",\"id\")\n        ,\"/response=={'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'4'}]}\"\n    );\n\n    assertJQ(req(\"q\",\"{!join from=dept_s to=dept_id_s}title:MTS\", \"fl\",\"id\", \"debugQuery\",\"true\")\n        ,\"/response=={'numFound':3,'start':0,'docs':[{'id':'10'},{'id':'12'},{'id':'13'}]}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d5df8e07c035d62d982894b439322da40e0938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"7a405e749df166cf8c456ac9381f77f6c99a6270":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["f8f944ac3fe3f9d40d825177507fb381d2b106b3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"0663cc678850ea2c51151f9fd217342ea35b8568":["f20bb72b0dfa147c6f1fcd7693102c63a2714eae"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["0663cc678850ea2c51151f9fd217342ea35b8568"]},"commit2Childs":{"d4d5df8e07c035d62d982894b439322da40e0938":[],"7a405e749df166cf8c456ac9381f77f6c99a6270":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["0663cc678850ea2c51151f9fd217342ea35b8568"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"0663cc678850ea2c51151f9fd217342ea35b8568":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["d4d5df8e07c035d62d982894b439322da40e0938","c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d5df8e07c035d62d982894b439322da40e0938","f20bb72b0dfa147c6f1fcd7693102c63a2714eae","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}