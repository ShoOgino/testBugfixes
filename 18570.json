{"path":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#prepareLeafReaders(CompositeReader[],CompositeReader[]).mjava","commits":[{"id":"5f6279d779b4584858af04f499e8aac0ae132c29","date":1432729989,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#prepareLeafReaders(CompositeReader[],CompositeReader[]).mjava","pathOld":"/dev/null","sourceNew":"  private static LeafReader[] prepareLeafReaders(CompositeReader[] readers, CompositeReader[] storedFieldsReaders) throws IOException {\n    if (readers.length == 0) {\n      if (storedFieldsReaders.length > 0)\n        throw new IllegalArgumentException(\"There must be at least one main reader if storedFieldsReaders are used.\");\n      return new LeafReader[0];\n    } else {\n      final List<? extends LeafReaderContext> firstLeaves = readers[0].leaves();\n\n      // check compatibility:\n      final int maxDoc = readers[0].maxDoc(), noLeaves = firstLeaves.size();\n      final int[] leafMaxDoc = new int[noLeaves];\n      for (int i = 0; i < noLeaves; i++) {\n        final LeafReader r = firstLeaves.get(i).reader();\n        leafMaxDoc[i] = r.maxDoc();\n      }\n      validate(readers, maxDoc, leafMaxDoc);\n      validate(storedFieldsReaders, maxDoc, leafMaxDoc);\n\n      // flatten structure of each Composite to just LeafReader[]\n      // and combine parallel structure with ParallelLeafReaders:\n      final LeafReader[] wrappedLeaves = new LeafReader[noLeaves];\n      for (int i = 0; i < wrappedLeaves.length; i++) {\n        final LeafReader[] subs = new LeafReader[readers.length];\n        for (int j = 0; j < readers.length; j++) {\n          subs[j] = readers[j].leaves().get(i).reader();\n        }\n        final LeafReader[] storedSubs = new LeafReader[storedFieldsReaders.length];\n        for (int j = 0; j < storedFieldsReaders.length; j++) {\n          storedSubs[j] = storedFieldsReaders[j].leaves().get(i).reader();\n        }\n        // We pass true for closeSubs and we prevent touching of subreaders in doClose():\n        // By this the synthetic throw-away readers used here are completely invisible to ref-counting\n        wrappedLeaves[i] = new ParallelLeafReader(true, subs, storedSubs) {\n          @Override\n          protected void doClose() {}\n        };\n      }\n      return wrappedLeaves;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6279d779b4584858af04f499e8aac0ae132c29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6279d779b4584858af04f499e8aac0ae132c29"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6279d779b4584858af04f499e8aac0ae132c29"],"5f6279d779b4584858af04f499e8aac0ae132c29":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}