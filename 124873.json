{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    doSearching(\"\\\"piece of text that is very long\\\"\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n    \n    doSearching(\"\\\"been shot\\\"\");\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanFragmenter().mjava","sourceNew":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","sourceOld":"  public void testSimpleSpanFragmenter() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"piece\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"text\"), 2);\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"), 5);\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"), 6);\n    doSearching(phraseQuery);\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n  \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 5));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"been\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"shot\"));\n\n    doSearching(query);\n\n    maxNumFragmentsRequired = 2;\n    \n    scorer = new QueryScorer(query, FIELD_NAME);\n    highlighter = new Highlighter(this, scorer);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 20));\n\n      String result = highlighter.getBestFragments(tokenStream, text,\n          maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cf7efd82433f3f64684711c16edfd149db6af111":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["cf7efd82433f3f64684711c16edfd149db6af111","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}