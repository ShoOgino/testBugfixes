{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#sanityCheckIndividualShards().mjava","commits":[{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"/dev/null","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    assertEquals(\"This test assumes exactly 3 shards/clients\", 3, clients.size());\n    \n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    \n    List<PivotField>[] shardPivots = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardPivots[i] = clients.get(i).query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    for (int j = 7; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ZZZ\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"/dev/null","sourceNew":"  private void sanityCheckIndividualShards() throws Exception {\n    assertEquals(\"This test assumes exactly 3 shards/clients\", 3, clients.size());\n    \n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    \n    List<PivotField>[] shardPivots = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardPivots[i] = clients.get(i).query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    for (int j = 7; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ZZZ\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#sanityCheckIndividualShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#sanityCheckIndividualShards().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private void sanityCheckIndividualShards() throws Exception {\n    assertEquals(\"This test assumes exactly 3 shards/clients\", 3, clients.size());\n    \n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    \n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<PivotField>[] shardPivots = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardPivots[i] = clients.get(i).query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    for (int j = 7; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ZZZ\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n  }\n\n","sourceOld":"  private void sanityCheckIndividualShards() throws Exception {\n    assertEquals(\"This test assumes exactly 3 shards/clients\", 3, clients.size());\n    \n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    \n    List<PivotField>[] shardPivots = new List[clients.size()];\n    for (int i = 0; i < clients.size(); i++) {\n      shardPivots[i] = clients.get(i).query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    }\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    for (int j = 7; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ZZZ\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"]},"commit2Childs":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}