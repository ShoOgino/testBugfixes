{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(SolrClientCache,boolean,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(SolrClientCache,boolean,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a SolrReporter instance.\n   * @param solrClientCache client cache to use for constructing SolrClient instances.\n   * @param urlProvider what URL to send to.\n   * @param metricManager metric manager\n   * @param metrics metric specifications to report\n   * @param handler handler name to report to\n   * @param reporterId my reporter id\n   * @param rateUnit rate unit\n   * @param durationUnit duration unit\n   * @param params request parameters\n   * @param skipHistograms if true then don't send histogram metrics\n   * @param skipAggregateValues if true then don't send aggregate metrics' individual values\n   * @param cloudClient if true then use CloudSolrClient, plain HttpSolrClient otherwise.\n   * @param compact if true then use compact representation.\n   */\n  public SolrReporter(SolrClientCache solrClientCache, boolean closeClientCache,\n                      Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = solrClientCache;\n    this.closeClientCache = closeClientCache;\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: {}\", report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"]},"commit2Childs":{"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}