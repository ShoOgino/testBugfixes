{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    this.core = core;\n    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    // Make sure that the core is ZKAware\n    if (!core.getCoreContainer().isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Make sure that the core is using the CdcrUpdateLog implementation\n    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Solr instance is not configured with the cdcr update log.\");\n    }\n\n    // Find the registered path of the handler\n    path = null;\n    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {\n      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {\n        path = entry.getKey();\n        break;\n      }\n    }\n    if (path == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler is not registered with the current core.\");\n    }\n    if (!path.startsWith(\"/\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'\");\n    }\n\n    // Initialisation phase\n    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED\n    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.\n    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node\n    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored\n    // in zookeeper.\n\n    // Initialise the buffer state manager\n    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);\n    // Initialise the process state manager\n    processStateManager = new CdcrProcessStateManager(core);\n    // Initialise the leader state manager\n    leaderStateManager = new CdcrLeaderStateManager(core);\n\n    // Initialise the replicator states manager\n    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);\n    replicatorManager.setProcessStateManager(processStateManager);\n    replicatorManager.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the process and leader state\n    // may have been synchronised during the initialisation\n    replicatorManager.stateUpdate();\n\n    // Initialise the update log synchronizer\n    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);\n    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    updateLogSynchronizer.stateUpdate();\n\n    // Initialise the buffer manager\n    bufferManager = new CdcrBufferManager(core);\n    bufferManager.setLeaderStateManager(leaderStateManager);\n    bufferManager.setBufferStateManager(bufferStateManager);\n    // we need to inform it of a state event since the leader state\n    // may have been synchronised during the initialisation\n    bufferManager.stateUpdate();\n\n    // register the close hook\n    this.registerCloseHook(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}