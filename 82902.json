{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","date":1329921256,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          zkClient.delete(leaderSeqPath, -1, true);\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Fatal Error, SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n\n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success && anyoneElseActive()) {\n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        // System.out.println(\"I am leader go active\");\n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(boolean,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          cancelElection();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Fatal Error, SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n\n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success && anyoneElseActive()) {\n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        // System.out.println(\"I am leader go active\");\n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(weAreReplacement, startupCore);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          zkClient.delete(leaderSeqPath, -1, true);\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Fatal Error, SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames());\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n\n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success && anyoneElseActive()) {\n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        // System.out.println(\"I am leader go active\");\n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","sourceNew":null,"sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}