{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7","date":1378009921,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["56df73d43b6fc340f5332322862382c7e30f4368"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}