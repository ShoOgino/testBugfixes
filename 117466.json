{"path":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"/dev/null","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":null,"sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"/dev/null","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb86c78a8d2dd3274986efff7797f6d2ef52b5b9","date":1291404570,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":["043be52e4a637fdb0d38454fa788a92c1b48a036"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8c4bb144102e537495ae5b321f77a9898f7b0b8","date":1291834816,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["cb86c78a8d2dd3274986efff7797f6d2ef52b5b9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cb86c78a8d2dd3274986efff7797f6d2ef52b5b9":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","cb86c78a8d2dd3274986efff7797f6d2ef52b5b9"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["cb86c78a8d2dd3274986efff7797f6d2ef52b5b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["cb86c78a8d2dd3274986efff7797f6d2ef52b5b9"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":["1da8d55113b689b06716246649de6f62430f15c0","cb86c78a8d2dd3274986efff7797f6d2ef52b5b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cb86c78a8d2dd3274986efff7797f6d2ef52b5b9":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["cb86c78a8d2dd3274986efff7797f6d2ef52b5b9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","d8c4bb144102e537495ae5b321f77a9898f7b0b8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}