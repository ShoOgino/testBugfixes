{"path":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867c935d21f9b0e5740841f988a4919546dcb374","date":1322417002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","sourceNew":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","sourceOld":"  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","sourceNew":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","sourceOld":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["867c935d21f9b0e5740841f988a4919546dcb374"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867c935d21f9b0e5740841f988a4919546dcb374":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["867c935d21f9b0e5740841f988a4919546dcb374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"867c935d21f9b0e5740841f988a4919546dcb374":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}