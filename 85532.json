{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#HashJoinStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"926350ae128ddfe1eb7570ed50a036f6bd5c66a6","date":1447286925,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#HashJoinStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public HashJoinStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter hashStreamExpression = factory.getNamedOperand(expression, \"hashed\");\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d\",expression, streamExpressions.size()));\n    }\n\n    if(null == hashStreamExpression || !(hashStreamExpression.getParameter() instanceof StreamExpression)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'hashed' parameter containing the stream to hash but didn't find one\",expression));\n    }\n    \n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to hash on but didn't find one\",expression));\n    }\n    \n    String hashOnValue = ((StreamExpressionValue)onExpression.getParameter()).getValue();\n    String[] parts = hashOnValue.split(\",\");\n    List<String> hashOn = new ArrayList<String>(parts.length);\n    for(String part : parts){\n      hashOn.add(part.trim());\n    }\n    \n    init( factory.constructStream(streamExpressions.get(0)),\n          factory.constructStream((StreamExpression)hashStreamExpression.getParameter()),\n          hashOn\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}