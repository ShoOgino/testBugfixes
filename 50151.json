{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n          if (ZkStateReader.ACTIVE.equals(replicaState) || ZkStateReader.RECOVERING.equals(replicaState)) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3f5be45b5f54f240a9e1485e92e33a094299659","date":1405328334,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n          if (ZkStateReader.ACTIVE.equals(replicaState) || ZkStateReader.RECOVERING.equals(replicaState)) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","sourceOld":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n          if (ZkStateReader.ACTIVE.equals(replicaState) || ZkStateReader.RECOVERING.equals(replicaState)) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","sourceOld":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n          if (ZkStateReader.ACTIVE.equals(replicaState) || ZkStateReader.RECOVERING.equals(replicaState)) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getCollection(testCollectionName).getActiveSlices()) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","sourceOld":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","bugFix":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getCollection(testCollectionName).getActiveSlices()) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","sourceOld":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getActiveSlices(testCollectionName)) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"574b23492dfd71945e5c252e0527a138d216a9d3","date":1551961121,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#getActiveOrRecoveringReplicas(String,String).mjava","sourceNew":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getCollection(testCollectionName).getActiveSlices()) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }\n\n","sourceOld":"  protected List<Replica> getActiveOrRecoveringReplicas(String testCollectionName, String shardId) throws Exception {    \n    Map<String,Replica> activeReplicas = new HashMap<String,Replica>();    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    ClusterState cs = zkr.getClusterState();\n    assertNotNull(cs);\n    for (Slice shard : cs.getCollection(testCollectionName).getActiveSlices()) {\n      if (shard.getName().equals(shardId)) {\n        for (Replica replica : shard.getReplicas()) {\n          final Replica.State state = replica.getState();\n          if (state == Replica.State.ACTIVE || state == Replica.State.RECOVERING) {\n            activeReplicas.put(replica.getName(), replica);\n          }\n        }\n      }\n    }        \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(activeReplicas.values());\n    return replicas;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["b3f5be45b5f54f240a9e1485e92e33a094299659"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a219f1dcad1700e84807666bdbd2b573e8de7021","344b0840364d990b29b97467bfcc766ff8325d11"],"574b23492dfd71945e5c252e0527a138d216a9d3":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"b3f5be45b5f54f240a9e1485e92e33a094299659":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["574b23492dfd71945e5c252e0527a138d216a9d3"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"574b23492dfd71945e5c252e0527a138d216a9d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","574b23492dfd71945e5c252e0527a138d216a9d3"],"b3f5be45b5f54f240a9e1485e92e33a094299659":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["b3f5be45b5f54f240a9e1485e92e33a094299659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}