{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean,boolean).mjava","commits":[{"id":"97bd2b0da4beced82821b752b29576be986cf1ff","date":1387747012,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed, boolean registerInZk) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97bd2b0da4beced82821b752b29576be986cf1ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85032ab568b3f50eabd577aaa994ba197db93758":["97bd2b0da4beced82821b752b29576be986cf1ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85032ab568b3f50eabd577aaa994ba197db93758"]},"commit2Childs":{"97bd2b0da4beced82821b752b29576be986cf1ff":["85032ab568b3f50eabd577aaa994ba197db93758"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97bd2b0da4beced82821b752b29576be986cf1ff"],"85032ab568b3f50eabd577aaa994ba197db93758":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}