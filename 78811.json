{"path":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"474fa92aed8cacce49ad6ffb9ac6cd9142364dae","date":1275529604,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof ConstantScorePrefixQuery) {\n      ConstantScorePrefixQuery q = (ConstantScorePrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm();\n      String ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b76f6f82625f0e41eb3a5200a196efeecf36b1ec","date":1307107827,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.text(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      String lt = q.getLowerTerm().utf8ToString();\n      String ut = q.getUpperTerm().utf8ToString();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6764e5a1aec8fda8ad409b08c61622a2d3a21a88","date":1307627291,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8a181b2ac3ca090b11a2d4ce411832943e65d19","date":1307707503,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["474fa92aed8cacce49ad6ffb9ac6cd9142364dae"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","6764e5a1aec8fda8ad409b08c61622a2d3a21a88"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["6764e5a1aec8fda8ad409b08c61622a2d3a21a88","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["d619839baa8ce5503e496b94a9e42ad6f079293f","b76f6f82625f0e41eb3a5200a196efeecf36b1ec"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":["c715a0f99152be7566591f323c6c5a25725a1bcb","6764e5a1aec8fda8ad409b08c61622a2d3a21a88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["474fa92aed8cacce49ad6ffb9ac6cd9142364dae","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["3e492fb0f2bb0b4b47208286f9331ff55963c656","b76f6f82625f0e41eb3a5200a196efeecf36b1ec"],"474fa92aed8cacce49ad6ffb9ac6cd9142364dae":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b76f6f82625f0e41eb3a5200a196efeecf36b1ec":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6764e5a1aec8fda8ad409b08c61622a2d3a21a88"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6764e5a1aec8fda8ad409b08c61622a2d3a21a88":["b76f6f82625f0e41eb3a5200a196efeecf36b1ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["b8a181b2ac3ca090b11a2d4ce411832943e65d19"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"474fa92aed8cacce49ad6ffb9ac6cd9142364dae":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1da8d55113b689b06716246649de6f62430f15c0":["474fa92aed8cacce49ad6ffb9ac6cd9142364dae"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b76f6f82625f0e41eb3a5200a196efeecf36b1ec":["c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","6764e5a1aec8fda8ad409b08c61622a2d3a21a88"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","b76f6f82625f0e41eb3a5200a196efeecf36b1ec"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6764e5a1aec8fda8ad409b08c61622a2d3a21a88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","b8a181b2ac3ca090b11a2d4ce411832943e65d19","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8a181b2ac3ca090b11a2d4ce411832943e65d19","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}