{"path":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in its eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}