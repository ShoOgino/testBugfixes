{"path":"solr/solrj/src/java/org/apache/solr/common/LazySolrCluster#lazyCollectionsWithAlias(ZkStateReader).mjava","commits":[{"id":"48499be433b284c562fb2418fe7b858e1ac3b031","date":1597289664,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/LazySolrCluster#lazyCollectionsWithAlias(ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"    private SimpleMap<SolrCollection> lazyCollectionsWithAlias(ZkStateReader zkStateReader) {\n        return new SimpleMap<>() {\n            @Override\n            public SolrCollection get(String key) {\n                SolrCollection result = collections.get(key);\n                if (result != null) return result;\n                Aliases aliases = zkStateReader.getAliases();\n                List<String> aliasNames = aliases.resolveAliases(key);\n                if (aliasNames == null || aliasNames.isEmpty()) return null;\n                return _collection(aliasNames.get(0), null);\n            }\n\n            @Override\n            public void forEachEntry(BiConsumer<String, ? super SolrCollection> fun) {\n                collections.forEachEntry(fun);\n                Aliases aliases = zkStateReader.getAliases();\n                aliases.forEachAlias((s, colls) -> {\n                    if (colls == null || colls.isEmpty()) return;\n                    fun.accept(s, _collection(colls.get(0), null));\n                });\n\n            }\n\n            @Override\n            public int size() {\n                return collections.size() + zkStateReader.getAliases().size();\n            }\n        };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ca3f44a396c294398d81101e739d0f961d9a06","date":1597290785,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/LazySolrCluster#lazyCollectionsWithAlias(ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/LazySolrCluster#lazyCollectionsWithAlias(ZkStateReader).mjava","sourceNew":"    private SimpleMap<SolrCollection> lazyCollectionsWithAlias(ZkStateReader zkStateReader) {\n        return new SimpleMap<SolrCollection>() {\n            @Override\n            public SolrCollection get(String key) {\n                SolrCollection result = collections.get(key);\n                if (result != null) return result;\n                Aliases aliases = zkStateReader.getAliases();\n                List<String> aliasNames = aliases.resolveAliases(key);\n                if (aliasNames == null || aliasNames.isEmpty()) return null;\n                return _collection(aliasNames.get(0), null);\n            }\n\n            @Override\n            public void forEachEntry(BiConsumer<String, ? super SolrCollection> fun) {\n                collections.forEachEntry(fun);\n                Aliases aliases = zkStateReader.getAliases();\n                aliases.forEachAlias((s, colls) -> {\n                    if (colls == null || colls.isEmpty()) return;\n                    fun.accept(s, _collection(colls.get(0), null));\n                });\n\n            }\n\n            @Override\n            public int size() {\n                return collections.size() + zkStateReader.getAliases().size();\n            }\n        };\n    }\n\n","sourceOld":"    private SimpleMap<SolrCollection> lazyCollectionsWithAlias(ZkStateReader zkStateReader) {\n        return new SimpleMap<>() {\n            @Override\n            public SolrCollection get(String key) {\n                SolrCollection result = collections.get(key);\n                if (result != null) return result;\n                Aliases aliases = zkStateReader.getAliases();\n                List<String> aliasNames = aliases.resolveAliases(key);\n                if (aliasNames == null || aliasNames.isEmpty()) return null;\n                return _collection(aliasNames.get(0), null);\n            }\n\n            @Override\n            public void forEachEntry(BiConsumer<String, ? super SolrCollection> fun) {\n                collections.forEachEntry(fun);\n                Aliases aliases = zkStateReader.getAliases();\n                aliases.forEachAlias((s, colls) -> {\n                    if (colls == null || colls.isEmpty()) return;\n                    fun.accept(s, _collection(colls.get(0), null));\n                });\n\n            }\n\n            @Override\n            public int size() {\n                return collections.size() + zkStateReader.getAliases().size();\n            }\n        };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48499be433b284c562fb2418fe7b858e1ac3b031":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64ca3f44a396c294398d81101e739d0f961d9a06":["48499be433b284c562fb2418fe7b858e1ac3b031"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ca3f44a396c294398d81101e739d0f961d9a06"]},"commit2Childs":{"48499be433b284c562fb2418fe7b858e1ac3b031":["64ca3f44a396c294398d81101e739d0f961d9a06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48499be433b284c562fb2418fe7b858e1ac3b031"],"64ca3f44a396c294398d81101e739d0f961d9a06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}