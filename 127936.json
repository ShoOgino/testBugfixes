{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          @Override\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          @Override\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d81732702acdcf369ac1e8077a9d11a2559f67","date":1359801354,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          @Override\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb97a913498e2387924cb19fb8be9a95daf6f38a","date":1359823388,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#cleanMapping(ByteBuffer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to unmap the buffer, this method silently fails if no support\n   * for that in the JVM. On Windows, this leads to the fact,\n   * that mmapped files cannot be modified or deleted.\n   */\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n          @Override\n          public Object run() throws Exception {\n            final Method getCleanerMethod = buffer.getClass()\n              .getMethod(\"cleaner\");\n            getCleanerMethod.setAccessible(true);\n            final Object cleaner = getCleanerMethod.invoke(buffer);\n            if (cleaner != null) {\n              cleaner.getClass().getMethod(\"clean\")\n                .invoke(cleaner);\n            }\n            return null;\n          }\n        });\n      } catch (PrivilegedActionException e) {\n        final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n        ioe.initCause(e.getCause());\n        throw ioe;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","55d81732702acdcf369ac1e8077a9d11a2559f67"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55d81732702acdcf369ac1e8077a9d11a2559f67":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55d81732702acdcf369ac1e8077a9d11a2559f67"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["eb97a913498e2387924cb19fb8be9a95daf6f38a"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55d81732702acdcf369ac1e8077a9d11a2559f67":["eb97a913498e2387924cb19fb8be9a95daf6f38a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","55d81732702acdcf369ac1e8077a9d11a2559f67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eb97a913498e2387924cb19fb8be9a95daf6f38a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}