{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","commits":[{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#initFromReader(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initFromReader(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parentOrdinals[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2ae7e371df56ccde467b71db7e82066f05a5972","date":1363620258,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initParents(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initParents(IndexReader,int).mjava","sourceNew":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  // Read the parents of the new categories\n  private void initParents(IndexReader reader, int first) throws IOException {\n    if (reader.maxDoc() == first) {\n      return;\n    }\n    \n    // it's ok to use MultiFields because we only iterate on one posting list.\n    // breaking it to loop over the leaves() only complicates code for no\n    // apparent gain.\n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader, null,\n        Consts.FIELD_PAYLOADS, Consts.PAYLOAD_PARENT_BYTES_REF,\n        DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    // shouldn't really happen, if it does, something's wrong\n    if (positions == null || positions.advance(first) == DocIdSetIterator.NO_MORE_DOCS) {\n      throw new CorruptIndexException(\"Missing parent data for category \" + first);\n    }\n    \n    int num = reader.maxDoc();\n    for (int i = first; i < num; i++) {\n      if (positions.docID() == i) {\n        if (positions.freq() == 0) { // shouldn't happen\n          throw new CorruptIndexException(\"Missing parent data for category \" + i);\n        }\n        \n        parents[i] = positions.nextPosition();\n        \n        if (positions.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          if (i + 1 < num) {\n            throw new CorruptIndexException(\"Missing parent data for category \"+ (i + 1));\n          }\n          break;\n        }\n      } else { // this shouldn't happen\n        throw new CorruptIndexException(\"Missing parent data for category \" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2ae7e371df56ccde467b71db7e82066f05a5972"]},"commit2Childs":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["f2ae7e371df56ccde467b71db7e82066f05a5972","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}