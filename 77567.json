{"path":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldSize(FieldInfo,int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldSize(FieldInfo,int).mjava","pathOld":"/dev/null","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private void addFieldSize(FieldInfo fi, int numBytes) throws IOException {\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (numBytes>>>24);\n    sizebytes[1] = (byte) (numBytes>>>16);\n    sizebytes[2] = (byte) (numBytes>>> 8);\n    sizebytes[3] = (byte)  numBytes      ;\n    doc.add(new BinaryField(fi.name, sizebytes));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldSize(FieldInfo,int).mjava","sourceNew":null,"sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private void addFieldSize(FieldInfo fi, int numBytes) throws IOException {\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (numBytes>>>24);\n    sizebytes[1] = (byte) (numBytes>>>16);\n    sizebytes[2] = (byte) (numBytes>>> 8);\n    sizebytes[3] = (byte)  numBytes      ;\n    doc.add(new BinaryField(fi.name, sizebytes));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}