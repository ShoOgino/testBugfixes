{"path":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrate(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  private void migrate(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if(message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrate(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  private void migrate(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter))  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if(message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String sourceCollectionName = message.getStr(\"collection\");\n    String splitKey = message.getStr(\"split.key\");\n    String targetCollectionName = message.getStr(\"target.collection\");\n    int timeout = message.getInt(\"forward.timeout\", 10 * 60) * 1000;\n\n    DocCollection sourceCollection = clusterState.getCollection(sourceCollectionName);\n    if (sourceCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown source collection: \" + sourceCollectionName);\n    }\n    DocCollection targetCollection = clusterState.getCollection(targetCollectionName);\n    if (targetCollection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown target collection: \" + sourceCollectionName);\n    }\n    if (!(sourceCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source collection must use a compositeId router\");\n    }\n    if (!(targetCollection.getRouter() instanceof CompositeIdRouter)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target collection must use a compositeId router\");\n    }\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    CompositeIdRouter targetRouter = (CompositeIdRouter) targetCollection.getRouter();\n    Collection<Slice> sourceSlices = sourceRouter.getSearchSlicesSingle(splitKey, null, sourceCollection);\n    if (sourceSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in source collection: \" + sourceCollection + \"for given split.key: \" + splitKey);\n    }\n    Collection<Slice> targetSlices = targetRouter.getSearchSlicesSingle(splitKey, null, targetCollection);\n    if (targetSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No active slices available in target collection: \" + targetCollection + \"for given split.key: \" + splitKey);\n    }\n\n    String asyncId = null;\n    if (message.containsKey(ASYNC) && message.get(ASYNC) != null)\n      asyncId = message.getStr(ASYNC);\n\n    for (Slice sourceSlice : sourceSlices) {\n      for (Slice targetSlice : targetSlices) {\n        log.info(\"Migrating source shard: {} to target shard: {} for split.key = \" + splitKey, sourceSlice, targetSlice);\n        migrateKey(clusterState, sourceCollection, sourceSlice, targetCollection, targetSlice, splitKey,\n            timeout, results, asyncId, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}