{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","commits":[{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","pathOld":"/dev/null","sourceNew":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","pathOld":"/dev/null","sourceNew":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","pathOld":"/dev/null","sourceNew":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","sourceNew":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","sourceOld":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#getBoostrapStatus().mjava","sourceNew":null,"sourceOld":"    private BootstrapStatus getBoostrapStatus() throws InterruptedException {\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList response = sendCdcrCommand(client, CdcrParams.CdcrAction.BOOTSTRAP_STATUS);\n          String status = (String) response.get(RESPONSE_STATUS);\n          BootstrapStatus bootstrapStatus = BootstrapStatus.valueOf(status.toUpperCase(Locale.ROOT));\n          if (bootstrapStatus == BootstrapStatus.RUNNING) {\n            return BootstrapStatus.RUNNING;\n          } else if (bootstrapStatus == BootstrapStatus.COMPLETED) {\n            return BootstrapStatus.COMPLETED;\n          } else if (bootstrapStatus == BootstrapStatus.FAILED) {\n            return BootstrapStatus.FAILED;\n          } else if (bootstrapStatus == BootstrapStatus.NOTFOUND) {\n            log.warn(\"Bootstrap process was not found on target collection: {} shard: {}, leader: {}\", targetCollection, shard, leaderCoreUrl);\n            return BootstrapStatus.NOTFOUND;\n          } else if (bootstrapStatus == BootstrapStatus.CANCELLED) {\n            return BootstrapStatus.CANCELLED;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unknown status: \" + status + \" returned by BOOTSTRAP_STATUS command\");\n          }\n        }\n      } catch (Exception e) {\n        log.error(\"Exception during bootstrap status request\", e);\n        return BootstrapStatus.UNKNOWN;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}