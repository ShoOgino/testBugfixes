{"path":"solr/solrj/src/java/org/noggit/JSONParser#readNumber(int,boolean).mjava","commits":[{"id":"980f4ef5a16664be88d82c37e6af5c49a3d57c9c","date":1557969027,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/noggit/JSONParser#readNumber(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the long read... only significant if valstate==LONG after\n   * this call.  firstChar should be the first numeric digit read.\n   */\n  private long readNumber(int firstChar, boolean isNeg) throws IOException {\n    out.unsafeWrite(firstChar);   // unsafe OK since we know output is big enough\n    // We build up the number in the negative plane since it's larger (by one) than\n    // the positive plane.\n    long v = '0' - firstChar;\n    // can't overflow a long in 18 decimal digits (i.e. 17 additional after the first).\n    // we also need 22 additional to handle double so we'll handle in 2 separate loops.\n    int i;\n    for (i = 0; i < 17; i++) {\n      int ch = getChar();\n      // TODO: is this switch faster as an if-then-else?\n      switch (ch) {\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          v = v * 10 - (ch - '0');\n          out.unsafeWrite(ch);\n          continue;\n        case '.':\n          out.unsafeWrite('.');\n          valstate = readFrac(out, 22 - i);\n          return 0;\n        case 'e':\n        case 'E':\n          out.unsafeWrite(ch);\n          nstate = 0;\n          valstate = readExp(out, 22 - i);\n          return 0;\n        default:\n          // return the number, relying on nextEvent() to return an error\n          // for invalid chars following the number.\n          if (ch != -1) --start;   // push back last char if not EOF\n\n          valstate = LONG;\n          return isNeg ? v : -v;\n      }\n    }\n\n    // after this, we could overflow a long and need to do extra checking\n    boolean overflow = false;\n    long maxval = isNeg ? Long.MIN_VALUE : -Long.MAX_VALUE;\n\n    for (; i < 22; i++) {\n      int ch = getChar();\n      switch (ch) {\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          if (v < (0x8000000000000000L / 10)) overflow = true;  // can't multiply by 10 w/o overflowing\n          v *= 10;\n          int digit = ch - '0';\n          if (v < maxval + digit) overflow = true; // can't add digit w/o overflowing\n          v -= digit;\n          out.unsafeWrite(ch);\n          continue;\n        case '.':\n          out.unsafeWrite('.');\n          valstate = readFrac(out, 22 - i);\n          return 0;\n        case 'e':\n        case 'E':\n          out.unsafeWrite(ch);\n          nstate = 0;\n          valstate = readExp(out, 22 - i);\n          return 0;\n        default:\n          // return the number, relying on nextEvent() to return an error\n          // for invalid chars following the number.\n          if (ch != -1) --start;   // push back last char if not EOF\n\n          valstate = overflow ? BIGNUMBER : LONG;\n          return isNeg ? v : -v;\n      }\n    }\n\n\n    nstate = 0;\n    valstate = BIGNUMBER;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"]},"commit2Childs":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}