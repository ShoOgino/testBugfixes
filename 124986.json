{"path":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#getMinPackedValue(String).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#getMinPackedValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#getMinPackedValue(String).mjava","sourceNew":"  @Override\n  public byte[] getMinPackedValue(String fieldName) throws IOException {\n    byte[] result = null;\n    for(int i=0;i<subs.size();i++) {\n      byte[] minPackedValue = subs.get(i).getMinPackedValue(fieldName);\n      if (result == null) {\n        if (minPackedValue != null) {\n          result = minPackedValue.clone();\n        }\n      } else {\n        int numDims = subs.get(0).getNumDimensions(fieldName);\n        int bytesPerDim = subs.get(0).getBytesPerDimension(fieldName);\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (StringHelper.compare(bytesPerDim, minPackedValue, offset, result, offset) < 0) {\n            System.arraycopy(minPackedValue, offset, result, offset, bytesPerDim);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public byte[] getMinPackedValue(String fieldName) throws IOException {\n    byte[] result = null;\n    for(int i=0;i<subs.size();i++) {\n      byte[] minPackedValue = subs.get(i).getMinPackedValue(fieldName);\n      if (result == null) {\n        if (minPackedValue != null) {\n          result = minPackedValue.clone();\n        }\n      } else {\n        int numDims = subs.get(0).getNumDimensions(fieldName);\n        int bytesPerDim = subs.get(0).getBytesPerDimension(fieldName);\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (StringHelper.compare(bytesPerDim, minPackedValue, offset, result, offset) < 0) {\n            System.arraycopy(minPackedValue, offset, result, offset, bytesPerDim);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","date":1456957206,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#getMinPackedValue(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public byte[] getMinPackedValue(String fieldName) throws IOException {\n    byte[] result = null;\n    for(int i=0;i<subs.size();i++) {\n      byte[] minPackedValue = subs.get(i).getMinPackedValue(fieldName);\n      if (result == null) {\n        if (minPackedValue != null) {\n          result = minPackedValue.clone();\n        }\n      } else {\n        int numDims = subs.get(0).getNumDimensions(fieldName);\n        int bytesPerDim = subs.get(0).getBytesPerDimension(fieldName);\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (StringHelper.compare(bytesPerDim, minPackedValue, offset, result, offset) < 0) {\n            System.arraycopy(minPackedValue, offset, result, offset, bytesPerDim);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#getMinPackedValue(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public byte[] getMinPackedValue(String fieldName) throws IOException {\n    byte[] result = null;\n    for(int i=0;i<subs.size();i++) {\n      byte[] minPackedValue = subs.get(i).getMinPackedValue(fieldName);\n      if (result == null) {\n        if (minPackedValue != null) {\n          result = minPackedValue.clone();\n        }\n      } else {\n        int numDims = subs.get(0).getNumDimensions(fieldName);\n        int bytesPerDim = subs.get(0).getBytesPerDimension(fieldName);\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (StringHelper.compare(bytesPerDim, minPackedValue, offset, result, offset) < 0) {\n            System.arraycopy(minPackedValue, offset, result, offset, bytesPerDim);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#getMinPackedValue(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public byte[] getMinPackedValue(String fieldName) throws IOException {\n    byte[] result = null;\n    for(int i=0;i<subs.size();i++) {\n      byte[] minPackedValue = subs.get(i).getMinPackedValue(fieldName);\n      if (result == null) {\n        if (minPackedValue != null) {\n          result = minPackedValue.clone();\n        }\n      } else {\n        int numDims = subs.get(0).getNumDimensions(fieldName);\n        int bytesPerDim = subs.get(0).getBytesPerDimension(fieldName);\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (StringHelper.compare(bytesPerDim, minPackedValue, offset, result, offset) < 0) {\n            System.arraycopy(minPackedValue, offset, result, offset, bytesPerDim);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}