{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","commits":[{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[Policy.ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<Policy.ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<Policy.ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<Policy.ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98f11c416d30e556e0004a9a84960702d12d35b1":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}