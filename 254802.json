{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","commits":[{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {5});\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1656).getBytes());\n    pay2 = new Payload((\"pos: \" + 1657).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1670).getBytes());\n    pay2 = new Payload((\"pos: \" + 1671).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 1672).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7740a3e0858e88aaf6b09efe52e35c04a0d717f7","date":1286877329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {5});\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1656).getBytes());\n    pay2 = new Payload((\"pos: \" + 1657).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1670).getBytes());\n    pay2 = new Payload((\"pos: \" + 1671).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 1672).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {5});\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1656).getBytes());\n    pay2 = new Payload((\"pos: \" + 1657).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 1670).getBytes());\n    pay2 = new Payload((\"pos: \" + 1671).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 1672).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["498e168d849b4dbc097ac7b31f6db170d6f55725","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["498e168d849b4dbc097ac7b31f6db170d6f55725"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}