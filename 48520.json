{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"/dev/null","sourceNew":"/** Returns the first query if splitOnWhitespace=true or otherwise the entire produced query */\n  final public Query MultiTerm(String field, List<BooleanClause> clauses) throws ParseException {\n  Token text, whitespace, followingText;\n  Query firstQuery = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addClause(clauses, CONJ_NONE, MOD_NONE, firstQuery);\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      followingText = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(field, discardEscapeChar(followingText.image), false);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else { // build up the text to send to analysis\n        text.image += \" \" + followingText.image;\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addMultiTermClauses(clauses, firstQuery);\n    }\n    {if (true) return firstQuery;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"/dev/null","sourceNew":"/** Returns the first query if splitOnWhitespace=true or otherwise the entire produced query */\n  final public Query MultiTerm(String field, List<BooleanClause> clauses) throws ParseException {\n  Token text, whitespace, followingText;\n  Query firstQuery = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addClause(clauses, CONJ_NONE, MOD_NONE, firstQuery);\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      followingText = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(field, discardEscapeChar(followingText.image), false);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else { // build up the text to send to analysis\n        text.image += \" \" + followingText.image;\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addMultiTermClauses(clauses, firstQuery);\n    }\n    {if (true) return firstQuery;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","sourceNew":"/** Returns the first query if splitOnWhitespace=true or otherwise the entire produced query */\n  final public Query MultiTerm(String field, List<BooleanClause> clauses) throws ParseException {Token text, whitespace, followingText;\n  Query firstQuery = null;\n    text = jj_consume_token(TERM);\nif (splitOnWhitespace) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addClause(clauses, CONJ_NONE, MOD_NONE, firstQuery);\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      followingText = jj_consume_token(TERM);\nif (splitOnWhitespace) {\n        Query q = getFieldQuery(field, discardEscapeChar(followingText.image), false);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else { // build up the text to send to analysis\n        text.image += \" \" + followingText.image;\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\nif (splitOnWhitespace == false) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addMultiTermClauses(clauses, firstQuery);\n    }\n    {if (\"\" != null) return firstQuery;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"/** Returns the first query if splitOnWhitespace=true or otherwise the entire produced query */\n  final public Query MultiTerm(String field, List<BooleanClause> clauses) throws ParseException {\n  Token text, whitespace, followingText;\n  Query firstQuery = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addClause(clauses, CONJ_NONE, MOD_NONE, firstQuery);\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      followingText = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(field, discardEscapeChar(followingText.image), false);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else { // build up the text to send to analysis\n        text.image += \" \" + followingText.image;\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      firstQuery = getFieldQuery(field, discardEscapeChar(text.image), false);\n      addMultiTermClauses(clauses, firstQuery);\n    }\n    {if (true) return firstQuery;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["c4bf8c857cdf9b9be903cae84ef15985ad090a05","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}