{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING','FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7","date":1499927883,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING','FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"586e44d7060ae173c208852763edfcb4b86bb15d","date":1499930272,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING','FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(AutoScaling.EventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<TestEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d815fede7a7f5184fb54d235b3ecb95cadcf554c","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testListeners().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerL',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_triggerL',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire even after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    Thread.sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 5, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(4).stage);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, capturedEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    Thread.sleep(2000);\n\n    // check foo events\n    capturedEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + capturedEvents, capturedEvents);\n    assertEquals(\"foo events: \" + capturedEvents, 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, capturedEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n\n    // check bar events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", capturedEvents);\n    assertEquals(\"bar events\", 4, capturedEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(0).stage);\n    assertEquals(\"test\", capturedEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, capturedEvents.get(1).stage);\n    assertEquals(\"test\", capturedEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, capturedEvents.get(2).stage);\n    assertEquals(\"test1\", capturedEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, capturedEvents.get(3).stage);\n    assertEquals(\"test1\", capturedEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","d9ccfe45460d496c5e5e1b70396521dac842d966"],"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7":["c5fd294da67452cd8d116692194908de00eb5209"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"586e44d7060ae173c208852763edfcb4b86bb15d":["c5fd294da67452cd8d116692194908de00eb5209","fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","586e44d7060ae173c208852763edfcb4b86bb15d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"c5fd294da67452cd8d116692194908de00eb5209":["fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7","586e44d7060ae173c208852763edfcb4b86bb15d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c5fd294da67452cd8d116692194908de00eb5209","560c18d71dad43d675158783c3840f8c80d6d39c"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"586e44d7060ae173c208852763edfcb4b86bb15d":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["89948af0461fead48f44ba8fb7866f107ce83f22"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["586e44d7060ae173c208852763edfcb4b86bb15d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}