{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked26#decode(byte[],int,int[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 18) | (byte1 << 10) | (byte2 << 2) | (byte3 >>> 6);\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte3 & 63) << 20) | (byte4 << 12) | (byte5 << 4) | (byte6 >>> 4);\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        final int byte8 = blocks[blocksOffset++] & 0xFF;\n        final int byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte6 & 15) << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final int byte10 = blocks[blocksOffset++] & 0xFF;\n        final int byte11 = blocks[blocksOffset++] & 0xFF;\n        final int byte12 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 24) | (byte10 << 16) | (byte11 << 8) | byte12;\n        final int byte13 = blocks[blocksOffset++] & 0xFF;\n        final int byte14 = blocks[blocksOffset++] & 0xFF;\n        final int byte15 = blocks[blocksOffset++] & 0xFF;\n        final int byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte13 << 18) | (byte14 << 10) | (byte15 << 2) | (byte16 >>> 6);\n        final int byte17 = blocks[blocksOffset++] & 0xFF;\n        final int byte18 = blocks[blocksOffset++] & 0xFF;\n        final int byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 63) << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final int byte20 = blocks[blocksOffset++] & 0xFF;\n        final int byte21 = blocks[blocksOffset++] & 0xFF;\n        final int byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 22) | (byte20 << 14) | (byte21 << 6) | (byte22 >>> 2);\n        final int byte23 = blocks[blocksOffset++] & 0xFF;\n        final int byte24 = blocks[blocksOffset++] & 0xFF;\n        final int byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 3) << 24) | (byte23 << 16) | (byte24 << 8) | byte25;\n        final int byte26 = blocks[blocksOffset++] & 0xFF;\n        final int byte27 = blocks[blocksOffset++] & 0xFF;\n        final int byte28 = blocks[blocksOffset++] & 0xFF;\n        final int byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final int byte30 = blocks[blocksOffset++] & 0xFF;\n        final int byte31 = blocks[blocksOffset++] & 0xFF;\n        final int byte32 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 20) | (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);\n        final int byte33 = blocks[blocksOffset++] & 0xFF;\n        final int byte34 = blocks[blocksOffset++] & 0xFF;\n        final int byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte32 & 15) << 22) | (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);\n        final int byte36 = blocks[blocksOffset++] & 0xFF;\n        final int byte37 = blocks[blocksOffset++] & 0xFF;\n        final int byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte35 & 3) << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final int byte39 = blocks[blocksOffset++] & 0xFF;\n        final int byte40 = blocks[blocksOffset++] & 0xFF;\n        final int byte41 = blocks[blocksOffset++] & 0xFF;\n        final int byte42 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 18) | (byte40 << 10) | (byte41 << 2) | (byte42 >>> 6);\n        final int byte43 = blocks[blocksOffset++] & 0xFF;\n        final int byte44 = blocks[blocksOffset++] & 0xFF;\n        final int byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte42 & 63) << 20) | (byte43 << 12) | (byte44 << 4) | (byte45 >>> 4);\n        final int byte46 = blocks[blocksOffset++] & 0xFF;\n        final int byte47 = blocks[blocksOffset++] & 0xFF;\n        final int byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte45 & 15) << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final int byte49 = blocks[blocksOffset++] & 0xFF;\n        final int byte50 = blocks[blocksOffset++] & 0xFF;\n        final int byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 24) | (byte49 << 16) | (byte50 << 8) | byte51;\n        final int byte52 = blocks[blocksOffset++] & 0xFF;\n        final int byte53 = blocks[blocksOffset++] & 0xFF;\n        final int byte54 = blocks[blocksOffset++] & 0xFF;\n        final int byte55 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte52 << 18) | (byte53 << 10) | (byte54 << 2) | (byte55 >>> 6);\n        final int byte56 = blocks[blocksOffset++] & 0xFF;\n        final int byte57 = blocks[blocksOffset++] & 0xFF;\n        final int byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte55 & 63) << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final int byte59 = blocks[blocksOffset++] & 0xFF;\n        final int byte60 = blocks[blocksOffset++] & 0xFF;\n        final int byte61 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 22) | (byte59 << 14) | (byte60 << 6) | (byte61 >>> 2);\n        final int byte62 = blocks[blocksOffset++] & 0xFF;\n        final int byte63 = blocks[blocksOffset++] & 0xFF;\n        final int byte64 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte61 & 3) << 24) | (byte62 << 16) | (byte63 << 8) | byte64;\n        final int byte65 = blocks[blocksOffset++] & 0xFF;\n        final int byte66 = blocks[blocksOffset++] & 0xFF;\n        final int byte67 = blocks[blocksOffset++] & 0xFF;\n        final int byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final int byte69 = blocks[blocksOffset++] & 0xFF;\n        final int byte70 = blocks[blocksOffset++] & 0xFF;\n        final int byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);\n        final int byte72 = blocks[blocksOffset++] & 0xFF;\n        final int byte73 = blocks[blocksOffset++] & 0xFF;\n        final int byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 15) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final int byte75 = blocks[blocksOffset++] & 0xFF;\n        final int byte76 = blocks[blocksOffset++] & 0xFF;\n        final int byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final int byte78 = blocks[blocksOffset++] & 0xFF;\n        final int byte79 = blocks[blocksOffset++] & 0xFF;\n        final int byte80 = blocks[blocksOffset++] & 0xFF;\n        final int byte81 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 18) | (byte79 << 10) | (byte80 << 2) | (byte81 >>> 6);\n        final int byte82 = blocks[blocksOffset++] & 0xFF;\n        final int byte83 = blocks[blocksOffset++] & 0xFF;\n        final int byte84 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte81 & 63) << 20) | (byte82 << 12) | (byte83 << 4) | (byte84 >>> 4);\n        final int byte85 = blocks[blocksOffset++] & 0xFF;\n        final int byte86 = blocks[blocksOffset++] & 0xFF;\n        final int byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte84 & 15) << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final int byte88 = blocks[blocksOffset++] & 0xFF;\n        final int byte89 = blocks[blocksOffset++] & 0xFF;\n        final int byte90 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 24) | (byte88 << 16) | (byte89 << 8) | byte90;\n        final int byte91 = blocks[blocksOffset++] & 0xFF;\n        final int byte92 = blocks[blocksOffset++] & 0xFF;\n        final int byte93 = blocks[blocksOffset++] & 0xFF;\n        final int byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte91 << 18) | (byte92 << 10) | (byte93 << 2) | (byte94 >>> 6);\n        final int byte95 = blocks[blocksOffset++] & 0xFF;\n        final int byte96 = blocks[blocksOffset++] & 0xFF;\n        final int byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 63) << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final int byte98 = blocks[blocksOffset++] & 0xFF;\n        final int byte99 = blocks[blocksOffset++] & 0xFF;\n        final int byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 22) | (byte98 << 14) | (byte99 << 6) | (byte100 >>> 2);\n        final int byte101 = blocks[blocksOffset++] & 0xFF;\n        final int byte102 = blocks[blocksOffset++] & 0xFF;\n        final int byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 3) << 24) | (byte101 << 16) | (byte102 << 8) | byte103;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"]},"commit2Childs":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"001b25b42373b22a52f399dbf072f1224632e8e6":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}