{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","commits":[{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongProducer).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongProducer longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.next();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongProducer).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongProducer longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.next();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongProducer).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongProducer longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.next();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer).setMergePolicy(NoMergePolicy.INSTANCE);\n    CannedNormSimilarity sim = new CannedNormSimilarity(norms);\n    conf.setSimilarity(sim);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        // only empty fields may have 0 as a norm\n        indexedField.setStringValue(value == 0 ? \"\" : \"a\");\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    conf.setSimilarity(new CannedNormSimilarity(norms));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        indexedField.setStringValue(Long.toString(value));\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ba82c02d9f13363dbf9f2376d6be4faff0b5e130"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba82c02d9f13363dbf9f2376d6be4faff0b5e130","date":1551451674,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    CannedNormSimilarity sim = new CannedNormSimilarity(norms);\n    conf.setSimilarity(sim);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        // only empty fields may have 0 as a norm\n        indexedField.setStringValue(value == 0 ? \"\" : \"a\");\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer).setMergePolicy(NoMergePolicy.INSTANCE);\n    CannedNormSimilarity sim = new CannedNormSimilarity(norms);\n    conf.setSimilarity(sim);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        // only empty fields may have 0 as a norm\n        indexedField.setStringValue(value == 0 ? \"\" : \"a\");\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["622a708571e534680618b3c5e0c28ac539a47776"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#doTestNormsVersusDocValues(double,LongSupplier).mjava","sourceNew":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    CannedNormSimilarity sim = new CannedNormSimilarity(norms);\n    conf.setSimilarity(sim);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        // only empty fields may have 0 as a norm\n        indexedField.setStringValue(value == 0 ? \"\" : \"a\");\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = maybeWrapWithMergingReader(DirectoryReader.open(dir));\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = maybeWrapWithMergingReader(DirectoryReader.open(dir));\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNormsVersusDocValues(double density, LongSupplier longs) throws Exception {\n    int numDocs = atLeast(500);\n    final FixedBitSet docsWithField = new FixedBitSet(numDocs);\n    final int numDocsWithField = Math.max(1, (int) (density * numDocs));\n    if (numDocsWithField == numDocs) {\n      docsWithField.set(0, numDocs);\n    } else {\n      int i = 0;\n      while (i < numDocsWithField) {\n        int doc = random().nextInt(numDocs);\n        if (docsWithField.get(doc) == false) {\n          docsWithField.set(doc);\n          ++i;\n        }\n      }\n    }\n    long norms[] = new long[numDocsWithField];\n    for (int i = 0; i < numDocsWithField; i++) {\n      norms[i] = longs.getAsLong();\n    }\n    \n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    CannedNormSimilarity sim = new CannedNormSimilarity(norms);\n    conf.setSimilarity(sim);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new TextField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    for (int i = 0, j = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      if (docsWithField.get(i) == false) {\n        Document doc2 = new Document();\n        doc2.add(idField);\n        writer.addDocument(doc2);\n      } else {\n        long value = norms[j++];\n        dvField.setLongValue(value);\n        // only empty fields may have 0 as a norm\n        indexedField.setStringValue(value == 0 ? \"\" : \"a\");\n        writer.addDocument(doc);\n      }\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/20);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.commit();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // compare again\n    ir = DirectoryReader.open(dir);\n    checkNormsVsDocValues(ir);\n    \n    writer.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba82c02d9f13363dbf9f2376d6be4faff0b5e130":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["ba82c02d9f13363dbf9f2376d6be4faff0b5e130"],"622a708571e534680618b3c5e0c28ac539a47776":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"ba82c02d9f13363dbf9f2376d6be4faff0b5e130":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"622a708571e534680618b3c5e0c28ac539a47776":["ba82c02d9f13363dbf9f2376d6be4faff0b5e130"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}