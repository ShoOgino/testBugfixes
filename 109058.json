{"path":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","commits":[{"id":"fa271a738c74b4551a7a964f75cb5fc19f80dc79","date":1168391918,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"ad94625fb8d088209f46650c8097196fec67f00c":["be29e0e2cef1fd569147732e48caf8538790339b"],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"be29e0e2cef1fd569147732e48caf8538790339b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["be29e0e2cef1fd569147732e48caf8538790339b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}