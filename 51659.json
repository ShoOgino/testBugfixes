{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSimpleEqualScores1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSimpleEqualScores1().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSimpleEqualScores1().mjava","sourceNew":"  public void testSimpleEqualScores1() throws Exception {\n\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(0.0f);\n    q.add(tq(\"hed\",\"albino\"));\n    q.add(tq(\"hed\",\"elephant\"));\n    QueryUtils.check(q,s);\n\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n    try {\n      assertEquals(\"all docs should match \" + q.toString(),\n          4, h.length);\n\n      float score = h[0].score;\n      for (int i = 1; i < h.length; i++) {\n        assertEquals(\"score #\" + i + \" is not the same\",\n            score, h[i].score, SCORE_COMP_THRESH);\n      }\n    } catch (Error e) {\n      printHits(\"testSimpleEqualScores1\",h,s);\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  public void testSimpleEqualScores1() throws Exception {\n\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(0.0f);\n    q.add(tq(\"hed\",\"albino\"));\n    q.add(tq(\"hed\",\"elephant\"));\n    QueryUtils.check(q,s);\n\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n    try {\n      assertEquals(\"all docs should match \" + q.toString(),\n          4, h.length);\n\n      float score = h[0].score;\n      for (int i = 1; i < h.length; i++) {\n        assertEquals(\"score #\" + i + \" is not the same\",\n            score, h[i].score, SCORE_COMP_THRESH);\n      }\n    } catch (Error e) {\n      printHits(\"testSimpleEqualScores1\",h,s);\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSimpleEqualScores1().mjava","sourceNew":null,"sourceOld":"  public void testSimpleEqualScores1() throws Exception {\n\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(0.0f);\n    q.add(tq(\"hed\",\"albino\"));\n    q.add(tq(\"hed\",\"elephant\"));\n    QueryUtils.check(q,s);\n\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n    try {\n      assertEquals(\"all docs should match \" + q.toString(),\n          4, h.length);\n\n      float score = h[0].score;\n      for (int i = 1; i < h.length; i++) {\n        assertEquals(\"score #\" + i + \" is not the same\",\n            score, h[i].score, SCORE_COMP_THRESH);\n      }\n    } catch (Error e) {\n      printHits(\"testSimpleEqualScores1\",h,s);\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}