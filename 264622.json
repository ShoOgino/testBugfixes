{"path":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","commits":[{"id":"a9f53fdbc82a7efa1329d4d258cd91da69061f70","date":1434146626,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(SHARD1));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\", e.getCause().getMessage().contains(\"shard1\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","sourceNew":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    cluster.stopJettySolrRunner(0);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(\"shard\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(SHARD1));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","sourceNew":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    cluster.stopJettySolrRunner(0);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(\"shard\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(SHARD1));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","sourceNew":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    cluster.stopJettySolrRunner(0);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    SolrServerException e = expectThrows(SolrServerException.class,\n        \"Request should have failed because we killed shard1 jetty\",\n        () -> cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1)\n            .setParam(ShardParams.SHARDS_TOLERANT, false))\n    );\n    assertNotNull(e.getCause());\n    assertTrue(\"Error message from server should have the name of the down shard\",\n        e.getCause().getMessage().contains(\"shard\"));\n  }\n\n","sourceOld":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    cluster.stopJettySolrRunner(0);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(\"shard\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","sourceNew":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    \n    cluster.waitForJettyToStop(stoppedServer);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    SolrServerException e = expectThrows(SolrServerException.class,\n        \"Request should have failed because we killed shard1 jetty\",\n        () -> cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1)\n            .setParam(ShardParams.SHARDS_TOLERANT, false))\n    );\n    assertNotNull(e.getCause());\n    assertTrue(\"Error message from server should have the name of the down shard\",\n        e.getCause().getMessage().contains(\"shard\"));\n  }\n\n","sourceOld":"  @Test\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"tolerant\", \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    UpdateRequest update = new UpdateRequest();\n    for (int i = 0; i < 100; i++) {\n      update.add(\"id\", Integer.toString(i));\n    }\n    update.commit(cluster.getSolrClient(), \"tolerant\");\n\n    QueryResponse response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(100L));\n\n    cluster.stopJettySolrRunner(0);\n\n    response = cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    SolrServerException e = expectThrows(SolrServerException.class,\n        \"Request should have failed because we killed shard1 jetty\",\n        () -> cluster.getSolrClient().query(\"tolerant\", new SolrQuery(\"*:*\").setRows(1)\n            .setParam(ShardParams.SHARDS_TOLERANT, false))\n    );\n    assertNotNull(e.getCause());\n    assertTrue(\"Error message from server should have the name of the down shard\",\n        e.getCause().getMessage().contains(\"shard\"));\n  }\n\n","bugFix":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["a9f53fdbc82a7efa1329d4d258cd91da69061f70"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a9f53fdbc82a7efa1329d4d258cd91da69061f70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a9f53fdbc82a7efa1329d4d258cd91da69061f70","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["92f789dbd1886e4b468e61b0def88b29a3f55228","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9f53fdbc82a7efa1329d4d258cd91da69061f70"],"a9f53fdbc82a7efa1329d4d258cd91da69061f70":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}