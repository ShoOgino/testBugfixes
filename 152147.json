{"path":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterTermsIndexReader().mjava","commits":[{"id":"63bd9fc2fe21ef7cc0b7400278061b50b8f91987","date":1542360740,"type":1,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterTermsIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterTermsIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.forceMerge(1);\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (infinite) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a really low timeout value (immediate) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, immediateQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, disabledQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bd9fc2fe21ef7cc0b7400278061b50b8f91987":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63bd9fc2fe21ef7cc0b7400278061b50b8f91987"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bd9fc2fe21ef7cc0b7400278061b50b8f91987"],"63bd9fc2fe21ef7cc0b7400278061b50b8f91987":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}