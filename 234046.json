{"path":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","commits":[{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  void processUpdate(UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd( parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand( false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand( true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete( parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback( parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  void processUpdate(UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd( parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand( false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand( true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete( parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback( parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"/dev/null","sourceNew":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b15db2edd4d6bec35a41e44d8f1afe6384a905","date":1305144174,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate() throws IOException\n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n        case JSONParser.ARRAY_START:\n          handleAdds();\n          break;\n\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            int ev2 = parser.nextEvent();\n            if (ev2 == JSONParser.OBJECT_START) {\n              processor.processAdd( parseAdd() );\n            } else if (ev2 == JSONParser.ARRAY_START) {\n              handleAdds();\n            } else {\n              assertEvent(ev2, JSONParser.OBJECT_START);\n            }\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete() );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback() );\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate() throws IOException\n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n        case JSONParser.ARRAY_START:\n          handleAdds();\n          break;\n\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            int ev2 = parser.nextEvent();\n            if (ev2 == JSONParser.OBJECT_START) {\n              processor.processAdd( parseAdd() );\n            } else if (ev2 == JSONParser.ARRAY_START) {\n              handleAdds();\n            } else {\n              assertEvent(ev2, JSONParser.OBJECT_START);\n            }\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete() );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback() );\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,JSONParser).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, JSONParser parser) throws IOException \n  {\n    int ev = parser.nextEvent();\n    while( ev != JSONParser.EOF ) {\n      \n      switch( ev )\n      {\n      case JSONParser.STRING:\n        if( parser.wasKey() ) {\n          String v = parser.getString();\n          if( v.equals( XmlUpdateRequestHandler.ADD ) ) {\n            processor.processAdd( parseAdd(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.COMMIT ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.OPTIMIZE ) ) {\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n            cmd.waitFlush = cmd.waitSearcher = true;\n            parseCommitOptions( parser, cmd );\n            processor.processCommit( cmd );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.DELETE ) ) {\n            processor.processDelete( parseDelete(req, parser ) );\n          }\n          else if( v.equals( XmlUpdateRequestHandler.ROLLBACK ) ) {\n            processor.processRollback( parseRollback(req, parser ) );\n          }\n          else {\n            throw new IOException( \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n          }\n          break;\n        }\n        // fall through\n\n      case JSONParser.LONG:\n      case JSONParser.NUMBER:\n      case JSONParser.BIGNUMBER:\n      case JSONParser.BOOLEAN:\n        log.info( \"can't have a value here! \"\n            +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n        \n      case JSONParser.OBJECT_START:\n      case JSONParser.OBJECT_END:\n      case JSONParser.ARRAY_START:\n      case JSONParser.ARRAY_END:\n        break;\n        \n      default:\n        System.out.println(\"UNKNOWN_EVENT_ID:\"+ev);\n        break;\n      }\n      // read the next event\n      ev = parser.nextEvent();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"b5f7137bd9491c6596681b1f56e481e17964e581":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["b5f7137bd9491c6596681b1f56e481e17964e581"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b5f7137bd9491c6596681b1f56e481e17964e581","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b5f7137bd9491c6596681b1f56e481e17964e581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b5f7137bd9491c6596681b1f56e481e17964e581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"b5f7137bd9491c6596681b1f56e481e17964e581":["19b15db2edd4d6bec35a41e44d8f1afe6384a905","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b5f7137bd9491c6596681b1f56e481e17964e581"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}