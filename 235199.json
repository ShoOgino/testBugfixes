{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","commits":[{"id":"ffabe030a2b84ad50adb7265da07ee78f1c58f6a","date":1355239263,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"/dev/null","sourceNew":"  public PostingsHighlighter(String field, int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    this.field = field;\n    if (maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n    floor = new Term(field, \"\");\n    ceiling = new Term(field, ceilingBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"632fb5bc15cf5567e613b316f678854d11e96527","date":1356400833,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  public PostingsHighlighter(String field, int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    this.field = field;\n    if (maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n    floor = new Term(field, \"\");\n    ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n  }\n\n","sourceOld":"  public PostingsHighlighter(String field, int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    this.field = field;\n    if (maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n    floor = new Term(field, \"\");\n    ceiling = new Term(field, ceilingBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bb94551de83b33535d086e8d4222fa6d0c4cfc0","date":1357181547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  public PostingsHighlighter(String field, int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    this.field = field;\n    if (maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n    floor = new Term(field, \"\");\n    ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n  }\n\n","bugFix":null,"bugIntro":["972114e06584faaa995de366083936dc77203773"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"632fb5bc15cf5567e613b316f678854d11e96527":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["632fb5bc15cf5567e613b316f678854d11e96527"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"]},"commit2Childs":{"632fb5bc15cf5567e613b316f678854d11e96527":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["632fb5bc15cf5567e613b316f678854d11e96527"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}