{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        sorteds.put(fieldNumber, readSortedEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        sortedSets.put(fieldNumber, readSortedSetEntry(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        sorteds.put(fieldNumber, readSortedEntry(meta));\n      } else if (fieldType == SORTED_SET) {\n        sortedSets.put(fieldNumber, readSortedSetEntry(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta, false);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = readSortedSetEntry(meta, true);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, false);\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, true);\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta, false);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = readSortedSetEntry(meta, true);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, false);\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, true);\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(info.name, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(info.name, entry);\n        binaries.put(info.name, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta, false);\n        sortedSets.put(info.name, entry);\n        binaries.put(info.name, entry.values);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = readSortedSetEntry(meta, true);\n        sortedSets.put(info.name, entry);\n        binaries.put(info.name, entry.values);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, false);\n        sortedNumerics.put(info.name, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, true);\n        sortedNumerics.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", field= \" + info.name + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (fieldType == BYTES) {\n        binaries.put(fieldNumber, readBinaryEntry(meta));\n      } else if (fieldType == SORTED) {\n        SortedEntry entry = readSortedEntry(meta);\n        sorteds.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET) {\n        SortedSetEntry entry = readSortedSetEntry(meta, false);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_SET_SINGLETON) {\n        SortedSetEntry entry = readSortedSetEntry(meta, true);\n        sortedSets.put(fieldNumber, entry);\n        binaries.put(fieldNumber, entry.values);\n      } else if (fieldType == SORTED_NUMERIC) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, false);\n        sortedNumerics.put(fieldNumber, entry);\n      } else if (fieldType == SORTED_NUMERIC_SINGLETON) {\n        SortedNumericEntry entry = readSortedNumericEntry(meta, true);\n        sortedNumerics.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0936055c0eed56be3e4ae5c9db5b0e355390736a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}