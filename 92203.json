{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"/dev/null","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"/dev/null","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"/dev/null","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83224b38ea2936daead3abe32327aeaf2e2d83fe","date":1310129261,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":"  public static float[][] shrink(float[][] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":"  public static float[][] shrink(float[][] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(float[][],int).mjava","sourceNew":"  public static float[][] shrink(float[][] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","sourceOld":"  public static float[][] shrink(float[][] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != array.length) {\n      float[][] newArray = new float[newSize][];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else {\n      return array;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83224b38ea2936daead3abe32327aeaf2e2d83fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","83224b38ea2936daead3abe32327aeaf2e2d83fe"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["83224b38ea2936daead3abe32327aeaf2e2d83fe","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}