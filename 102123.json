{"path":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","commits":[{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(dir, info, \"\", files);\n      storedFieldsFormat().files(dir, info, files);\n      termVectorsFormat().files(dir, info, files);\n      fieldInfosFormat().files(dir, info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(dir, info, files);\n      normsFormat().files(dir, info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3","date":1327944832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/Codec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n  }\n\n","sourceOld":"  /** Populates <code>files</code> with all filenames needed for \n   * the <code>info</code> segment.\n   */\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["410e066f093e407222d9681429d209084e783149","78977ccc47b451a8e645b77504e2ef0a05e4b1a3","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}