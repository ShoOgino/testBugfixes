{"path":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","commits":[{"id":"3f11f04f49f9196e0fb2981a23ae69b346f17212","date":1120325997,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"/dev/null","sourceNew":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new RAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(version < IndexReader.getCurrentVersion(dir));\n      reader.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6","3684d734ad9d0aedf6df8bb52de49b2c363f0353"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new RAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n      reader.close();\n    }\n\n","sourceOld":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new RAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(version < IndexReader.getCurrentVersion(dir));\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":["3684d734ad9d0aedf6df8bb52de49b2c363f0353"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new MockRAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new RAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n      reader.close();\n    }\n\n","bugFix":["3f11f04f49f9196e0fb2981a23ae69b346f17212"],"bugIntro":["3684d734ad9d0aedf6df8bb52de49b2c363f0353"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3684d734ad9d0aedf6df8bb52de49b2c363f0353","date":1197022391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          while(true) {\n            try {\n              Thread.sleep(1000);\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      Directory dir = new MockRAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir);\n      assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.lastModified(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580","3f11f04f49f9196e0fb2981a23ae69b346f17212","d72db039743bd6a2da9be6306f57c71654ca1bf6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          while(true) {\n            try {\n              Thread.sleep(1000);\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          while(true) {\n            try {\n              Thread.sleep(1000);\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws IOException {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          while(true) {\n            try {\n              Thread.sleep(1000);\n              break;\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8","date":1254593002,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      assertFalse(IndexReader.indexExists(\"there_is_no_such_index\"));\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexReader.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexReader.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(fileDir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["3684d734ad9d0aedf6df8bb52de49b2c363f0353"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"3f11f04f49f9196e0fb2981a23ae69b346f17212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["3f11f04f49f9196e0fb2981a23ae69b346f17212"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3684d734ad9d0aedf6df8bb52de49b2c363f0353":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3f11f04f49f9196e0fb2981a23ae69b346f17212":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f11f04f49f9196e0fb2981a23ae69b346f17212"],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["3684d734ad9d0aedf6df8bb52de49b2c363f0353"],"3684d734ad9d0aedf6df8bb52de49b2c363f0353":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}