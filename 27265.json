{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", collectionName, clusterShape(1, 1));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", collectionName, clusterShape(1, 1));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    waitForState(\"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}