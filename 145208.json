{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#BKDRadixSelector(int,int,int,int,Directory,String).mjava","commits":[{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#BKDRadixSelector(int,int,int,int,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor.\n   */\n  public BKDRadixSelector(int numDataDims, int numIndexDims, int bytesPerDim, int maxPointsSortInHeap, Directory tempDir, String tempFileNamePrefix) {\n    this.bytesPerDim = bytesPerDim;\n    this.numDataDims = numDataDims;\n    this.numIndexDims = numIndexDims;\n    this.packedBytesLength = numDataDims * bytesPerDim;\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    // Selection and sorting is done in a given dimension. In case the value of the dimension are equal\n    // between two points we tie break first using the data-only dimensions and if those are still equal\n    // we tie-break on the docID. Here we account for all bytes used in the process.\n    this.bytesSorted = bytesPerDim  + (numDataDims - numIndexDims) * bytesPerDim + Integer.BYTES;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n    int numberOfPointsOffline  = MAX_SIZE_OFFLINE_BUFFER / packedBytesDocIDLength;\n    this.offlineBuffer = new byte[numberOfPointsOffline * packedBytesDocIDLength];\n    this.partitionBucket = new int[bytesSorted];\n    this.histogram = new long[HISTOGRAM_SIZE];\n    this.scratch = new byte[bytesSorted];\n    this.tempDir = tempDir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#BKDRadixSelector(BKDConfig,int,Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#BKDRadixSelector(int,int,int,int,Directory,String).mjava","sourceNew":"  /**\n   * Sole constructor.\n   */\n  public BKDRadixSelector(BKDConfig config, int maxPointsSortInHeap, Directory tempDir, String tempFileNamePrefix) {\n    this.config = config;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n    this.tempDir = tempDir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n    // Selection and sorting is done in a given dimension. In case the value of the dimension are equal\n    // between two points we tie break first using the data-only dimensions and if those are still equal\n    // we tie-break on the docID. Here we account for all bytes used in the process.\n    this.bytesSorted = config.bytesPerDim + (config.numDims - config.numIndexDims) * config.bytesPerDim + Integer.BYTES;\n    final int numberOfPointsOffline = MAX_SIZE_OFFLINE_BUFFER / config.bytesPerDoc;\n    this.offlineBuffer = new byte[numberOfPointsOffline * config.bytesPerDoc];\n    this.partitionBucket = new int[bytesSorted];\n    this.histogram = new long[HISTOGRAM_SIZE];\n    this.scratch = new byte[bytesSorted];\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   */\n  public BKDRadixSelector(int numDataDims, int numIndexDims, int bytesPerDim, int maxPointsSortInHeap, Directory tempDir, String tempFileNamePrefix) {\n    this.bytesPerDim = bytesPerDim;\n    this.numDataDims = numDataDims;\n    this.numIndexDims = numIndexDims;\n    this.packedBytesLength = numDataDims * bytesPerDim;\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    // Selection and sorting is done in a given dimension. In case the value of the dimension are equal\n    // between two points we tie break first using the data-only dimensions and if those are still equal\n    // we tie-break on the docID. Here we account for all bytes used in the process.\n    this.bytesSorted = bytesPerDim  + (numDataDims - numIndexDims) * bytesPerDim + Integer.BYTES;\n    this.maxPointsSortInHeap = maxPointsSortInHeap;\n    int numberOfPointsOffline  = MAX_SIZE_OFFLINE_BUFFER / packedBytesDocIDLength;\n    this.offlineBuffer = new byte[numberOfPointsOffline * packedBytesDocIDLength];\n    this.partitionBucket = new int[bytesSorted];\n    this.histogram = new long[HISTOGRAM_SIZE];\n    this.scratch = new byte[bytesSorted];\n    this.tempDir = tempDir;\n    this.tempFileNamePrefix = tempFileNamePrefix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7f06758793500ca773d0df1037290e6e404fb33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}