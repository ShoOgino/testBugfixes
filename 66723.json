{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 1, 1)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n      long maxVersion_c1;\n      long maxVersion_c2;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/get\");\n      params.set(\"getVersions\", numDocs);\n      params.set(\"fingerprint\", true);\n      response = cluster1SolrClient.query(params);\n      maxVersion_c1 = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n      response = cluster2SolrClient.query(params);\n      maxVersion_c2 = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String randomQuery = String.valueOf(ThreadLocalRandom.current().nextInt(docs * 100));\n      response = cluster1SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 1 docs mismatch\", 2, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(randomQuery);\n\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster1SolrClient);\n      response = cluster1SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 1 docs mismatch\", 0, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster2SolrClient, randomQuery));\n\n      // ADD the deleted query-doc again.\n      req = new UpdateRequest();\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"cluster2_\" + (docs * 100 + 1));\n      doc.addField(\"xyz\", randomQuery);\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster2SolrClient);\n      response = cluster2SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 2 docs mismatch\", 1, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", 1, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, randomQuery));\n\n      // DELETE BY ID\n      String delete_id_query = \"cluster2_\" + (docs * 100 + 1);\n      cluster1SolrClient.deleteById(delete_id_query);\n      req.process(cluster1SolrClient);\n      response = cluster1SolrClient.query(new SolrQuery(delete_id_query));\n      assertEquals(\"cluster 1 docs mismatch\", 0, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster2SolrClient, delete_id_query));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      doc.addField(\"id\", \"cluster2_\" + (docs * 100 + 1));\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster2SolrClient);\n\n      String atomic_query_1 = \"xyz:\" + randomQuery + \" AND id:cluster2_\" + (docs * 100 + 1);\n      String atomic_query_2 = \"abc:ABC AND id:cluster2_\" + (docs * 100 + 1);\n\n      response = cluster2SolrClient.query(new SolrQuery(atomic_query_1));\n      assertEquals(\"cluster 2 docs mismatch\", 0, response.getResults().getNumFound());\n      response = cluster2SolrClient.query(new SolrQuery(atomic_query_2));\n      assertEquals(\"cluster 2 docs mismatch\", 1, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, atomic_query_1));\n      assertEquals(\"cluster 1 docs mismatch\", 1, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, atomic_query_2));\n\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n\n      cluster1SolrClient.close();\n      cluster2SolrClient.close();\n\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":4,"author":"Varun Thacker","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 1, 1)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n      long maxVersion_c1;\n      long maxVersion_c2;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/get\");\n      params.set(\"getVersions\", numDocs);\n      params.set(\"fingerprint\", true);\n      response = cluster1SolrClient.query(params);\n      maxVersion_c1 = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n      response = cluster2SolrClient.query(params);\n      maxVersion_c2 = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String randomQuery = String.valueOf(ThreadLocalRandom.current().nextInt(docs * 100));\n      response = cluster1SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 1 docs mismatch\", 2, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(randomQuery);\n\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster1SolrClient);\n      response = cluster1SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 1 docs mismatch\", 0, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster2SolrClient, randomQuery));\n\n      // ADD the deleted query-doc again.\n      req = new UpdateRequest();\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"cluster2_\" + (docs * 100 + 1));\n      doc.addField(\"xyz\", randomQuery);\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster2SolrClient);\n      response = cluster2SolrClient.query(new SolrQuery(randomQuery));\n      assertEquals(\"cluster 2 docs mismatch\", 1, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", 1, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, randomQuery));\n\n      // DELETE BY ID\n      String delete_id_query = \"cluster2_\" + (docs * 100 + 1);\n      cluster1SolrClient.deleteById(delete_id_query);\n      req.process(cluster1SolrClient);\n      response = cluster1SolrClient.query(new SolrQuery(delete_id_query));\n      assertEquals(\"cluster 1 docs mismatch\", 0, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster2SolrClient, delete_id_query));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      doc.addField(\"id\", \"cluster2_\" + (docs * 100 + 1));\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      req = new UpdateRequest();\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(cluster2SolrClient);\n\n      String atomic_query_1 = \"xyz:\" + randomQuery + \" AND id:cluster2_\" + (docs * 100 + 1);\n      String atomic_query_2 = \"abc:ABC AND id:cluster2_\" + (docs * 100 + 1);\n\n      response = cluster2SolrClient.query(new SolrQuery(atomic_query_1));\n      assertEquals(\"cluster 2 docs mismatch\", 0, response.getResults().getNumFound());\n      response = cluster2SolrClient.query(new SolrQuery(atomic_query_2));\n      assertEquals(\"cluster 2 docs mismatch\", 1, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", 0, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, atomic_query_1));\n      assertEquals(\"cluster 1 docs mismatch\", 1, CdcrTestsUtil.waitForClusterToSync((int)response.getResults().getNumFound(), cluster1SolrClient, atomic_query_2));\n\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n\n      cluster1SolrClient.close();\n      cluster2SolrClient.close();\n\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(\"abc\"));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\"));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","d75f3b76c96dbe01dc44f5a9469524c2ffe86530"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(\"abc\"));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\"));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d75f3b76c96dbe01dc44f5a9469524c2ffe86530","date":1523572534,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(\"abc\"));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\"));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(\"abc\", ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(\"abc\"));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\"));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2095beb29f50c5f81d7d2ef83fdfa6b48c173c33","date":1538616190,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    cluster2.waitForAllNodes(30);\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    cluster1.waitForAllNodes(30);\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      ImmutableMap.of(\"\", \"\");\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster2 zkHost = {}\", cluster2.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster1 zkHost = {}\", cluster1.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs={}\", docs, numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs= {}\", docs, numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response: {}\", response.getResponse());\n      }\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: {}\\tv2: {}\\tcheckpoint1: {}\\tcheckpoint2: {}\"\n          , maxVersion_c1, maxVersion_c2, checkpoint_1, checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response at end of testcase: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response at end of testcase: {}\", response.getResponse());\n      }\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"cluster2 zkHost = \" + cluster2.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      log.info(\"cluster1 zkHost = \" + cluster1.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response: \" + response.getResponse());\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: \" + maxVersion_c1 + \"\\t\" + \"v2: \" + maxVersion_c2 + \"\\t\" +\n          \"checkpoint1: \" + checkpoint_1 + \"\\t\" + \"checkpoint2: \" + checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      log.info(\"Cdcr cluster1 queue response at end of testcase: \" + response.getResponse());\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      log.info(\"Cdcr cluster2 queue response at end of testcase: \" + response.getResponse());\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster2 zkHost = {}\", cluster2.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster1 zkHost = {}\", cluster1.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs={}\", docs, numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs= {}\", docs, numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response: {}\", response.getResponse());\n      }\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: {}\\tv2: {}\\tcheckpoint1: {}\\tcheckpoint2: {}\"\n          , maxVersion_c1, maxVersion_c2, checkpoint_1, checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response at end of testcase: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response at end of testcase: {}\", response.getResponse());\n      }\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster2 zkHost = {}\", cluster2.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster1 zkHost = {}\", cluster1.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setMaxShardsPerNode(2)\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs={}\", docs, numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs= {}\", docs, numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response: {}\", response.getResponse());\n      }\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: {}\\tv2: {}\\tcheckpoint1: {}\\tcheckpoint2: {}\"\n          , maxVersion_c1, maxVersion_c2, checkpoint_1, checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response at end of testcase: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response at end of testcase: {}\", response.getResponse());\n      }\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBidirectionalTest#testBiDir().mjava","sourceNew":null,"sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12524\")\n  public void testBiDir() throws Exception {\n    MiniSolrCloudCluster cluster2 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster2\"), buildJettyConfig(\"/solr\"));\n    MiniSolrCloudCluster cluster1 = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-cluster1\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster2 zkHost = {}\", cluster2.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster2.zkHost\", cluster2.getZkServer().getZkAddress());\n\n      if (log.isInfoEnabled()) {\n        log.info(\"cluster1 zkHost = {}\", cluster1.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.cluster1.zkHost\", cluster1.getZkServer().getZkAddress());\n\n\n      cluster1.uploadConfigSet(configset(\"cdcr-cluster1\"), \"cdcr-cluster1\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster1\", \"cdcr-cluster1\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster1.getSolrClient());\n      CloudSolrClient cluster1SolrClient = cluster1.getSolrClient();\n      cluster1SolrClient.setDefaultCollection(\"cdcr-cluster1\");\n\n      cluster2.uploadConfigSet(configset(\"cdcr-cluster2\"), \"cdcr-cluster2\");\n      CollectionAdminRequest.createCollection(\"cdcr-cluster2\", \"cdcr-cluster2\", 2, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(cluster2.getSolrClient());\n      CloudSolrClient cluster2SolrClient = cluster2.getSolrClient();\n      cluster2SolrClient.setDefaultCollection(\"cdcr-cluster2\");\n\n      UpdateRequest req = null;\n\n      CdcrTestsUtil.cdcrStart(cluster1SolrClient);\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 1\n      int docs = (TEST_NIGHTLY ? 100 : 10);\n      int numDocs_c1 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c1 < (k + 1) * 100; numDocs_c1++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster1_\" + numDocs_c1);\n          doc.addField(\"xyz\", numDocs_c1);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs={}\", docs, numDocs_c1);\n        req.process(cluster1SolrClient);\n      }\n\n      QueryResponse response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs_c1, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 2 docs mismatch\", numDocs_c1, CdcrTestsUtil.waitForClusterToSync(numDocs_c1, cluster2SolrClient));\n\n      CdcrTestsUtil.cdcrStart(cluster2SolrClient); // FULL BI-DIRECTIONAL CDCR FORWARDING ON\n      Thread.sleep(2000);\n\n      // ADD operation on cluster 2\n      int numDocs_c2 = 0;\n      for (int k = 0; k < docs; k++) {\n        req = new UpdateRequest();\n        for (; numDocs_c2 < (k + 1) * 100; numDocs_c2++) {\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"cluster2_\" + numDocs_c2);\n          doc.addField(\"xyz\", numDocs_c2);\n          req.add(doc);\n        }\n        req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n        log.info(\"Adding {} docs with commit=true, numDocs= {}\", docs, numDocs_c2);\n        req.process(cluster2SolrClient);\n      }\n\n      int numDocs = numDocs_c1 + numDocs_c2;\n\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response: {}\", response.getResponse());\n      }\n\n      // lets find and keep the maximum version assigned by cluster1 & cluster2 across all our updates\n\n      long maxVersion_c1 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster1SolrClient, \"shard2\", numDocs));\n      long maxVersion_c2 = Math.min((long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard1\", numDocs),\n          (long)CdcrTestsUtil.getFingerPrintMaxVersion(cluster2SolrClient, \"shard2\", numDocs));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster2SolrClient.query(params);\n      Long checkpoint_2 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_2);\n\n      params = new ModifiableSolrParams();\n      params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n      params.set(CommonParams.QT, \"/cdcr\");\n      response = cluster1SolrClient.query(params);\n      Long checkpoint_1 = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n      assertNotNull(checkpoint_1);\n\n      log.info(\"v1: {}\\tv2: {}\\tcheckpoint1: {}\\tcheckpoint2: {}\"\n          , maxVersion_c1, maxVersion_c2, checkpoint_1, checkpoint_2);\n\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster2 should have returned the maximum \" +\n          \"version across all updates made to cluster1\", maxVersion_c1, checkpoint_2.longValue());\n      assertEquals(\"COLLECTIONCHECKPOINT from cluster1 should have returned the maximum \" +\n          \"version across all updates made to cluster2\", maxVersion_c2, checkpoint_1.longValue());\n      assertEquals(\"max versions of updates in both clusters should be same\", maxVersion_c1, maxVersion_c2);\n\n      // DELETE BY QUERY\n      String deleteByQuery = \"id:cluster1_\" +String.valueOf(random().nextInt(numDocs_c1));\n      response = cluster1SolrClient.query(new SolrQuery(deleteByQuery));\n      assertEquals(\"should match exactly one doc\", 1, response.getResults().getNumFound());\n      cluster1SolrClient.deleteByQuery(deleteByQuery);\n      cluster1SolrClient.commit();\n      numDocs--;\n      numDocs_c1--;\n\n      response = cluster1SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster2SolrClient));\n\n      // DELETE BY ID\n      SolrInputDocument doc;\n      String delete_id_query = \"cluster2_\" + random().nextInt(numDocs_c2);\n      cluster2SolrClient.deleteById(delete_id_query);\n      cluster2SolrClient.commit();\n      numDocs--;\n      numDocs_c2--;\n      response = cluster2SolrClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"cluster 2 docs mismatch\", numDocs, response.getResults().getNumFound());\n      assertEquals(\"cluster 1 docs mismatch\", numDocs, CdcrTestsUtil.waitForClusterToSync(numDocs, cluster1SolrClient));\n\n      // ATOMIC UPDATES\n      req = new UpdateRequest();\n      doc = new SolrInputDocument();\n      String atomicFieldName = \"abc\";\n      String atomicUpdateId = \"cluster2_\" + random().nextInt(numDocs_c2);\n      doc.addField(\"id\", atomicUpdateId);\n      doc.addField(\"xyz\", ImmutableMap.of(\"delete\", \"\"));\n      doc.addField(atomicFieldName, ImmutableMap.of(\"set\", \"ABC\"));\n      req.add(doc);\n      req.process(cluster2SolrClient);\n      cluster2SolrClient.commit();\n\n      String atomicQuery = \"id:\" + atomicUpdateId;\n      response = cluster2SolrClient.query(new SolrQuery(atomicQuery));\n      assertEquals(\"cluster 2 wrong doc\", \"ABC\", response.getResults().get(0).get(atomicFieldName));\n      assertEquals(\"cluster 1 wrong doc\", \"ABC\", getDocFieldValue(cluster1SolrClient, atomicQuery, \"ABC\", atomicFieldName ));\n\n\n      // logging cdcr clusters queue response\n      response = CdcrTestsUtil.getCdcrQueue(cluster1SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster1 queue response at end of testcase: {}\", response.getResponse());\n      }\n      response = CdcrTestsUtil.getCdcrQueue(cluster2SolrClient);\n      if (log.isInfoEnabled()) {\n        log.info(\"Cdcr cluster2 queue response at end of testcase: {}\", response.getResponse());\n      }\n\n      CdcrTestsUtil.cdcrStop(cluster1SolrClient);\n      CdcrTestsUtil.cdcrStop(cluster2SolrClient);\n    } finally {\n      if (cluster1 != null) {\n        cluster1.shutdown();\n      }\n      if (cluster2 != null) {\n        cluster2.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2095beb29f50c5f81d7d2ef83fdfa6b48c173c33"],"2095beb29f50c5f81d7d2ef83fdfa6b48c173c33":["6b87d1f8719d7f05be003f3477450b74af13706a"],"d75f3b76c96dbe01dc44f5a9469524c2ffe86530":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["42210058b8ae092085fa2658880b69931512e8bf"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"42210058b8ae092085fa2658880b69931512e8bf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","d75f3b76c96dbe01dc44f5a9469524c2ffe86530"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["d75f3b76c96dbe01dc44f5a9469524c2ffe86530","6b87d1f8719d7f05be003f3477450b74af13706a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["42210058b8ae092085fa2658880b69931512e8bf"],"2095beb29f50c5f81d7d2ef83fdfa6b48c173c33":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d75f3b76c96dbe01dc44f5a9469524c2ffe86530":["6b87d1f8719d7f05be003f3477450b74af13706a"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"42210058b8ae092085fa2658880b69931512e8bf":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"6b87d1f8719d7f05be003f3477450b74af13706a":["2095beb29f50c5f81d7d2ef83fdfa6b48c173c33"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}