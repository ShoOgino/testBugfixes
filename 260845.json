{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinAndSameMaxShingleSize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinAndSameMaxShingleSize().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinAndSameMaxShingleSize().mjava","sourceNew":"  public void testNonDefaultMinAndSameMaxShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer\n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 3, 3);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\", \n                                         \"divide\",   \"divide this sentence\", \n                                         \"this\",     \"this sentence into\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 13, 27, 18, 32, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1,  0,  1,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\", \n                                         \"divide this sentence\", \n                                         \"this sentence into\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  7, 14, 19 },\n                          new int[] { 18, 27, 32, 41 },\n                          new int[] {  1,  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNonDefaultMinAndSameMaxShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer\n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 3, 3);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\", \n                                         \"divide\",   \"divide this sentence\", \n                                         \"this\",     \"this sentence into\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 13, 27, 18, 32, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1,  0,  1,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\", \n                                         \"divide this sentence\", \n                                         \"this sentence into\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  7, 14, 19 },\n                          new int[] { 18, 27, 32, 41 },\n                          new int[] {  1,  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinAndSameMaxShingleSize().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinAndSameMaxShingleSize().mjava","sourceNew":"  public void testNonDefaultMinAndSameMaxShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer\n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 3, 3);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\", \n                                         \"divide\",   \"divide this sentence\", \n                                         \"this\",     \"this sentence into\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 13, 27, 18, 32, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1,  0,  1,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\", \n                                         \"divide this sentence\", \n                                         \"this sentence into\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  7, 14, 19 },\n                          new int[] { 18, 27, 32, 41 },\n                          new int[] {  1,  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNonDefaultMinAndSameMaxShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer\n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 3, 3);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\", \n                                         \"divide\",   \"divide this sentence\", \n                                         \"this\",     \"this sentence into\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 13, 27, 18, 32, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1,  0,  1,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\", \n                                         \"divide this sentence\", \n                                         \"this sentence into\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  7, 14, 19 },\n                          new int[] { 18, 27, 32, 41 },\n                          new int[] {  1,  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}