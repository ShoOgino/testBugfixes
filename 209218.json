{"path":"src/java/org/apache/solr/core/SolrCore#close().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"/dev/null","sourceNew":"  public void close() {\n    log.info(\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  public void close() {\n    close(true);\n  }\n\n","sourceOld":"  public void close() {\n    log.info(\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe3c163c8df3fb3e4248c30f8ae8034cc786589","date":1189317596,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  public void close() {\n    log.info(\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":"  public void close() {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":["26f751079329fb2139e415fb8971781aabcc8866","26f751079329fb2139e415fb8971781aabcc8866","26f751079329fb2139e415fb8971781aabcc8866","5984f3962c191f46dc80585c9aefa49208aaabde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  public void close() {\n    log.info(\"[\"+name+\"] CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":"  public void close() {\n    log.info(\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  public void close() {\n    log.info(logid+\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":"  public void close() {\n    log.info(\"[\"+name+\"] CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b226bad20183a3e5d0047f78ee44130c3fd4e67","date":1214502277,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n     }\n  }\n\n","sourceOld":"  public void close() {\n    log.info(logid+\"CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n    }\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27b51e98dfbe5e5df4f3714817b72c3742c0d903","date":1217584138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n    }\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["26f751079329fb2139e415fb8971781aabcc8866","26f751079329fb2139e415fb8971781aabcc8866","26f751079329fb2139e415fb8971781aabcc8866","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   * <p>\n   * This should always be called when the core is obtained through:\n   * @see CoreContainer.getCore\n   * @see CoreContainer.getAdminCore\n   * </p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception is thrown.\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.severe(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   */\n  public void close() {\n    log.info(logid+\" CLOSING SolrCore!\");\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n       }\n    }\n  }\n\n","bugFix":["2b226bad20183a3e5d0047f78ee44130c3fd4e67"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a1078cf12e79f05e2424da47ec80c9ff418ddc1","date":1220033085,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.severe(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core.\n   *  1. searcher\n   *  2. updateHandler\n   *  3. all CloseHooks will be notified\n   *  4. All MBeans will be unregistered from MBeanServer if JMX was enabled\n   * <p>\n   * This should always be called when the core is obtained through:\n   * @see CoreContainer.getCore\n   * @see CoreContainer.getAdminCore\n   * </p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception is thrown.\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.severe(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.error(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.severe(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6242a62980e29df9fc10f4b1934dfde734dbd2c","date":1229640030,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0){\n      log.warn( \"Attempted close on {} did not succeed because the new reference count {} is > 0. \", this, count );\n      return;\n    }\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return;\n    if (count < 0) {\n      //throw new RuntimeException(\"Too many closes on \" + this);\n      log.error(\"Too many close {count:\"+count+\"} on \" + this + \". Please report this exception to solr-user@lucene.apache.org\");\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bd42ed6013149c9e3cb2a98981bd44ed426d090","date":1229709367,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0){\n      log.warn( \"Attempted close on {} did not succeed because the new reference count {} is > 0. \", this, count );\n      return;\n    }\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b9c4a540a361ad7be858402dc9e3dea5fbc8eca","date":1232587903,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core if it is no longer in use...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This method should always be called when the core is obtained through\n   * {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}.\n   * </p>\n   * <p>\n   * The behavior of this method is determined by the result of decrementing\n   * the core's reference count (A core is created with a refrence count of 1)...\n   * </p>\n   * <ul>\n   *   <li>If reference count is > 0, the usage count is decreased by 1 and no\n   *       resources are released.\n   *   </li>\n   *   <li>If reference count is == 0, the resources are released.\n   *   <li>If reference count is &lt; 0, and error is logged and no further action\n   *       is taken.\n   *   </li>\n   * </ul>\n   * @see #isClosed() \n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This should always be called when the core is obtained through {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}\n   * </p>\n   * <p>\n   * The actual close is performed if the core usage count is 1.\n   * (A core is created with a usage count of 1).\n   * If usage count is > 1, the usage count is decreased by 1.\n   * If usage count is &lt; 0, this is an error and a runtime exception \n   * is thrown.\n   * </p>\n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c03efd8cfee511e8fabfc468d0dd7c9303be8be","date":1261551327,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core if it is no longer in use...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>   \n   * <p>\n   * The behavior of this method is determined by the result of decrementing\n   * the core's reference count (A core is created with a refrence count of 1)...\n   * </p>\n   * <ul>\n   *   <li>If reference count is > 0, the usage count is decreased by 1 and no\n   *       resources are released.\n   *   </li>\n   *   <li>If reference count is == 0, the resources are released.\n   *   <li>If reference count is &lt; 0, and error is logged and no further action\n   *       is taken.\n   *   </li>\n   * </ul>\n   * @see #isClosed() \n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core if it is no longer in use...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>\n   * This method should always be called when the core is obtained through\n   * {@link CoreContainer#getCore} or {@link CoreContainer#getAdminCore}.\n   * </p>\n   * <p>\n   * The behavior of this method is determined by the result of decrementing\n   * the core's reference count (A core is created with a refrence count of 1)...\n   * </p>\n   * <ul>\n   *   <li>If reference count is > 0, the usage count is decreased by 1 and no\n   *       resources are released.\n   *   </li>\n   *   <li>If reference count is == 0, the resources are released.\n   *   <li>If reference count is &lt; 0, and error is logged and no further action\n   *       is taken.\n   *   </li>\n   * </ul>\n   * @see #isClosed() \n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#close().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#close().mjava","sourceNew":"  /**\n   * Close all resources allocated by the core if it is no longer in use...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>   \n   * <p>\n   * The behavior of this method is determined by the result of decrementing\n   * the core's reference count (A core is created with a refrence count of 1)...\n   * </p>\n   * <ul>\n   *   <li>If reference count is > 0, the usage count is decreased by 1 and no\n   *       resources are released.\n   *   </li>\n   *   <li>If reference count is == 0, the resources are released.\n   *   <li>If reference count is &lt; 0, and error is logged and no further action\n   *       is taken.\n   *   </li>\n   * </ul>\n   * @see #isClosed() \n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close all resources allocated by the core if it is no longer in use...\n   * <ul>\n   *   <li>searcher</li>\n   *   <li>updateHandler</li>\n   *   <li>all CloseHooks will be notified</li>\n   *   <li>All MBeans will be unregistered from MBeanServer if JMX was enabled\n   *       </li>\n   * </ul>\n   * <p>   \n   * <p>\n   * The behavior of this method is determined by the result of decrementing\n   * the core's reference count (A core is created with a refrence count of 1)...\n   * </p>\n   * <ul>\n   *   <li>If reference count is > 0, the usage count is decreased by 1 and no\n   *       resources are released.\n   *   </li>\n   *   <li>If reference count is == 0, the resources are released.\n   *   <li>If reference count is &lt; 0, and error is logged and no further action\n   *       is taken.\n   *   </li>\n   * </ul>\n   * @see #isClosed() \n   */\n  public void close() {\n    int count = refCount.decrementAndGet();\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      return;\n    }\n    log.info(logid+\" CLOSING SolrCore \" + this);\n    try {\n      infoRegistry.clear();\n    } catch (Exception e) {\n      SolrException.log(log, e);\n    }\n    try {\n      closeSearcher();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      searcherExecutor.shutdown();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    try {\n      updateHandler.close();\n    } catch (Exception e) {\n      SolrException.log(log,e);\n    }\n    if( closeHooks != null ) {\n       for( CloseHook hook : closeHooks ) {\n         hook.close( this );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"2b226bad20183a3e5d0047f78ee44130c3fd4e67":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"8a1078cf12e79f05e2424da47ec80c9ff418ddc1":["c28792ff7d1774c306e16afbd44ded91a417049b"],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["6d6338c87060be5f66757a94945975f3bbd377a9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["27b51e98dfbe5e5df4f3714817b72c3742c0d903"],"8b9c4a540a361ad7be858402dc9e3dea5fbc8eca":["0bd42ed6013149c9e3cb2a98981bd44ed426d090"],"e6242a62980e29df9fc10f4b1934dfde734dbd2c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"27b51e98dfbe5e5df4f3714817b72c3742c0d903":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["8b9c4a540a361ad7be858402dc9e3dea5fbc8eca"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["8a1078cf12e79f05e2424da47ec80c9ff418ddc1"],"0bd42ed6013149c9e3cb2a98981bd44ed426d090":["e6242a62980e29df9fc10f4b1934dfde734dbd2c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["2b226bad20183a3e5d0047f78ee44130c3fd4e67"],"ad94625fb8d088209f46650c8097196fec67f00c":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"2b226bad20183a3e5d0047f78ee44130c3fd4e67":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"8a1078cf12e79f05e2424da47ec80c9ff418ddc1":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"c28792ff7d1774c306e16afbd44ded91a417049b":["8a1078cf12e79f05e2424da47ec80c9ff418ddc1"],"8b9c4a540a361ad7be858402dc9e3dea5fbc8eca":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"27b51e98dfbe5e5df4f3714817b72c3742c0d903":["c28792ff7d1774c306e16afbd44ded91a417049b"],"e6242a62980e29df9fc10f4b1934dfde734dbd2c":["0bd42ed6013149c9e3cb2a98981bd44ed426d090"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["2b226bad20183a3e5d0047f78ee44130c3fd4e67"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["ad94625fb8d088209f46650c8097196fec67f00c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["e6242a62980e29df9fc10f4b1934dfde734dbd2c"],"0bd42ed6013149c9e3cb2a98981bd44ed426d090":["8b9c4a540a361ad7be858402dc9e3dea5fbc8eca"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["6d6338c87060be5f66757a94945975f3bbd377a9"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["27b51e98dfbe5e5df4f3714817b72c3742c0d903"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}