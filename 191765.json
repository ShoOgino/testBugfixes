{"path":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","commits":[{"id":"3903dde7d803465e019a1aaf678febe1c763ec27","date":1560266875,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9473be7de21650a5c4f92ea6765cfc52db6b99de","date":1560354966,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","sourceNew":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","sourceOld":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","sourceNew":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        assert indexInput != null;\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","sourceOld":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","sourceNew":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new NIOFSDirectory(indexPath), new NIOFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        assert indexInput != null;\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","sourceOld":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        assert indexInput != null;\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testDeleteAndList().mjava","sourceNew":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new NIOFSDirectory(indexPath), new NIOFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        assert indexInput != null;\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","sourceOld":"  public void testDeleteAndList() throws IOException {\n    // relies on windows semantics\n    Path path = createTempDir();\n    assumeFalse(\"Irony we seem to not emulate windows well enough\", Constants.WINDOWS);\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path indexPath = new FilterPath(path, fs);\n    try (final FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton(\"tim\"),\n        new SimpleFSDirectory(indexPath), new SimpleFSDirectory(indexPath), true)) {\n      dir.createOutput(\"foo.tim\", IOContext.DEFAULT).close();\n      Function<String[], Long> stripExtra = array -> Arrays.asList(array).stream()\n          .filter(f -> f.startsWith(\"extra\") == false).count();\n      try (IndexInput indexInput = dir.openInput(\"foo.tim\", IOContext.DEFAULT)) {\n        assert indexInput != null;\n        dir.deleteFile(\"foo.tim\");\n        assertEquals(1, dir.getPrimaryDir().getPendingDeletions().size());\n        assertEquals(1, dir.getPendingDeletions().size());\n        assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n        assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n        assertEquals(1, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n      }\n      assertEquals(0, dir.getPrimaryDir().getPendingDeletions().size());\n      assertEquals(0, dir.getPendingDeletions().size());\n      assertEquals(0, stripExtra.apply(dir.listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getPrimaryDir().listAll()).intValue());\n      assertEquals(0, stripExtra.apply(dir.getSecondaryDir().listAll()).intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9473be7de21650a5c4f92ea6765cfc52db6b99de":["3903dde7d803465e019a1aaf678febe1c763ec27"],"3903dde7d803465e019a1aaf678febe1c763ec27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["30c21918ef3ad23e254f39cb0cd6c86851fcb993","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["9473be7de21650a5c4f92ea6765cfc52db6b99de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9473be7de21650a5c4f92ea6765cfc52db6b99de":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"3903dde7d803465e019a1aaf678febe1c763ec27":["9473be7de21650a5c4f92ea6765cfc52db6b99de"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3903dde7d803465e019a1aaf678febe1c763ec27"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}