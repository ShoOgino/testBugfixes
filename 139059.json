{"path":"lucene/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState,Norm).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a norm value based on the field\n   * state and set that value to the given {@link Norm}.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @param norm holds the computed norm value when this method returns\n   */\n  public abstract void computeNorm(FieldInvertState state, Norm norm);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}