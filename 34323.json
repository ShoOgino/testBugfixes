{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.EventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(NAME));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e06fd44bfbf38eccad0c92896a2c40629cf96650","date":1505847137,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      loader.findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    TriggerListener listener = null;\n    try {\n      listener = loader.newInstance(listenerClass, TriggerListener.class);\n      listener.configure(loader, cloudManager, listenerConfig);\n    } catch (TriggerValidationException e) {\n      log.warn(\"invalid listener configuration\", e);\n      op.addError(\"invalid listener configuration: \" + e.toString());\n      return currentConfig;\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    } finally {\n      if (listener != null) {\n        IOUtils.closeQuietly(listener);\n      }\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listenerConfig);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    try {\n      loader.findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      op.addError(\"A trigger with the name \" + triggerName + \" does not exist\");\n      return currentConfig;\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      op.addError(\"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n      return currentConfig;\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid stage name: \" + stage);\n      }\n    }\n    if (op.hasError()) return currentConfig;\n\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n\n    // validate that we can load the listener class\n    // todo allow creation from blobstore\n    TriggerListener listener = null;\n    try {\n      listener = loader.newInstance(listenerClass, TriggerListener.class);\n      listener.configure(loader, cloudManager, listenerConfig);\n    } catch (TriggerValidationException e) {\n      log.warn(\"invalid listener configuration\", e);\n      op.addError(\"invalid listener configuration: \" + e.toString());\n      return currentConfig;\n    } catch (Exception e) {\n      log.warn(\"error loading listener class \", e);\n      op.addError(\"Listener not found: \" + listenerClass + \". error message:\" + e.getMessage());\n      return currentConfig;\n    } finally {\n      if (listener != null) {\n        IOUtils.closeQuietly(listener);\n      }\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      op.addError(\"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n      return currentConfig;\n    }\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listenerConfig);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e06fd44bfbf38eccad0c92896a2c40629cf96650"],"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e06fd44bfbf38eccad0c92896a2c40629cf96650":["e3590d254d013266ac3849fae45974e747f7f576"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"e06fd44bfbf38eccad0c92896a2c40629cf96650":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["e06fd44bfbf38eccad0c92896a2c40629cf96650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}