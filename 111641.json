{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity#computeNorm(FieldInvertState,Norm).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity#computeNorm(FieldInvertState,Norm).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/DefaultSimilarity#computeNorm(FieldInvertState,Norm).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    norm.setByte(encodeNormValue(state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)))));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    norm.setByte(encodeNormValue(state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"953ba6667d987c58964da9cad38c2d9d61cca920","date":1352255075,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity#computeNorm(FieldInvertState,Norm).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n   return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    norm.setByte(encodeNormValue(state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"953ba6667d987c58964da9cad38c2d9d61cca920":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["953ba6667d987c58964da9cad38c2d9d61cca920"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["953ba6667d987c58964da9cad38c2d9d61cca920"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"953ba6667d987c58964da9cad38c2d9d61cca920":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}