{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  @Override\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","sourceNew":"  @Override\n  public int[] getParentArray() throws IOException {\n    ensureOpen();\n    if (parentArray == null) {\n      synchronized (this) {\n        if (parentArray == null) {\n          parentArray = new ParentArray(indexReader);\n        }\n      }\n    }\n    return parentArray.getArray();\n  }\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  @Override\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int[] getParentArray() throws IOException {\n    ensureOpen();\n    if (parentArray == null) {\n      synchronized (this) {\n        if (parentArray == null) {\n          parentArray = new ParentArray(indexReader);\n        }\n      }\n    }\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","sourceNew":null,"sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  @Override\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}