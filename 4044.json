{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"/dev/null","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"/dev/null","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"/dev/null","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ab0e311d00c794eac70d67151d50cbb45ff810b","date":1304664391,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next, false);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      DocumentsWriterPerThread poll = flushQueue.poll();\n      if (poll != null) {\n        return poll;\n      }  \n    }\n    if (numPending > 0) {\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"/dev/null","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["6ab0e311d00c794eac70d67151d50cbb45ff810b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"32f306edd62f81390a6e263e8b913f089f3e98a1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["32f306edd62f81390a6e263e8b913f089f3e98a1","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}