{"path":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocument() {\n    try {    \n      sis.read(dir);\n      MultiReader reader = new MultiReader(dir, readers);\n      assertTrue(reader != null);\n      Document newDoc1 = reader.document(0);\n      assertTrue(newDoc1 != null);\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = reader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","sourceNew":"  public void testDocument() {\n    try {    \n      sis.read(dir);\n      MultiReader reader = new MultiReader(dir, sis, false, readers);\n      assertTrue(reader != null);\n      Document newDoc1 = reader.document(0);\n      assertTrue(newDoc1 != null);\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = reader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testDocument() {\n    try {    \n      sis.read(dir);\n      MultiReader reader = new MultiReader(dir, readers);\n      assertTrue(reader != null);\n      Document newDoc1 = reader.document(0);\n      assertTrue(newDoc1 != null);\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = reader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n  }\n\n","sourceOld":"  public void testDocument() {\n    try {    \n      sis.read(dir);\n      MultiReader reader = new MultiReader(dir, sis, false, readers);\n      assertTrue(reader != null);\n      Document newDoc1 = reader.document(0);\n      assertTrue(newDoc1 != null);\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = reader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    TestSegmentReader.checkNorms(reader);\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    TestSegmentReader.checkNorms(reader);\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    TestSegmentReader.checkNorms(reader);\n  }\n\n","bugFix":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiSegmentReader#doTestDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testDocument().mjava","sourceNew":"  public void doTestDocument() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    TestSegmentReader.checkNorms(reader);\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    TestSegmentReader.checkNorms(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125b5699f11b58d9be0820c6ce8b1648812902e8"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}