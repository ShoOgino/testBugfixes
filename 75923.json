{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7","date":1290867534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null) {\n            docWriter.resumeAllThreads();\n          }\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc0b63f7d001f66535877ec20cc8896ec2197143","date":1295888218,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a8a3c395573f31971a415972824d76a5c772cd8","date":1306706129,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      infoStream.message(\"IW\", \"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\"))\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          infoStream.message(\"IW\", \"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      infoStream.message(\"IW\", \"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\"))\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          infoStream.message(\"IW\", \"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      infoStream.message(\"IW\", \"now call final commit()\");\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\"))\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          infoStream.message(\"IW\", \"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fc0b63f7d001f66535877ec20cc8896ec2197143"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","6a8a3c395573f31971a415972824d76a5c772cd8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fc0b63f7d001f66535877ec20cc8896ec2197143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["8fe956d65251358d755c56f14fe8380644790e47"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6a8a3c395573f31971a415972824d76a5c772cd8"],"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7":["334c1175813aea771a71728cd2c4ee4754fd0603"],"06584e6e98d592b34e1329b384182f368d2025e8":["6a8a3c395573f31971a415972824d76a5c772cd8"],"6a8a3c395573f31971a415972824d76a5c772cd8":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fc0b63f7d001f66535877ec20cc8896ec2197143","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fc0b63f7d001f66535877ec20cc8896ec2197143","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fc0b63f7d001f66535877ec20cc8896ec2197143":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["334c1175813aea771a71728cd2c4ee4754fd0603","8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab5cb6a74aefb78aa0569857970b9151dfe2e787","fc0b63f7d001f66535877ec20cc8896ec2197143"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","3bb13258feba31ab676502787ab2e1779f129b7a"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"6a8a3c395573f31971a415972824d76a5c772cd8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","06584e6e98d592b34e1329b384182f368d2025e8"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["6a8a3c395573f31971a415972824d76a5c772cd8","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"334c1175813aea771a71728cd2c4ee4754fd0603":["8ebf8c7f71c978cb9cdc8f49ff9f14751927f8a7","3bb13258feba31ab676502787ab2e1779f129b7a"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"fc0b63f7d001f66535877ec20cc8896ec2197143":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"8fe956d65251358d755c56f14fe8380644790e47":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}