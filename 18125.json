{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,IndexInput).mjava","commits":[{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    // nocommit clean up\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, codec, diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4356000e349e38c9fb48034695b7c309abd54557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4356000e349e38c9fb48034695b7c309abd54557":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4356000e349e38c9fb48034695b7c309abd54557","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["352763be0465236f8e2ac188aa1b761cb3e1c9ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}