{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","commits":[{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n    Objects.checkFromIndexSize(off, len, bytes.length);\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(bytes, base, len);\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          ref = ht.get(off);\n          if (ref != -1) {\n            assert ref >= base && ref < off;\n            assert readInt(bytes, ref) == readInt(bytes, off);\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        // try to find a better match\n        for (int r = ht.previous(ref), min = Math.max(off - MAX_DISTANCE + 1, base); r >= min; r = ht.previous(r)) {\n          assert readInt(bytes, r) == readInt(bytes, off);\n          int rMatchLen = MIN_MATCH + commonBytes(bytes, r + MIN_MATCH, off + MIN_MATCH, limit);\n          if (rMatchLen > matchLen) {\n            ref = r;\n            matchLen = rMatchLen;\n          }\n        }\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(len);\n      final int hashLog = ht.hashLog;\n      final PackedInts.Mutable hashTable = ht.hashTable;\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compress(byte[],int,int,DataOutput,HashTable).mjava","sourceNew":"  /**\n   * Compress {@code bytes[off:off+len]} into {@code out} using at most 16kB of\n   * memory. {@code ht} shouldn't be shared across threads but can safely be\n   * reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n    compressWithDictionary(bytes, off, 0, len, out, ht);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory. <code>ht</code> shouldn't be shared across threads\n   * but can safely be reused.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out, HashTable ht) throws IOException {\n    Objects.checkFromIndexSize(off, len, bytes.length);\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(bytes, base, len);\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          ref = ht.get(off);\n          if (ref != -1) {\n            assert ref >= base && ref < off;\n            assert readInt(bytes, ref) == readInt(bytes, off);\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        // try to find a better match\n        for (int r = ht.previous(ref), min = Math.max(off - MAX_DISTANCE + 1, base); r >= min; r = ht.previous(r)) {\n          assert readInt(bytes, r) == readInt(bytes, off);\n          int rMatchLen = MIN_MATCH + commonBytes(bytes, r + MIN_MATCH, off + MIN_MATCH, limit);\n          if (rMatchLen > matchLen) {\n            ref = r;\n            matchLen = rMatchLen;\n          }\n        }\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["9407318969e8504257b4c5764c65755a043e5404"],"9407318969e8504257b4c5764c65755a043e5404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9407318969e8504257b4c5764c65755a043e5404"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9407318969e8504257b4c5764c65755a043e5404":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}