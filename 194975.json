{"path":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","commits":[{"id":"ee3a275f925be62184fad78d647fa70e27ac7cea","date":1301416659,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr/conf/solrconfig-collate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/conf/schema-collate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"c26f00b574427b55127e869b935845554afde1fa":["ee3a275f925be62184fad78d647fa70e27ac7cea","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"ee3a275f925be62184fad78d647fa70e27ac7cea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","ee3a275f925be62184fad78d647fa70e27ac7cea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"ee3a275f925be62184fad78d647fa70e27ac7cea":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}