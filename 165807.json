{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestHighFreqTerm().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestHighFreqTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void xxxtestHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuffer b = new StringBuffer(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuffer b = new StringBuffer(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuffer b = new StringBuffer(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void xxxtestHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuffer b = new StringBuffer(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}