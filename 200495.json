{"path":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","sourceNew":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","sourceNew":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","sourceNew":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Base64#byteArrayToBase64(byte[],int,int).mjava","sourceNew":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuilder result = new StringBuilder(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","sourceOld":"  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n    int aLen = len;\n    int numFullGroups = aLen / 3;\n    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n    int resultLen = 4 * ((aLen + 2) / 3);\n    StringBuffer result = new StringBuffer(resultLen);\n    char[] intToAlpha = intToBase64;\n\n    // Translate all full groups from byte array elements to Base64\n    int inCursor = offset;\n    for (int i = 0; i < numFullGroups; i++) {\n      int byte0 = a[inCursor++] & 0xff;\n      int byte1 = a[inCursor++] & 0xff;\n      int byte2 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n      result.append(intToAlpha[byte2 & 0x3f]);\n    }\n\n    // Translate partial group if present\n    if (numBytesInPartialGroup != 0) {\n      int byte0 = a[inCursor++] & 0xff;\n      result.append(intToAlpha[byte0 >> 2]);\n      if (numBytesInPartialGroup == 1) {\n        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n        result.append(\"==\");\n      } else {\n        // assert numBytesInPartialGroup == 2;\n        int byte1 = a[inCursor++] & 0xff;\n        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n        result.append('=');\n      }\n    }\n    return result.toString();\n  }\n\n","bugFix":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d06343967a29132f5d782f74e8d0988400278a02":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d06343967a29132f5d782f74e8d0988400278a02"]},"commit2Childs":{"d06343967a29132f5d782f74e8d0988400278a02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d06343967a29132f5d782f74e8d0988400278a02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}