{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","sourceNew":"  private boolean addLabel(HashArray a, CategoryPath label, int hash,\n                            int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      try {\n        label.serializeAppendTo(this.labelRepository);\n      } catch (IOException e) {\n        // can't happen - LabelRepository.append() never throws an\n        // exception\n      }\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean addLabel(HashArray a, CategoryPath label, int hash,\n                            int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      try {\n        label.serializeAppendTo(this.labelRepository);\n      } catch (IOException e) {\n        // can't happen - LabelRepository.append() never throws an\n        // exception\n      }\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","sourceNew":"  private boolean addLabel(HashArray a, CategoryPath label, int hash, int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      CategoryPathUtils.serialize(label, labelRepository);\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean addLabel(HashArray a, CategoryPath label, int hash,\n                            int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      try {\n        label.serializeAppendTo(this.labelRepository);\n      } catch (IOException e) {\n        // can't happen - LabelRepository.append() never throws an\n        // exception\n      }\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","sourceNew":"  private boolean addLabel(HashArray a, CategoryPath label, int hash, int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      CategoryPathUtils.serialize(label, labelRepository);\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean addLabel(HashArray a, CategoryPath label, int hash,\n                            int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      try {\n        label.serializeAppendTo(this.labelRepository);\n      } catch (IOException e) {\n        // can't happen - LabelRepository.append() never throws an\n        // exception\n      }\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,FacetLabel,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","sourceNew":"  private boolean addLabel(HashArray a, FacetLabel label, int hash, int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      CategoryPathUtils.serialize(label, labelRepository);\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean addLabel(HashArray a, CategoryPath label, int hash, int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      CategoryPathUtils.serialize(label, labelRepository);\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(HashArray,CategoryPath,int,int).mjava","sourceNew":null,"sourceOld":"  private boolean addLabel(HashArray a, CategoryPath label, int hash, int ordinal) {\n    int index = CompactLabelToOrdinal.indexFor(hash, a.offsets.length);\n    int offset = a.offsets[index];\n\n    if (offset == 0) {\n      a.offsets[index] = this.labelRepository.length();\n      CategoryPathUtils.serialize(label, labelRepository);\n      a.cids[index] = ordinal;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}