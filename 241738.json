{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","pathOld":"/dev/null","sourceNew":"  private static final Map<String, Values> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Values> result = new HashMap<String, Values>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\":\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname:ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Values.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8cf08f8700fa613f15866f2612ce0c4f639219","date":1287774732,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","sourceNew":"  private static final Map<String, Values> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Values> result = new HashMap<String, Values>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\"=\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname=ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Values.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","sourceOld":"  private static final Map<String, Values> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Values> result = new HashMap<String, Values>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\":\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname:ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Values.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","sourceNew":"  private static final Map<String, Type> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Type> result = new HashMap<String, Type>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\"=\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname=ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Type.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","sourceOld":"  private static final Map<String, Values> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Values> result = new HashMap<String, Values>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\"=\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname=ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Values.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#parseValueFields(String).mjava","sourceNew":null,"sourceOld":"  private static final Map<String, Type> parseValueFields(String fields) {\n    if(fields == null)\n      return Collections.emptyMap();\n    String[] split = fields.split(\";\");\n    Map<String, Type> result = new HashMap<String, Type>();\n    for (String tuple : split) {\n      final String[] nameValue = tuple.split(\"=\");\n      if (nameValue.length != 2) {\n        throw new IllegalArgumentException(\"illegal doc.stored.values format: \"\n            + fields + \" expected fieldname=ValuesType;...;...;\");\n      }\n      result.put(nameValue[0].trim(), Type.valueOf(nameValue[1]));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc8cf08f8700fa613f15866f2612ce0c4f639219":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["cc8cf08f8700fa613f15866f2612ce0c4f639219"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc8cf08f8700fa613f15866f2612ce0c4f639219":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["70ad682703b8585f5d0a637efec044d57ec05efb"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["cc8cf08f8700fa613f15866f2612ce0c4f639219"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}