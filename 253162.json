{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#previousBitSet(int,FST.BytesReader).mjava","commits":[{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#previousBitSet(int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#previousBitSet(long[],int,int).mjava","sourceNew":"  /**\n   * Returns the index of the previous bit set preceding the given bit zero-based index.\n   * <br>For example with bits 100011:\n   * there is no previous bit set before index=0.\n   * the previous bit set before index=1 is at index=0;\n   * the previous bit set before index=5 is at index=1;\n   * the previous bit set before index=64 is at index=5;\n   *\n   * @param bitIndex The bit zero-based index. It must be greater than or equal to 0, and less than or equal to\n   *                 {@code number of bit-table bytes * Byte.SIZE}.\n   * @param reader   The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   * @return The zero-based index of the previous bit set before the provided {@code bitIndex}; or -1 if none.\n   */\n  static int previousBitSet(int bitIndex, FST.BytesReader reader) throws IOException {\n    assert bitIndex >= 0 : \"bitIndex=\" + bitIndex;\n    int byteIndex = bitIndex >> 3;\n    reader.skipBytes(byteIndex);\n    int mask = (1 << (bitIndex & (Byte.SIZE - 1))) - 1;\n    int i = (reader.readByte() & 0xFF) & mask;\n    while (i == 0) {\n      if (byteIndex-- == 0) {\n        return -1;\n      }\n      reader.skipBytes(-2); // FST.BytesReader implementations support negative skip.\n      i = reader.readByte() & 0xFF;\n    }\n    return (Integer.SIZE - 1) - Integer.numberOfLeadingZeros(i) + (byteIndex << 3);\n  }\n\n","sourceOld":"  /**\n   * Returns the index of the previous bit set preceding the given bit zero-based index.\n   * <br>For example with bits 100011:\n   * there is no previous bit set before index=0.\n   * the previous bit set before index=1 is at index=0;\n   * the previous bit set before index=5 is at index=1;\n   * the previous bit set before index=64 is at index=5;\n   *\n   * @param bits     The bits stored in an array of long for efficiency.\n   * @param numLongs The number of longs in {@code bits} to consider.\n   * @param bitIndex The bit zero-based index. It must be greater than or equal to 0,\n   *                 and less than or equal to {@code numLongs * Long.SIZE}.\n   * @return The zero-based index of the previous bit set before the provided {@code bitIndex};\n   * or -1 if none.\n   */\n  public static int previousBitSet(long[] bits, int numLongs, int bitIndex) {\n    assert numLongs >= 0 && numLongs <= bits.length && bitIndex >= 0 && bitIndex <= numLongs * Long.SIZE\n        : \"bitIndex=\" + bitIndex + \" numLongs=\" + numLongs + \" bits.length=\" + bits.length;\n    int longIndex = bitIndex / Long.SIZE;\n    long l;\n    if (longIndex == numLongs) {\n      l = 0;\n    } else {\n      // Prepare a mask with 1s on the right up to bitIndex exclusive.\n      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.\n      l = bits[longIndex] & mask;\n    }\n    while (l == 0) {\n      if (longIndex-- == 0) {\n        return -1;\n      }\n      l = bits[longIndex];\n    }\n    return 63 - Long.numberOfLeadingZeros(l) + longIndex * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}