{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"683d3f90dda2bbb999c3ce855706d74563a53680":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["683d3f90dda2bbb999c3ce855706d74563a53680","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["683d3f90dda2bbb999c3ce855706d74563a53680"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"683d3f90dda2bbb999c3ce855706d74563a53680":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}