{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc1d11dfbce1eb1bbcca170e7921e0b0a3a7ee0","date":1544522038,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    listenerEventLatch = new CountDownLatch(4 + 5);\n    \n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction should have been init'ed w/in a reasonable amount of time\",\n               actionInitCalled.await(10, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners shou;d have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n    listenerEventLatch = new CountDownLatch(4 + 4); // fewer total due to failDummyAction\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    assertTrue(\"the listeners shoud have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(3000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    listenerEventLatch = new CountDownLatch(4 + 5);\n    \n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction was not init'ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n    listenerEventLatch = new CountDownLatch(4 + 4); // fewer total due to failDummyAction\n\n    newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    listenerEventLatch = new CountDownLatch(4 + 5);\n    \n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction should have been init'ed w/in a reasonable amount of time\",\n               actionInitCalled.await(10, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners shou;d have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n    listenerEventLatch = new CountDownLatch(4 + 4); // fewer total due to failDummyAction\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    assertTrue(\"the listeners shoud have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(10, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    listenerEventLatch = new CountDownLatch(4 + 5);\n    \n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [\" +\n       \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n       \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n       \"]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'foo',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n       \"'beforeAction' : 'test',\" +\n       \"'afterAction' : ['test', 'test1'],\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'bar',\" +\n       \"'trigger' : 'node_added_trigger',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'beforeAction' : ['test', 'test1'],\" +\n       \"'afterAction' : 'test',\" +\n       \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    assertAutoscalingUpdateComplete();\n    assertTrue(\"The TriggerAction was not init'ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n    listenerEventLatch = new CountDownLatch(4 + 4); // fewer total due to failDummyAction\n\n    newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n\n    assertTrue(\"the listeners didn't recorded all events even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    assertEquals(\"at least 2 event types should have been recorded\", 2, listenerEvents.size());\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"adc1d11dfbce1eb1bbcca170e7921e0b0a3a7ee0":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["adc1d11dfbce1eb1bbcca170e7921e0b0a3a7ee0"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"adc1d11dfbce1eb1bbcca170e7921e0b0a3a7ee0":["89948af0461fead48f44ba8fb7866f107ce83f22"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["adc1d11dfbce1eb1bbcca170e7921e0b0a3a7ee0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}