{"path":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","commits":[{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        cachedScorer.score = scorer.score();\n        cachedScorer.doc = doc;\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            curScores = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            cachedScores.clear();\n            cachedScorer.score = scorer.score();\n            cachedScorer.doc = doc;\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        curScores = new float[nextLength];\n        cachedScores.add(curScores);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      cachedScorer.score = curScores[upto] = scorer.score();\n      upto++;\n      cachedScorer.doc = doc;\n      other.collect(doc);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        cachedScorer.score = scorer.score();\n        cachedScorer.doc = doc;\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            curScores = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            cachedScores.clear();\n            cachedScorer.score = scorer.score();\n            cachedScorer.doc = doc;\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        curScores = new float[nextLength];\n        cachedScores.add(curScores);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      cachedScorer.score = curScores[upto] = scorer.score();\n      upto++;\n      cachedScorer.doc = doc;\n      other.collect(doc);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        cachedScorer.score = scorer.score();\n        cachedScorer.doc = doc;\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            curScores = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            cachedScores.clear();\n            cachedScorer.score = scorer.score();\n            cachedScorer.doc = doc;\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        curScores = new float[nextLength];\n        cachedScores.add(curScores);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      cachedScorer.score = curScores[upto] = scorer.score();\n      upto++;\n      cachedScorer.doc = doc;\n      other.collect(doc);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        cachedScorer.score = scorer.score();\n        cachedScorer.doc = doc;\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            curScores = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            cachedScores.clear();\n            cachedScorer.score = scorer.score();\n            cachedScorer.doc = doc;\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        curScores = new float[nextLength];\n        cachedScores.add(curScores);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      cachedScorer.score = curScores[upto] = scorer.score();\n      upto++;\n      cachedScorer.doc = doc;\n      other.collect(doc);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        cachedScorer.score = scorer.score();\n        cachedScorer.doc = doc;\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            curScores = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            cachedScores.clear();\n            cachedScorer.score = scorer.score();\n            cachedScorer.doc = doc;\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        curScores = new float[nextLength];\n        cachedScores.add(curScores);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      cachedScorer.score = curScores[upto] = scorer.score();\n      upto++;\n      cachedScorer.doc = doc;\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6703e55954db440ab8a2bc2a615c4fa9f66b602b","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}