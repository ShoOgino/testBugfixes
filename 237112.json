{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher#testWaitForStateWatcherIsRetainedOnPredicateFailure().mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher#testWaitForStateWatcherIsRetainedOnPredicateFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWaitForStateWatcherIsRetainedOnPredicateFailure() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"falsepredicate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    // create collection with 1 shard 1 replica...\n    client.waitForState(\"falsepredicate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    // set watcher waiting for at least 3 replicas (will fail initially)\n    final AtomicInteger runCount = new AtomicInteger(0);\n    final Future<Boolean> future = waitInBackground\n      (\"falsepredicate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n       (collectionState) -> {\n        runCount.incrementAndGet();\n        int replicas = 0;\n        for (Slice slice : collectionState) {\n          for (Replica replica : slice) {\n            replicas++;\n          }\n        }\n        return 3 <= replicas;\n      });\n\n    // add a 2nd replica...\n    CollectionAdminRequest.addReplicaToShard(\"falsepredicate\", \"shard1\")\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"falsepredicate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // confirm watcher has run at least once and has been retained...\n    final int runCountSnapshot = runCount.get();\n    assertTrue(0 < runCountSnapshot);\n    assertEquals(1, client.getZkStateReader().getStateWatchers(\"falsepredicate\").size());\n    \n    // now add a 3rd replica...\n    CollectionAdminRequest.addReplicaToShard(\"falsepredicate\", \"shard1\")\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    // now confirm watcher is invoked & removed\n    assertTrue(\"watcher never succeeded\", future.get());\n    assertTrue(runCountSnapshot < runCount.get());\n    waitFor(\"DocCollectionWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"falsepredicate\").size() == 0);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}