{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":null,"sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}