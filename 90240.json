{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","commits":[{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad55dd51ee5593c207639943b98a58782872b232","date":1520180625,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","bugFix":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr, false);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr, false);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr, false);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad55dd51ee5593c207639943b98a58782872b232":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ad55dd51ee5593c207639943b98a58782872b232","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["ad55dd51ee5593c207639943b98a58782872b232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ad55dd51ee5593c207639943b98a58782872b232","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"ad55dd51ee5593c207639943b98a58782872b232":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ad55dd51ee5593c207639943b98a58782872b232"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}