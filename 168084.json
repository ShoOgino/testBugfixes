{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","commits":[{"id":"f7523916a1350712e1ae710affd4e88ccd7c431d","date":1412161942,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n    if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) { // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n    if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) { // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","sourceOld":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n    if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) { // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","sourceOld":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","sourceOld":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#CheckIndex(Directory,Lock).mjava","sourceNew":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","sourceOld":"  /** \n   * Expert: create a directory with the specified lock.\n   * This should really not be used except for unit tests!!!!\n   * It exists only to support special tests (such as TestIndexWriterExceptions*),\n   * that would otherwise be more complicated to debug if they had to close the writer\n   * for each check.\n   */\n  public CheckIndex(Directory dir, Lock writeLock) throws IOException {\n    this.dir = dir;\n    this.writeLock = writeLock;\n    this.infoStream = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["618635065f043788c9e034f96ca5cd5cea1b4592","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"f7523916a1350712e1ae710affd4e88ccd7c431d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7523916a1350712e1ae710affd4e88ccd7c431d"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["618635065f043788c9e034f96ca5cd5cea1b4592"],"f592209545c71895260367152601e9200399776d":["618635065f043788c9e034f96ca5cd5cea1b4592","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7523916a1350712e1ae710affd4e88ccd7c431d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f7523916a1350712e1ae710affd4e88ccd7c431d":["618635065f043788c9e034f96ca5cd5cea1b4592","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","d9a47902d6207303f5ed3e7aaca62ca33433af66","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}