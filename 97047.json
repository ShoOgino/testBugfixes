{"path":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","sourceNew":null,"sourceOld":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","sourceNew":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"017c035439201490351b0f5f3d33a393c6c24551","date":1305551986,"type":5,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],int,int,int).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            getDocs(cluster).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            getLabels(cluster).size());\n\n    if (expectedSubclusterCount > 0) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],int,int,int).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            getDocs(cluster).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            getLabels(cluster).size());\n\n    if (expectedSubclusterCount > 0) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,int,int,int).mjava","sourceNew":null,"sourceOld":"  private void checkCluster(NamedList cluster, int expectedDocCount,\n                            int expectedLabelCount, int expectedSubclusterCount) {\n    checkCluster(cluster, expectedSubclusterCount > 0);\n    assertEquals(\"number of docs in cluster\", expectedDocCount,\n            ((List) cluster.get(\"docs\")).size());\n    assertEquals(\"number of labels in cluster\", expectedLabelCount,\n            ((List) cluster.get(\"labels\")).size());\n\n    if (expectedSubclusterCount > 0) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertEquals(\"numClusters\", expectedSubclusterCount, subclusters.size());\n      assertEquals(\"number of subclusters in cluster\",\n              expectedSubclusterCount, subclusters.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"017c035439201490351b0f5f3d33a393c6c24551":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["1da8d55113b689b06716246649de6f62430f15c0","017c035439201490351b0f5f3d33a393c6c24551"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","017c035439201490351b0f5f3d33a393c6c24551"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["017c035439201490351b0f5f3d33a393c6c24551"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["017c035439201490351b0f5f3d33a393c6c24551","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"017c035439201490351b0f5f3d33a393c6c24551":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}