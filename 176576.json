{"path":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          BytesRef br = new BytesRef(\"test\");\n          doc.add(newStringField(\"id\", br, Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", br), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newStringField(\"id\", \"test\", Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          BytesRef br = new BytesRef(\"test\");\n          doc.add(newStringField(\"id\", br, Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", br), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          BytesRef br = new BytesRef(\"test\");\n          doc.add(newStringField(\"id\", br, Field.Store.NO));\n          writer.updateDocument(new Term(\"id\", br), doc);\n          if (random().nextInt(3) == 0) {\n            if (open == null) {\n              open = DirectoryReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["04f07771a2a7dd3a395700665ed839c3dae2def2","7530de27b87b961b51f01bd1299b7004d46e8823"],"2a1862266772deb28cdcb7d996b64d2177022687":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["7530de27b87b961b51f01bd1299b7004d46e8823"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["2a1862266772deb28cdcb7d996b64d2177022687"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","399d127639ae13222a8545b50e0ac545a6bcd2d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}