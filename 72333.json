{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","commits":[{"id":"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","date":1458507332,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","sourceNew":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":"  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","sourceNew":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":"  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","sourceNew":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\",\n          \"//result/doc[4]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\",\n          \"//result/doc[4]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\",\n          \"//result/doc[3]/str[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=6]\",\n          \"//result/doc[7]/str[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","sourceNew":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\",\n          \"//result/doc[4]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\",\n          \"//result/doc[4]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\",\n          \"//result/doc[3]/str[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=6]\",\n          \"//result/doc[7]/str[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testFloatAndDoubleRangeQuery().mjava","sourceNew":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=3]\",\n          \"//result/doc[3]/str[@name='id'][.=4]\",\n          \"//result/doc[4]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=5]\",\n          \"//result/doc[4]/str[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=5]\",\n          \"//result/doc[3]/str[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id_i asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/str[@name='id'][.=1]\",\n          \"//result/doc[2]/str[@name='id'][.=2]\",\n          \"//result/doc[3]/str[@name='id'][.=3]\",\n          \"//result/doc[4]/str[@name='id'][.=4]\",\n          \"//result/doc[5]/str[@name='id'][.=5]\",\n          \"//result/doc[6]/str[@name='id'][.=6]\",\n          \"//result/doc[7]/str[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFloatAndDoubleRangeQuery() throws Exception {\n    String fieldName[] = new String[] {\"floatdv\", \"doubledv\"};\n    String largestNegative[] = new String[] {String.valueOf(0f-Float.MIN_NORMAL), String.valueOf(0f-Double.MIN_NORMAL)};\n    String negativeInfinity[] = new String[] {String.valueOf(Float.NEGATIVE_INFINITY), String.valueOf(Double.NEGATIVE_INFINITY)};\n    String largestValue[] = new String[] {String.valueOf(Float.MAX_VALUE), String.valueOf(Double.MAX_VALUE)};\n    \n    for (int i=0; i<fieldName.length; i++) {\n      assertU(adoc(\"id\", \"1\", fieldName[i], \"2\"));\n      assertU(adoc(\"id\", \"2\", fieldName[i], \"-5\"));\n      assertU(adoc(\"id\", \"3\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"4\", fieldName[i], \"3\"));\n      assertU(adoc(\"id\", \"5\", fieldName[i], largestNegative[i]));\n      assertU(adoc(\"id\", \"6\", fieldName[i], negativeInfinity[i]));\n      assertU(adoc(\"id\", \"7\", fieldName[i], largestValue[i]));\n      assertU(commit());\n\n      // Negative Zero to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-0.0 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='1']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\"\n          );\n\n      // Negative to Positive Zero\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 0]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\"\n          );\n\n      // Negative to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO 2.5]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\"\n          );\n\n      // Positive to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO 3]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\"\n          );\n\n      // Positive to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[2 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=3]\",\n          \"//result/doc[3]/int[@name='id'][.=4]\",\n          \"//result/doc[4]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to Negative\n      assertQ(req(\"q\", fieldName[i]+\":[* TO -1]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='2']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=5]\",\n          \"//result/doc[4]/int[@name='id'][.=6]\"\n          );\n\n      // NEGATIVE_INF to Positive (non-inclusive)\n      assertQ(req(\"q\", fieldName[i]+\":[* TO 2}\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/int[@name='id'][.=2]\",\n          \"//result/doc[2]/int[@name='id'][.=5]\",\n          \"//result/doc[3]/int[@name='id'][.=6]\"\n          );\n\n      // Negative to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[-6 TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]),\n          \"//*[@numFound='6']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=7]\"\n          );\n\n      // NEGATIVE_INF to POSITIVE_INF\n      assertQ(req(\"q\", fieldName[i]+\":[* TO *]\", \"sort\", \"id asc\", \"fl\", \"id,\"+fieldName[i]+\",score\"),\n          \"//*[@numFound='7']\",\n          \"//result/doc[1]/int[@name='id'][.=1]\",\n          \"//result/doc[2]/int[@name='id'][.=2]\",\n          \"//result/doc[3]/int[@name='id'][.=3]\",\n          \"//result/doc[4]/int[@name='id'][.=4]\",\n          \"//result/doc[5]/int[@name='id'][.=5]\",\n          \"//result/doc[6]/int[@name='id'][.=6]\",\n          \"//result/doc[7]/int[@name='id'][.=7]\",\n          \"//result/doc[1]/float[@name='score'][.=1.0]\",\n          \"//result/doc[2]/float[@name='score'][.=1.0]\",\n          \"//result/doc[3]/float[@name='score'][.=1.0]\",\n          \"//result/doc[4]/float[@name='score'][.=1.0]\",\n          \"//result/doc[5]/float[@name='score'][.=1.0]\",\n          \"//result/doc[6]/float[@name='score'][.=1.0]\",\n          \"//result/doc[7]/float[@name='score'][.=1.0]\"\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}