{"path":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","commits":[{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          for(PerDocValues producer : producers.values()) {\n            try {\n              producer.close();\n            } catch (Throwable t) {\n              // Suppress all exceptions here so we continue\n              // to throw the original one\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763d13ecba7c2e244aa7c7690a878daae26227f6","date":1305814974,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          for(PerDocValues producer : producers.values()) {\n            try {\n              producer.close();\n            } catch (Throwable t) {\n              // Suppress all exceptions here so we continue\n              // to throw the original one\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            fields.add(fi.name);\n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          for(PerDocValues producer : producers.values()) {\n            try {\n              producer.close();\n            } catch (Throwable t) {\n              // Suppress all exceptions here so we continue\n              // to throw the original one\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          for(PerDocValues producer : producers.values()) {\n            try {\n              producer.close();\n            } catch (Throwable t) {\n              // Suppress all exceptions here so we continue\n              // to throw the original one\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a185250ef8bf8d6f862abe27ac702b153daa858","date":1307713797,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // If we hit exception (eg, IOE because writer was\n          // committing, or, for any other reason) we must\n          // go back and close all FieldsProducers we opened:\n          for(PerDocValues producer : producers.values()) {\n            try {\n              producer.close();\n            } catch (Throwable t) {\n              // Suppress all exceptions here so we continue\n              // to throw the original one\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.PerDocProducers#PerDocProducers(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        IOContext context, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, context, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","sourceOld":"    public PerDocProducers(Directory dir, FieldInfos fieldInfos, SegmentInfo si,\n        int readBufferSize, int indexDivisor) throws IOException {\n      final Map<Codec, PerDocValues> producers = new HashMap<Codec, PerDocValues>();\n      boolean success = false;\n      try {\n        for (FieldInfo fi : fieldInfos) {\n          if (fi.hasDocValues()) { \n            assert fi.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID;\n            Codec codec = segmentCodecs.codecs[fi.getCodecId()];\n            if (!producers.containsKey(codec)) {\n              producers.put(codec, codec.docsProducer(new SegmentReadState(dir,\n                si, fieldInfos, readBufferSize, indexDivisor, fi.getCodecId())));\n            }\n            codecs.put(fi.name, producers.get(codec));\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, producers.values());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a185250ef8bf8d6f862abe27ac702b153daa858"],"763d13ecba7c2e244aa7c7690a878daae26227f6":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","763d13ecba7c2e244aa7c7690a878daae26227f6"],"4a185250ef8bf8d6f862abe27ac702b153daa858":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["4a185250ef8bf8d6f862abe27ac702b153daa858"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4a185250ef8bf8d6f862abe27ac702b153daa858","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"763d13ecba7c2e244aa7c7690a878daae26227f6":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["4a185250ef8bf8d6f862abe27ac702b153daa858"],"4a185250ef8bf8d6f862abe27ac702b153daa858":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["763d13ecba7c2e244aa7c7690a878daae26227f6"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}