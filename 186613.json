{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/TermFilteredPresearcher#buildQuery(LeafReader,BiPredicate[String,BytesRef]).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/TermFilteredPresearcher#buildQuery(LeafReader,BiPredicate[String,BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Query buildQuery(LeafReader reader, BiPredicate<String, BytesRef> termAcceptor) {\n    try {\n      DocumentQueryBuilder queryBuilder = getQueryBuilder();\n      for (FieldInfo field : reader.getFieldInfos()) {\n\n        TokenStream ts = new TermsEnumTokenStream(reader.terms(field.name).iterator());\n        for (CustomQueryHandler handler : queryHandlers) {\n          ts = handler.wrapTermStream(field.name, ts);\n        }\n\n        ts = new FilteringTokenFilter(ts) {\n          TermToBytesRefAttribute termAtt = addAttribute(TermToBytesRefAttribute.class);\n          @Override\n          protected boolean accept() {\n            return filterFields.contains(field.name) == false && termAcceptor.test(field.name, termAtt.getBytesRef());\n          }\n        };\n\n        TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n        while (ts.incrementToken()) {\n          queryBuilder.addTerm(field.name, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        }\n        ts.close();\n\n      }\n      Query presearcherQuery = queryBuilder.build();\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(presearcherQuery, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(ANYTOKEN_FIELD, ANYTOKEN)), BooleanClause.Occur.SHOULD);\n      presearcherQuery = bq.build();\n      if (filterFields.isEmpty() == false) {\n        bq = new BooleanQuery.Builder();\n        bq.add(presearcherQuery, BooleanClause.Occur.MUST);\n        Query filterQuery = buildFilterFields(reader);\n        if (filterQuery != null) {\n          bq.add(filterQuery, BooleanClause.Occur.FILTER);\n          presearcherQuery = bq.build();\n        }\n      }\n      return presearcherQuery;\n    } catch (IOException e) {\n      // We're a MemoryIndex, so this shouldn't happen...\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be7d4224f6806f83f7ff05240ba956ff5eba1bcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be7d4224f6806f83f7ff05240ba956ff5eba1bcc","date":1585345261,"type":3,"author":"Marvin Justice","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/TermFilteredPresearcher#buildQuery(LeafReader,BiPredicate[String,BytesRef]).mjava","pathOld":"lucene/monitor/src/java/org/apache/lucene/monitor/TermFilteredPresearcher#buildQuery(LeafReader,BiPredicate[String,BytesRef]).mjava","sourceNew":"  @Override\n  public final Query buildQuery(LeafReader reader, BiPredicate<String, BytesRef> termAcceptor) {\n    try {\n      DocumentQueryBuilder queryBuilder = getQueryBuilder();\n      for (FieldInfo field : reader.getFieldInfos()) {\n\n        Terms terms = reader.terms(field.name);\n        if (terms == null) {\n          continue;\n        }\n\n        TokenStream ts = new TermsEnumTokenStream(terms.iterator());\n        for (CustomQueryHandler handler : queryHandlers) {\n          ts = handler.wrapTermStream(field.name, ts);\n        }\n\n        ts = new FilteringTokenFilter(ts) {\n          TermToBytesRefAttribute termAtt = addAttribute(TermToBytesRefAttribute.class);\n          @Override\n          protected boolean accept() {\n            return filterFields.contains(field.name) == false && termAcceptor.test(field.name, termAtt.getBytesRef());\n          }\n        };\n\n        TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n        while (ts.incrementToken()) {\n          queryBuilder.addTerm(field.name, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        }\n        ts.close();\n\n      }\n      Query presearcherQuery = queryBuilder.build();\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(presearcherQuery, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(ANYTOKEN_FIELD, ANYTOKEN)), BooleanClause.Occur.SHOULD);\n      presearcherQuery = bq.build();\n      if (filterFields.isEmpty() == false) {\n        bq = new BooleanQuery.Builder();\n        bq.add(presearcherQuery, BooleanClause.Occur.MUST);\n        Query filterQuery = buildFilterFields(reader);\n        if (filterQuery != null) {\n          bq.add(filterQuery, BooleanClause.Occur.FILTER);\n          presearcherQuery = bq.build();\n        }\n      }\n      return presearcherQuery;\n    } catch (IOException e) {\n      // We're a MemoryIndex, so this shouldn't happen...\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public final Query buildQuery(LeafReader reader, BiPredicate<String, BytesRef> termAcceptor) {\n    try {\n      DocumentQueryBuilder queryBuilder = getQueryBuilder();\n      for (FieldInfo field : reader.getFieldInfos()) {\n\n        TokenStream ts = new TermsEnumTokenStream(reader.terms(field.name).iterator());\n        for (CustomQueryHandler handler : queryHandlers) {\n          ts = handler.wrapTermStream(field.name, ts);\n        }\n\n        ts = new FilteringTokenFilter(ts) {\n          TermToBytesRefAttribute termAtt = addAttribute(TermToBytesRefAttribute.class);\n          @Override\n          protected boolean accept() {\n            return filterFields.contains(field.name) == false && termAcceptor.test(field.name, termAtt.getBytesRef());\n          }\n        };\n\n        TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n        while (ts.incrementToken()) {\n          queryBuilder.addTerm(field.name, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        }\n        ts.close();\n\n      }\n      Query presearcherQuery = queryBuilder.build();\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(presearcherQuery, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(ANYTOKEN_FIELD, ANYTOKEN)), BooleanClause.Occur.SHOULD);\n      presearcherQuery = bq.build();\n      if (filterFields.isEmpty() == false) {\n        bq = new BooleanQuery.Builder();\n        bq.add(presearcherQuery, BooleanClause.Occur.MUST);\n        Query filterQuery = buildFilterFields(reader);\n        if (filterQuery != null) {\n          bq.add(filterQuery, BooleanClause.Occur.FILTER);\n          presearcherQuery = bq.build();\n        }\n      }\n      return presearcherQuery;\n    } catch (IOException e) {\n      // We're a MemoryIndex, so this shouldn't happen...\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["7c529b189e09de25455d82ebd7260748cf11ee14"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be7d4224f6806f83f7ff05240ba956ff5eba1bcc":["7c529b189e09de25455d82ebd7260748cf11ee14"],"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be7d4224f6806f83f7ff05240ba956ff5eba1bcc"]},"commit2Childs":{"be7d4224f6806f83f7ff05240ba956ff5eba1bcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c529b189e09de25455d82ebd7260748cf11ee14":["be7d4224f6806f83f7ff05240ba956ff5eba1bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}