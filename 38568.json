{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f","date":1496913354,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","sourceNew":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = TestLinearModel.makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","sourceNew":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = TestLinearModel.makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRScoringQuery#testLTRScoringQueryEquality().mjava","sourceNew":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = TestLinearModel.makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testLTRScoringQueryEquality() throws ModelException {\n    final List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFeatures(\n        new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    final Map<String,Object> modelParams = makeFeatureWeights(features);\n\n    final LTRScoringModel algorithm1 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n\n    final LTRScoringQuery m0 = new LTRScoringQuery(algorithm1);\n\n    final HashMap<String,String[]> externalFeatureInfo = new HashMap<>();\n    externalFeatureInfo.put(\"queryIntent\", new String[] {\"company\"});\n    externalFeatureInfo.put(\"user_query\", new String[] {\"abc\"});\n    final LTRScoringQuery m1 = new LTRScoringQuery(algorithm1, externalFeatureInfo, false, null);\n\n    final HashMap<String,String[]> externalFeatureInfo2 = new HashMap<>();\n    externalFeatureInfo2.put(\"user_query\", new String[] {\"abc\"});\n    externalFeatureInfo2.put(\"queryIntent\", new String[] {\"company\"});\n    int totalPoolThreads = 10, numThreadsPerRequest = 10;\n    LTRThreadModule threadManager = new LTRThreadModule(totalPoolThreads, numThreadsPerRequest);\n    final LTRScoringQuery m2 = new LTRScoringQuery(algorithm1, externalFeatureInfo2, false, threadManager);\n\n\n    // Models with same algorithm and efis, just in different order should be the same\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    // Models with same algorithm, but different efi content should not match\n    assertFalse(m1.equals(m0));\n    assertFalse(m1.hashCode() == m0.hashCode());\n\n\n    final LTRScoringModel algorithm2 = TestLinearModel.createLinearModel(\n        \"testModelName2\",\n        features, norms, \"testStoreName\", allFeatures, modelParams);\n    final LTRScoringQuery m3 = new LTRScoringQuery(algorithm2);\n\n    assertFalse(m1.equals(m3));\n    assertFalse(m1.hashCode() == m3.hashCode());\n\n    final LTRScoringModel algorithm3 = TestLinearModel.createLinearModel(\n        \"testModelName\",\n        features, norms, \"testStoreName3\", allFeatures, modelParams);\n    final LTRScoringQuery m4 = new LTRScoringQuery(algorithm3);\n\n    assertFalse(m1.equals(m4));\n    assertFalse(m1.hashCode() == m4.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"28288370235ed02234a64753cdbf0c6ec096304a":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","4bb8aa50eb067e6c60b53a4b0c32db5c692c572f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","4bb8aa50eb067e6c60b53a4b0c32db5c692c572f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","4bb8aa50eb067e6c60b53a4b0c32db5c692c572f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}