{"path":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      String originalTerm = termAtt.term();\n      stemmer.setCurrent(originalTerm);\n      stemmer.stem();\n      String finalTerm = stemmer.getCurrent();\n      // Don't bother updating, if it is unchanged.\n      if (!originalTerm.equals(finalTerm))\n        termAtt.setTermBuffer(finalTerm);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      String originalTerm = termAtt.term();\n      stemmer.setCurrent(originalTerm);\n      stemmer.stem();\n      String finalTerm = stemmer.getCurrent();\n      // Don't bother updating, if it is unchanged.\n      if (!originalTerm.equals(finalTerm))\n        termAtt.setTermBuffer(finalTerm);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      String originalTerm = termAtt.term();\n      stemmer.setCurrent(originalTerm);\n      stemmer.stem();\n      String finalTerm = stemmer.getCurrent();\n      // Don't bother updating, if it is unchanged.\n      if (!originalTerm.equals(finalTerm))\n        termAtt.setTermBuffer(finalTerm);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"896db35433d86885314c8b90861ea2a76174c1b6","date":1263044051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, 0, length);\n      stemmer.stem();\n      final StringBuilder finalTerm = stemmer.getCurrentBuffer();\n      final int newLength = finalTerm.length();\n      if (newLength > termBuffer.length)\n        termBuffer = termAtt.resizeTermBuffer(newLength);\n      finalTerm.getChars(0, newLength, termBuffer, 0);\n      termAtt.setTermLength(newLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      String originalTerm = termAtt.term();\n      stemmer.setCurrent(originalTerm);\n      stemmer.stem();\n      String finalTerm = stemmer.getCurrent();\n      // Don't bother updating, if it is unchanged.\n      if (!originalTerm.equals(finalTerm))\n        termAtt.setTermBuffer(finalTerm);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bc7429500777cb3888bd40a90e5da1a57aa1681","date":1263421761,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, 0, length);\n      stemmer.stem();\n      final StringBuilder finalTerm = stemmer.getCurrentBuffer();\n      final int newLength = finalTerm.length();\n      if (newLength > termBuffer.length)\n        termBuffer = termAtt.resizeTermBuffer(newLength);\n      finalTerm.getChars(0, newLength, termBuffer, 0);\n      termAtt.setTermLength(newLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40ff39db4a2b90a440b97f2a7d7eda344f004ef","date":1264074978,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"896db35433d86885314c8b90861ea2a76174c1b6":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["8bc7429500777cb3888bd40a90e5da1a57aa1681"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"8bc7429500777cb3888bd40a90e5da1a57aa1681":["896db35433d86885314c8b90861ea2a76174c1b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"]},"commit2Childs":{"896db35433d86885314c8b90861ea2a76174c1b6":["8bc7429500777cb3888bd40a90e5da1a57aa1681"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["896db35433d86885314c8b90861ea2a76174c1b6"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8bc7429500777cb3888bd40a90e5da1a57aa1681":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}