{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#getAllFacets(String,IndexSearcher,TaxonomyReader,FacetsConfig).mjava","commits":[{"id":"4b8b2bc4b8b503cc0b5743b19445798c62069e4d","date":1477390943,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#getAllFacets(String,IndexSearcher,TaxonomyReader,FacetsConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Facets getAllFacets(String indexFieldName, IndexSearcher searcher, TaxonomyReader taxoReader, FacetsConfig config) throws IOException {\n    if (random().nextBoolean()) {\n      // Aggregate the facet counts:\n      FacetsCollector c = new FacetsCollector();\n\n      // MatchAllDocsQuery is for \"browsing\" (counts facets\n      // for all non-deleted docs in the index); normally\n      // you'd use a \"normal\" query, and use MultiCollector to\n      // wrap collecting the \"normal\" hits and also facets:\n      searcher.search(new MatchAllDocsQuery(), c);\n\n      return new FastTaxonomyFacetCounts(taxoReader, config, c);\n    } else {\n      return new FastTaxonomyFacetCounts(indexFieldName, searcher.getIndexReader(), taxoReader, config);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#getAllFacets(String,IndexSearcher,TaxonomyReader,FacetsConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Facets getAllFacets(String indexFieldName, IndexSearcher searcher, TaxonomyReader taxoReader, FacetsConfig config) throws IOException {\n    if (random().nextBoolean()) {\n      // Aggregate the facet counts:\n      FacetsCollector c = new FacetsCollector();\n\n      // MatchAllDocsQuery is for \"browsing\" (counts facets\n      // for all non-deleted docs in the index); normally\n      // you'd use a \"normal\" query, and use MultiCollector to\n      // wrap collecting the \"normal\" hits and also facets:\n      searcher.search(new MatchAllDocsQuery(), c);\n\n      return new FastTaxonomyFacetCounts(taxoReader, config, c);\n    } else {\n      return new FastTaxonomyFacetCounts(indexFieldName, searcher.getIndexReader(), taxoReader, config);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#getAllFacets(String,IndexSearcher,TaxonomyReader,FacetsConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Facets getAllFacets(String indexFieldName, IndexSearcher searcher, TaxonomyReader taxoReader, FacetsConfig config) throws IOException {\n    if (random().nextBoolean()) {\n      // Aggregate the facet counts:\n      FacetsCollector c = new FacetsCollector();\n\n      // MatchAllDocsQuery is for \"browsing\" (counts facets\n      // for all non-deleted docs in the index); normally\n      // you'd use a \"normal\" query, and use MultiCollector to\n      // wrap collecting the \"normal\" hits and also facets:\n      searcher.search(new MatchAllDocsQuery(), c);\n\n      return new FastTaxonomyFacetCounts(taxoReader, config, c);\n    } else {\n      return new FastTaxonomyFacetCounts(indexFieldName, searcher.getIndexReader(), taxoReader, config);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}