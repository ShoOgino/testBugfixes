{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","commits":[{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether a registry with a given (overridable) name already exists.\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = overridableRegistryName(name);\n    return names.contains(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether a registry with a given (overridable) name already exists.\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = overridableRegistryName(name);\n    return names.contains(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","sourceNew":"  /**\n   * Check whether a registry with a given name already exists.\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = enforcePrefix(name);\n    return names.contains(name);\n  }\n\n","sourceOld":"  /**\n   * Check whether a registry with a given (overridable) name already exists.\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = overridableRegistryName(name);\n    return names.contains(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#hasRegistry(String).mjava","sourceNew":"  /**\n   * Check whether a registry with a given name already exists.\n   *\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = enforcePrefix(name);\n    return names.contains(name);\n  }\n\n","sourceOld":"  /**\n   * Check whether a registry with a given name already exists.\n   * @param name registry name\n   * @return true if this name points to a registry that already exists, false otherwise\n   */\n  public boolean hasRegistry(String name) {\n    Set<String> names = registryNames();\n    name = enforcePrefix(name);\n    return names.contains(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68541eebed1904d72a1ab713fc1afcec49e3f466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"68541eebed1904d72a1ab713fc1afcec49e3f466":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68541eebed1904d72a1ab713fc1afcec49e3f466","e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}