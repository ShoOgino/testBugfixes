{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8WithHash(char[],int,int,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8WithHash(char[],int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8WithHash(char[],int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns a hash of the resulting bytes.  After encoding, result.offset will always be 0. */\n  // TODO: broken if incoming result.offset != 0\n  public static int UTF16toUTF8WithHash(final char[] source, final int offset, final int length, BytesRef result) {\n    int hash = 0;\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.bytes;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[ArrayUtil.oversize(maxLen, 1)];\n    result.offset = 0;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (code < 0x80) {\n        hash = 31*hash + (out[upto++] = (byte) code);\n      } else if (code < 0x800) {\n        hash = 31*hash + (out[upto++] = (byte) (0xC0 | (code >> 6)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        hash = 31*hash + (out[upto++] = (byte)(0xE0 | (code >> 12)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            hash = 31*hash + (out[upto++] = (byte)(0xF0 | (utf32 >> 18)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | (utf32 & 0x3F)));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        hash = 31*hash + (out[upto++] = (byte) 0xEF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBD);\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n    return hash;\n  }\n\n","sourceOld":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns a hash of the resulting bytes.  After encoding, result.offset will always be 0. */\n  // TODO: broken if incoming result.offset != 0\n  public static int UTF16toUTF8WithHash(final char[] source, final int offset, final int length, BytesRef result) {\n    int hash = 0;\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.bytes;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[ArrayUtil.oversize(maxLen, 1)];\n    result.offset = 0;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (code < 0x80) {\n        hash = 31*hash + (out[upto++] = (byte) code);\n      } else if (code < 0x800) {\n        hash = 31*hash + (out[upto++] = (byte) (0xC0 | (code >> 6)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        hash = 31*hash + (out[upto++] = (byte)(0xE0 | (code >> 12)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            hash = 31*hash + (out[upto++] = (byte)(0xF0 | (utf32 >> 18)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | (utf32 & 0x3F)));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        hash = 31*hash + (out[upto++] = (byte) 0xEF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBD);\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8WithHash(char[],int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns a hash of the resulting bytes.  After encoding, result.offset will always be 0. */\n  // TODO: broken if incoming result.offset != 0\n  public static int UTF16toUTF8WithHash(final char[] source, final int offset, final int length, BytesRef result) {\n    int hash = 0;\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.bytes;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[ArrayUtil.oversize(maxLen, 1)];\n    result.offset = 0;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (code < 0x80) {\n        hash = 31*hash + (out[upto++] = (byte) code);\n      } else if (code < 0x800) {\n        hash = 31*hash + (out[upto++] = (byte) (0xC0 | (code >> 6)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        hash = 31*hash + (out[upto++] = (byte)(0xE0 | (code >> 12)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F)));\n        hash = 31*hash + (out[upto++] = (byte)(0x80 | (code & 0x3F)));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            hash = 31*hash + (out[upto++] = (byte)(0xF0 | (utf32 >> 18)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F)));\n            hash = 31*hash + (out[upto++] = (byte)(0x80 | (utf32 & 0x3F)));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        hash = 31*hash + (out[upto++] = (byte) 0xEF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBF);\n        hash = 31*hash + (out[upto++] = (byte) 0xBD);\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fe9fa09df804ce770f1b667401a7a7647301ed"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}