{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["87fd9d0d02614519415a01c83417fd750882a42b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6cdd05fdf31629707e61bf652dd5e04be675ee","date":1407343591,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":["87fd9d0d02614519415a01c83417fd750882a42b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":["87fd9d0d02614519415a01c83417fd750882a42b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":["87fd9d0d02614519415a01c83417fd750882a42b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n   \n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87fd9d0d02614519415a01c83417fd750882a42b","date":1467191999,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","fbcfc050b9f253136eaa5950b57248b2109eac11","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d0ef034a4f10871667ae75181537775ddcf8ade4","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful close, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1, true);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    } catch (KeeperException e) {\n      // it's okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    // if there are nodeAdded triggers don't create nodeAdded markers\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      // use EPHEMERAL so that it disappears if this node goes down\n      // and no other action is taken\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["87fd9d0d02614519415a01c83417fd750882a42b","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["ad4957cde742defe6db19689abdc267c5d948066"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ad4957cde742defe6db19689abdc267c5d948066":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["664ff2b928393480d9655010aa700656b0fcade0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fbcfc050b9f253136eaa5950b57248b2109eac11","87fd9d0d02614519415a01c83417fd750882a42b"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","fbcfc050b9f253136eaa5950b57248b2109eac11"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7a6cdd05fdf31629707e61bf652dd5e04be675ee":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87fd9d0d02614519415a01c83417fd750882a42b":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7a6cdd05fdf31629707e61bf652dd5e04be675ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"c32a8448145a74a8902798f2e63e322827757ff2":["87fd9d0d02614519415a01c83417fd750882a42b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["87fd9d0d02614519415a01c83417fd750882a42b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"664ff2b928393480d9655010aa700656b0fcade0":["87fd9d0d02614519415a01c83417fd750882a42b","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ad4957cde742defe6db19689abdc267c5d948066":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["ad4957cde742defe6db19689abdc267c5d948066"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"7a6cdd05fdf31629707e61bf652dd5e04be675ee":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"87fd9d0d02614519415a01c83417fd750882a42b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c32a8448145a74a8902798f2e63e322827757ff2","560c18d71dad43d675158783c3840f8c80d6d39c","664ff2b928393480d9655010aa700656b0fcade0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","7a6cdd05fdf31629707e61bf652dd5e04be675ee"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"664ff2b928393480d9655010aa700656b0fcade0":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fd9d0d02614519415a01c83417fd750882a42b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}