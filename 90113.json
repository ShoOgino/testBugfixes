{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","sourceNew":"  // Approximate arc distance between a segment (with lat,lng endpoints) and\n  //    the test position\n  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)\n  {\n     // Check if lat1,lng1 is closest point.  Construct a vector from point1\n     //    to point2 (v1) and another from point 1 to the test point (v2).\n     //    If dot product is negative then point 1 is the closest point\n     double v1y = lat2 - lat1;\n     double v1x = lng2 - lng1;\n     double v2y = m_testLat - lat1;\n     double v2x = m_testLng - lng1;\n     double dot = v1x * v2x + v1y * v2y;\n     if (dot <= 0.0f)\n        return getDistanceSq(lat1, lng1);\n\n     // Get the component of vector v2 along v1.  If component is greater\n     //    than 1 then the endpoint is the closest point.\n     double c = dot / (v1x * v1x + v1y * v1y);\n     if (c >= 1.0f)\n        return getDistanceSq(lat2, lng2);\n\n     // Since we are working io lat,lng space we need to find the point\n     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We\n     //    then find the distance squared between Q and pt.\n     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));\n  }\n\n","sourceOld":"  // Approximate arc distance between a segment (with lat,lng endpoints) and\n  //    the test position\n  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)\n  {\n     // Check if lat1,lng1 is closest point.  Construct a vector from point1\n     //    to point2 (v1) and another from point 1 to the test point (v2).\n     //    If dot product is negative then point 1 is the closest point\n     double v1y = lat2 - lat1;\n     double v1x = lng2 - lng1;\n     double v2y = m_testLat - lat1;\n     double v2x = m_testLng - lng1;\n     double dot = v1x * v2x + v1y * v2y;\n     if (dot <= 0.0f)\n        return getDistanceSq(lat1, lng1);\n\n     // Get the component of vector v2 along v1.  If component is greater\n     //    than 1 then the endpoint is the closest point.\n     double c = dot / (v1x * v1x + v1y * v1y);\n     if (c >= 1.0f)\n        return getDistanceSq(lat2, lng2);\n\n     // Since we are working io lat,lng space we need to find the point\n     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We\n     //    then find the distance squared between Q and pt.\n     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  // Approximate arc distance between a segment (with lat,lng endpoints) and\n  //    the test position\n  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)\n  {\n     // Check if lat1,lng1 is closest point.  Construct a vector from point1\n     //    to point2 (v1) and another from point 1 to the test point (v2).\n     //    If dot product is negative then point 1 is the closest point\n     double v1y = lat2 - lat1;\n     double v1x = lng2 - lng1;\n     double v2y = m_testLat - lat1;\n     double v2x = m_testLng - lng1;\n     double dot = v1x * v2x + v1y * v2y;\n     if (dot <= 0.0f)\n        return getDistanceSq(lat1, lng1);\n\n     // Get the component of vector v2 along v1.  If component is greater\n     //    than 1 then the endpoint is the closest point.\n     double c = dot / (v1x * v1x + v1y * v1y);\n     if (c >= 1.0f)\n        return getDistanceSq(lat2, lng2);\n\n     // Since we are working io lat,lng space we need to find the point\n     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We\n     //    then find the distance squared between Q and pt.\n     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  // Approximate arc distance between a segment (with lat,lng endpoints) and\n  //    the test position\n  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)\n  {\n     // Check if lat1,lng1 is closest point.  Construct a vector from point1\n     //    to point2 (v1) and another from point 1 to the test point (v2).\n     //    If dot product is negative then point 1 is the closest point\n     double v1y = lat2 - lat1;\n     double v1x = lng2 - lng1;\n     double v2y = m_testLat - lat1;\n     double v2x = m_testLng - lng1;\n     double dot = v1x * v2x + v1y * v2y;\n     if (dot <= 0.0f)\n        return getDistanceSq(lat1, lng1);\n\n     // Get the component of vector v2 along v1.  If component is greater\n     //    than 1 then the endpoint is the closest point.\n     double c = dot / (v1x * v1x + v1y * v1y);\n     if (c >= 1.0f)\n        return getDistanceSq(lat2, lng2);\n\n     // Since we are working io lat,lng space we need to find the point\n     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We\n     //    then find the distance squared between Q and pt.\n     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation#getDistanceSq(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  // Approximate arc distance between a segment (with lat,lng endpoints) and\n  //    the test position\n  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)\n  {\n     // Check if lat1,lng1 is closest point.  Construct a vector from point1\n     //    to point2 (v1) and another from point 1 to the test point (v2).\n     //    If dot product is negative then point 1 is the closest point\n     double v1y = lat2 - lat1;\n     double v1x = lng2 - lng1;\n     double v2y = m_testLat - lat1;\n     double v2x = m_testLng - lng1;\n     double dot = v1x * v2x + v1y * v2y;\n     if (dot <= 0.0f)\n        return getDistanceSq(lat1, lng1);\n\n     // Get the component of vector v2 along v1.  If component is greater\n     //    than 1 then the endpoint is the closest point.\n     double c = dot / (v1x * v1x + v1y * v1y);\n     if (c >= 1.0f)\n        return getDistanceSq(lat2, lng2);\n\n     // Since we are working io lat,lng space we need to find the point\n     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We\n     //    then find the distance squared between Q and pt.\n     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}