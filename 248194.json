{"path":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      InvertedFields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      InvertedFields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":null,"sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}