{"path":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#check(Element).mjava","commits":[{"id":"0818fc555aefcb0330785d4ad1c1487980a0b04b","date":1599049757,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#check(Element).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Check an individual element.\n   * This checks packages and types from the doctrees.\n   * It will recursively check methods/fields from encountered types when the level is \"method\"\n   */\n  private void check(Element element) {\n    switch(element.getKind()) {\n      case MODULE:\n        // don't check the unnamed module, it won't have javadocs\n        if (!((ModuleElement)element).isUnnamed()) {\n          checkComment(element);\n        }\n        break;\n      case PACKAGE:\n        checkComment(element);\n        break;\n      // class-like elements, check them, then recursively check their children (fields and methods)\n      case CLASS:\n      case INTERFACE:\n      case ENUM:\n      case ANNOTATION_TYPE:\n        if (level(element) >= CLASS) {\n          checkComment(element);\n          for (var subElement : element.getEnclosedElements()) {\n            // don't recurse into enclosed types, otherwise we'll double-check since they are already in the included docTree\n            if (subElement.getKind() == ElementKind.METHOD || \n                subElement.getKind() == ElementKind.CONSTRUCTOR || \n                subElement.getKind() == ElementKind.FIELD || \n                subElement.getKind() == ElementKind.ENUM_CONSTANT) {\n              check(subElement);\n            }\n          }\n        }\n        break;\n      // method-like elements, check them if we are configured to do so\n      case METHOD:\n      case CONSTRUCTOR:\n      case FIELD:\n      case ENUM_CONSTANT:\n        if (level(element) >= METHOD && !isSyntheticEnumMethod(element)) {\n          checkComment(element);\n        }\n        break;\n      default:\n        error(element, \"I don't know how to analyze \" + element.getKind() + \" yet.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0818fc555aefcb0330785d4ad1c1487980a0b04b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0818fc555aefcb0330785d4ad1c1487980a0b04b"],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}