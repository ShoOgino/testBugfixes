{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","commits":[{"id":"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","date":1379216208,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = _TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc()/5);\n    TopDocs expected = searcher.search(query, filter, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, filter, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, filter, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, filter, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = _TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc()/5);\n    TopDocs expected = searcher.search(query, filter, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, filter, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, filter, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, filter, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    TopDocs expected = searcher.search(query, filter, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, filter, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, filter, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, filter, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = _TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc()/5);\n    TopDocs expected = searcher.search(query, filter, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, filter, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, filter, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, filter, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Sort).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter,Sort).mjava","sourceNew":"  void assertQuery(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    TopDocs expected = searcher.search(query, filter, size, sort, random().nextBoolean(), random().nextBoolean());\n    \n    // make our actual sort, mutating original by replacing some of the \n    // sortfields with equivalent expressions\n    \n    SortField original[] = sort.getSort();\n    SortField mutated[] = new SortField[original.length];\n    for (int i = 0; i < mutated.length; i++) {\n      if (random().nextInt(3) > 0) {\n        SortField s = original[i];\n        Expression expr = JavascriptCompiler.compile(s.getField());\n        SimpleBindings simpleBindings = new SimpleBindings();\n        simpleBindings.add(s);\n        boolean reverse = s.getType() == SortField.Type.SCORE || s.getReverse();\n        mutated[i] = expr.getSortField(simpleBindings, reverse);\n      } else {\n        mutated[i] = original[i];\n      }\n    }\n    \n    Sort mutatedSort = new Sort(mutated);\n    TopDocs actual = searcher.search(query, filter, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    \n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, filter, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, filter, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}