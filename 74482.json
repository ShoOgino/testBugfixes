{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13927d699a111b970c38bc3eec00837464c3ede6","date":1363322510,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, input, pattern, group);\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d2afc65d4799ba989bc52649d9c2fb038e6bca4","date":1363890800,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, input, pattern, group);\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, input, pattern, group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Pattern,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Pattern pattern, int group) {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, pattern, group);\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, input, pattern, group);\n  }\n\n","bugFix":null,"bugIntro":["46a90052bc922c1df92a7a0c1132571f367ea9e4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13927d699a111b970c38bc3eec00837464c3ede6":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["5d2afc65d4799ba989bc52649d9c2fb038e6bca4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d2afc65d4799ba989bc52649d9c2fb038e6bca4":["13927d699a111b970c38bc3eec00837464c3ede6"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["13927d699a111b970c38bc3eec00837464c3ede6","05a14b2611ead08655a2b2bdc61632eb31316e57"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"13927d699a111b970c38bc3eec00837464c3ede6":["5d2afc65d4799ba989bc52649d9c2fb038e6bca4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5d2afc65d4799ba989bc52649d9c2fb038e6bca4":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}