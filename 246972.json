{"path":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      int aEnd = a.offset + a.length;\n      int bEnd = b.offset + b.length;\n      int i = FutureArrays.mismatch(a.chars, a.offset, aEnd, \n                                    b.chars, b.offset, bEnd);\n\n      if (i >= 0 && i < Math.min(a.length, b.length)) {\n        // http://icu-project.org/docs/papers/utf16_code_point_order.html\n\n        char aChar = a.chars[a.offset + i];\n        char bChar = b.chars[b.offset + i];        \n        /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n        if (aChar >= 0xd800 && bChar >= 0xd800) {\n          if (aChar >= 0xe000) {\n            aChar -= 0x800;\n          } else {\n            aChar += 0x2000;\n          }\n          \n          if (bChar >= 0xe000) {\n            bChar -= 0x800;\n          } else {\n            bChar += 0x2000;\n          }\n        }\n\n        /* now aChar and bChar are in code point order */\n        return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      int aEnd = a.offset + a.length;\n      int bEnd = b.offset + b.length;\n      int i = Arrays.mismatch(a.chars, a.offset, aEnd, \n                                    b.chars, b.offset, bEnd);\n\n      if (i >= 0 && i < Math.min(a.length, b.length)) {\n        // http://icu-project.org/docs/papers/utf16_code_point_order.html\n\n        char aChar = a.chars[a.offset + i];\n        char bChar = b.chars[b.offset + i];        \n        /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n        if (aChar >= 0xd800 && bChar >= 0xd800) {\n          if (aChar >= 0xe000) {\n            aChar -= 0x800;\n          } else {\n            aChar += 0x2000;\n          }\n          \n          if (bChar >= 0xe000) {\n            bChar -= 0x800;\n          } else {\n            bChar += 0x2000;\n          }\n        }\n\n        /* now aChar and bChar are in code point order */\n        return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    @Override\n    public int compare(CharsRef a, CharsRef b) {\n      int aEnd = a.offset + a.length;\n      int bEnd = b.offset + b.length;\n      int i = FutureArrays.mismatch(a.chars, a.offset, aEnd, \n                                    b.chars, b.offset, bEnd);\n\n      if (i >= 0 && i < Math.min(a.length, b.length)) {\n        // http://icu-project.org/docs/papers/utf16_code_point_order.html\n\n        char aChar = a.chars[a.offset + i];\n        char bChar = b.chars[b.offset + i];        \n        /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n        if (aChar >= 0xd800 && bChar >= 0xd800) {\n          if (aChar >= 0xe000) {\n            aChar -= 0x800;\n          } else {\n            aChar += 0x2000;\n          }\n          \n          if (bChar >= 0xe000) {\n            bChar -= 0x800;\n          } else {\n            bChar += 0x2000;\n          }\n        }\n\n        /* now aChar and bChar are in code point order */\n        return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}