{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testSimpleCase().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testSimpleCase().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testSimpleCase().mjava","sourceNew":"  public void testSimpleCase() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // two auxiliary directories\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    // add 40 documents in separate files\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux2, true);\n    // add 40 documents in compound files\n    addDocs2(writer, 50);\n    assertEquals(50, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged\n    writer = newWriter(dir, false);\n    assertEquals(100, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux2 });\n    assertEquals(190, writer.maxDoc());\n    writer.close();\n\n    // make sure the old index is correct\n    verifyNumDocs(aux, 40);\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 190);\n\n    // now add another set in.\n    Directory aux3 = new RAMDirectory();\n    writer = newWriter(aux3, true);\n    // add 40 documents\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged/index is optimized\n    writer = newWriter(dir, false);\n    assertEquals(190, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux3 });\n    assertEquals(230, writer.maxDoc());\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now optimize it.\n    writer = newWriter(dir, false);\n    writer.optimize();\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now add a single document\n    Directory aux4 = new RAMDirectory();\n    writer = newWriter(aux4, true);\n    addDocs2(writer, 1);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    assertEquals(230, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux4 });\n    assertEquals(231, writer.maxDoc());\n    writer.close();\n\n    verifyNumDocs(dir, 231);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 51);\n  }\n\n","sourceOld":"  public void testSimpleCase() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // two auxiliary directories\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    // add 40 documents in separate files\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux2, true);\n    // add 40 documents in compound files\n    addDocs2(writer, 50);\n    assertEquals(50, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged\n    writer = newWriter(dir, false);\n    assertEquals(100, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux2 });\n    assertEquals(190, writer.maxDoc());\n    writer.close();\n\n    // make sure the old index is correct\n    verifyNumDocs(aux, 40);\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 190);\n\n    // now add another set in.\n    Directory aux3 = new RAMDirectory();\n    writer = newWriter(aux3, true);\n    // add 40 documents\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged/index is optimized\n    writer = newWriter(dir, false);\n    assertEquals(190, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux3 });\n    assertEquals(230, writer.maxDoc());\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now optimize it.\n    writer = newWriter(dir, false);\n    writer.optimize();\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now add a single document\n    Directory aux4 = new RAMDirectory();\n    writer = newWriter(aux4, true);\n    addDocs2(writer, 1);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    assertEquals(230, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux4 });\n    assertEquals(231, writer.maxDoc());\n    writer.close();\n\n    verifyNumDocs(dir, 231);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 51);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testSimpleCase().mjava","sourceNew":null,"sourceOld":"  public void testSimpleCase() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // two auxiliary directories\n    Directory aux = new RAMDirectory();\n    Directory aux2 = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    // add 40 documents in separate files\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux2, true);\n    // add 40 documents in compound files\n    addDocs2(writer, 50);\n    assertEquals(50, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged\n    writer = newWriter(dir, false);\n    assertEquals(100, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux2 });\n    assertEquals(190, writer.maxDoc());\n    writer.close();\n\n    // make sure the old index is correct\n    verifyNumDocs(aux, 40);\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 190);\n\n    // now add another set in.\n    Directory aux3 = new RAMDirectory();\n    writer = newWriter(aux3, true);\n    // add 40 documents\n    addDocs(writer, 40);\n    assertEquals(40, writer.maxDoc());\n    writer.close();\n\n    // test doc count before segments are merged/index is optimized\n    writer = newWriter(dir, false);\n    assertEquals(190, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux3 });\n    assertEquals(230, writer.maxDoc());\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now optimize it.\n    writer = newWriter(dir, false);\n    writer.optimize();\n    writer.close();\n\n    // make sure the new index is correct\n    verifyNumDocs(dir, 230);\n\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 180);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 50);\n\n    // now add a single document\n    Directory aux4 = new RAMDirectory();\n    writer = newWriter(aux4, true);\n    addDocs2(writer, 1);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    assertEquals(230, writer.maxDoc());\n    writer.addIndexesNoOptimize(new Directory[] { aux4 });\n    assertEquals(231, writer.maxDoc());\n    writer.close();\n\n    verifyNumDocs(dir, 231);\n\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 51);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}