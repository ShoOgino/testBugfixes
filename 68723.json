{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","commits":[{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","pathOld":"/dev/null","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String zkNode = zkPath + \"/\" + rootPath.relativize(file).toString();\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b","date":1424629360,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = zkPath + \"/\" + rootPath.relativize(file).toString();\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String zkNode = zkPath + \"/\" + rootPath.relativize(file).toString();\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3","date":1424867396,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = zkPath + \"/\" + rootPath.relativize(file).toString();\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = zkPath + \"/\" + rootPath.relativize(file).toString();\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"198966886b1666a28e299aeb05a224d8579ee1da","date":1460030082,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String).mjava","sourceNew":"  private void uploadToZK(final Path rootPath, final String zkPath,\n      final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          logger.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filename.startsWith(\".\"))\n          return FileVisitResult.CONTINUE;\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b","2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"198966886b1666a28e299aeb05a224d8579ee1da":["2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3"],"2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b"],"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["198966886b1666a28e299aeb05a224d8579ee1da"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"198966886b1666a28e299aeb05a224d8579ee1da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","198966886b1666a28e299aeb05a224d8579ee1da"],"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}