{"path":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", Similarity.getDefault().encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", Similarity.getDefault().encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", Similarity.getDefault().encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", Similarity.getDefault().encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", Similarity.getDefault().encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", Similarity.getDefault().encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", Similarity.getDefault().encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", Similarity.getDefault().encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", Similarity.getDefault().encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", Similarity.getDefault().encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", Similarity.getDefault().encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", Similarity.getDefault().encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a31c91eda919456f5f9237b086174385292f9935","date":1299074041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity().get(\"field\");\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    Similarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexReader ir = IndexReader.open(store);\n    IndexSearcher is = new IndexSearcher(ir);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    ir.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexSearcher is = new IndexSearcher(store, true);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":null,"sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexReader ir = IndexReader.open(store);\n    IndexSearcher is = new IndexSearcher(ir);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    ir.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":null,"sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexReader ir = IndexReader.open(store);\n    IndexSearcher is = new IndexSearcher(ir);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    ir.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":null,"sourceOld":"  public void testSetNorm() throws Exception {\n    Directory store = newDirectory();\n    IndexWriter writer = new IndexWriter(store, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add the same document four times\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    DefaultSimilarity similarity = new DefaultSimilarity();\n    reader.setNorm(0, \"field\", similarity.encodeNormValue(1.0f));\n    reader.setNorm(1, \"field\", similarity.encodeNormValue(2.0f));\n    reader.setNorm(2, \"field\", similarity.encodeNormValue(4.0f));\n    reader.setNorm(3, \"field\", similarity.encodeNormValue(16.0f));\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    IndexReader ir = IndexReader.open(store);\n    IndexSearcher is = new IndexSearcher(ir);\n    is.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n    is.close();\n    ir.close();\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","a31c91eda919456f5f9237b086174385292f9935"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a31c91eda919456f5f9237b086174385292f9935"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["323f871ffe96b871d8c534a614be60751bb023c2"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"323f871ffe96b871d8c534a614be60751bb023c2":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a31c91eda919456f5f9237b086174385292f9935":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f2c5f0cb44df114db4228c8f77861714b5cabaea","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a31c91eda919456f5f9237b086174385292f9935","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","323f871ffe96b871d8c534a614be60751bb023c2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0f3cee3d20b0c786e6fca20539454262e29edcab","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f0b9507caf22f292ac0e5e59f62db4275adf4511","1509f151d7692d84fae414b2b799ac06ba60fcb4","1291e4568eb7d9463d751627596ef14baf4c1603"],"323f871ffe96b871d8c534a614be60751bb023c2":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a31c91eda919456f5f9237b086174385292f9935":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f0b9507caf22f292ac0e5e59f62db4275adf4511","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}