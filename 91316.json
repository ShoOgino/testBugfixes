{"path":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationsFacetsExample#assertExampleResult(List[FacetResult],double[]).mjava","commits":[{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationsFacetsExample#assertExampleResult(List[FacetResult],double[]).mjava","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(List<FacetResult> res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertEquals(\"Wrong number of results!\", 1, res.size());\n    assertEquals(\"Wrong number of facets!\", 2, res.get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationsFacetsExample#assertExampleResult(List[FacetResult],double[]).mjava","sourceNew":null,"sourceOld":"  private void assertExampleResult(List<FacetResult> res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertEquals(\"Wrong number of results!\", 1, res.size());\n    assertEquals(\"Wrong number of facets!\", 2, res.get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationsFacetsExample#assertExampleResult(List[FacetResult],double[]).mjava","sourceNew":null,"sourceOld":"  private void assertExampleResult(List<FacetResult> res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertEquals(\"Wrong number of results!\", 1, res.size());\n    assertEquals(\"Wrong number of facets!\", 2, res.get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["31703f98041a9e7086254ed134d8f91c22ac933f","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"31703f98041a9e7086254ed134d8f91c22ac933f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"31703f98041a9e7086254ed134d8f91c22ac933f":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31703f98041a9e7086254ed134d8f91c22ac933f"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}