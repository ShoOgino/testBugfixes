{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"/dev/null","sourceNew":"  /** Set the properties */\r\n  public void setConfig (Config config);\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the properties */\n  public void setConfig (Config config);\n\n","sourceOld":"  /** Set the properties */\r\n  public void setConfig (Config config);\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    indexVal = (tokenized ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n  }\n\n","sourceOld":"  /** Set the properties */\n  public void setConfig (Config config);\n\n","bugFix":null,"bugIntro":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edbc02bad7b5b2634d0cf080d93d96fc03b901f8","date":1246037214,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    indexVal = (tokenized ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal<DocState>();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = (ContentSource) Class.forName(sourceClass).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c001b73abaf2c7481f219514cc5e9e953c760b4","date":1256724383,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n    if (!reuseFields) {\n      localDocState = new DocState(false, storeVal, indexVal, bodyIndexVal, termVecVal);\n    } else {\n      // In a multi-rounds run, it is important to reset DocState since settings\n      // of fields may change between rounds, and this is the only way to reset\n      // the cache of all threads.\n      docState = new ThreadLocal<DocState>();\n    }\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","edbc02bad7b5b2634d0cf080d93d96fc03b901f8","ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db0ffb3c24c39faecaf89e17fe056cbb484ae5e","date":1257551050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    storeVal = (stored ? Field.Store.YES : Field.Store.NO);\n    bodyStoreVal = (bodyStored ? Field.Store.YES : Field.Store.NO);\n    if (tokenized) {\n      indexVal = norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      indexVal = norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    if (bodyTokenized) {\n      bodyIndexVal = bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;\n    } else {\n      bodyIndexVal = bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;\n    }\n\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    if (termVecPositions && termVecOffsets) {\n      termVecVal = TermVector.WITH_POSITIONS_OFFSETS;\n    } else if (termVecPositions) {\n      termVecVal = TermVector.WITH_POSITIONS;\n    } else if (termVecOffsets) {\n      termVecVal = TermVector.WITH_OFFSETS;\n    } else if (termVec) {\n      termVecVal = TermVector.YES;\n    } else {\n      termVecVal = TermVector.NO;\n    }\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"6db0ffb3c24c39faecaf89e17fe056cbb484ae5e":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edbc02bad7b5b2634d0cf080d93d96fc03b901f8":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6db0ffb3c24c39faecaf89e17fe056cbb484ae5e"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["edbc02bad7b5b2634d0cf080d93d96fc03b901f8"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"6db0ffb3c24c39faecaf89e17fe056cbb484ae5e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["edbc02bad7b5b2634d0cf080d93d96fc03b901f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"edbc02bad7b5b2634d0cf080d93d96fc03b901f8":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["6db0ffb3c24c39faecaf89e17fe056cbb484ae5e"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}