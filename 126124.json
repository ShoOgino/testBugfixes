{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"/dev/null","sourceNew":"  //TODO this is necessary when -Dtests.iters but why? Some other tests aren't affected\n  @Before\n  public void doBefore() throws Exception {\n    for (String col : CollectionAdminRequest.listCollections(solrClient)) {\n      CollectionAdminRequest.deleteCollection(col).process(solrClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c862cfe45668f0af659e21d1279ff235c6cadd6","date":1515871011,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","sourceNew":null,"sourceOld":"  //TODO this is necessary when -Dtests.iters but why? Some other tests aren't affected\n  @Before\n  public void doBefore() throws Exception {\n    for (String col : CollectionAdminRequest.listCollections(solrClient)) {\n      CollectionAdminRequest.deleteCollection(col).process(solrClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    System.out.println(\"SolrClient: \" + solrClient);\n    if (solrClient instanceof CloudSolrClient) {\n      System.out.println(((CloudSolrClient) solrClient).getClusterStateProvider());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    System.out.println(\"SolrClient: \" + solrClient);\n    if (solrClient instanceof CloudSolrClient) {\n      System.out.println(((CloudSolrClient) solrClient).getClusterStateProvider());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    System.out.println(\"SolrClient: \" + solrClient);\n    if (solrClient instanceof CloudSolrClient) {\n      System.out.println(((CloudSolrClient) solrClient).getClusterStateProvider());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    log.info(\"SolrClient: {}\", solrClient);\n    log.info(\"ClusterStateProvider {}\",solrClient.getClusterStateProvider());\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    System.out.println(\"SolrClient: \" + solrClient);\n    if (solrClient instanceof CloudSolrClient) {\n      System.out.println(((CloudSolrClient) solrClient).getClusterStateProvider());\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    configureCluster(4).configure();\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    log.info(\"SolrClient: {}\", solrClient);\n    log.info(\"ClusterStateProvider {}\",solrClient.getClusterStateProvider());\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() {\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    log.info(\"SolrClient: {}\", solrClient);\n    log.info(\"ClusterStateProvider {}\",solrClient.getClusterStateProvider());\n  }\n\n","bugFix":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    configureCluster(4).configure();\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    if (log.isInfoEnabled()) {\n      log.info(\"SolrClient: {}\", solrClient);\n      log.info(\"ClusterStateProvider {}\", solrClient.getClusterStateProvider()); // logOk\n    }\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    configureCluster(4).configure();\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    log.info(\"SolrClient: {}\", solrClient);\n    log.info(\"ClusterStateProvider {}\",solrClient.getClusterStateProvider());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    configureCluster(4).configure();\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    if (log.isInfoEnabled()) {\n      log.info(\"SolrClient: {}\", solrClient);\n      log.info(\"ClusterStateProvider {}\", solrClient.getClusterStateProvider()); // nowarn\n    }\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    configureCluster(4).configure();\n    solrClient = getCloudSolrClient(cluster);\n    //log this to help debug potential causes of problems\n    if (log.isInfoEnabled()) {\n      log.info(\"SolrClient: {}\", solrClient);\n      log.info(\"ClusterStateProvider {}\", solrClient.getClusterStateProvider()); // logOk\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"5c862cfe45668f0af659e21d1279ff235c6cadd6":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5c862cfe45668f0af659e21d1279ff235c6cadd6":[],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["5c862cfe45668f0af659e21d1279ff235c6cadd6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","af3e10d8a1fbcc5c79b22f7477e79de467dd326c","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","849083f8095b1ffaff05a66e0b1e024617b9968d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5c862cfe45668f0af659e21d1279ff235c6cadd6","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}