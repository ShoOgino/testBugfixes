{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#testPoolSize().mjava","commits":[{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#testPoolSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientSSLAuthConPoolTest#testPoolSize().mjava","sourceNew":null,"sourceOld":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"]},"commit2Childs":{"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}