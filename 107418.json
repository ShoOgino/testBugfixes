{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b","date":1462462220,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e","date":1462474069,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","bugFix":["6c94d2661bc1c14426980ec7882e951fdcff08d0","7b13106276bb5ea342253dbf6aae7b675adb38d3","e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          log.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          LOG.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(LOG, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(LOG, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          log.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          // this can happen on shutdown, a fetch may be running in a thread after DirectoryFactory is closed\n          log.warn(\"Could not log failed replication details\", e);\n        }\n      }\n\n      if (core.getCoreContainer().isZooKeeperAware()) {\n        // we only track replication success in SolrCloud mode\n        core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      }\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      // order below is important\n      try {\n        if (tmpIndexDir != null && deleteTmpIdxDir) {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        }\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      } finally {\n        try {\n          if (tmpIndexDir != null) core.getDirectoryFactory().release(tmpIndexDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (indexDir != null) {\n            core.getDirectoryFactory().release(indexDir);\n          }\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        try {\n          if (tmpTlogDir != null) delTree(tmpTlogDir);\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ad28156288ac00b91352582904d97e6653205757"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["ad28156288ac00b91352582904d97e6653205757"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["ad28156288ac00b91352582904d97e6653205757","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}