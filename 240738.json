{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomBinary(int count) throws IOException {\n    int values = TestUtil.nextInt(random(), count, count*2);\n    Directory dir = getDirectory(values);\n    int start;\n    int end;\n    if (random().nextBoolean()) {\n      start = 0;\n      end = values;\n    } else  {\n      start = TestUtil.nextInt(random(), 0, values -3);\n      end = TestUtil.nextInt(random(), start  + 2, values);\n    }\n    int partitionPoint = TestUtil.nextInt(random(), start + 1, end - 1);\n    int sortedOnHeap = random().nextInt(5000);\n    int dimensions =  TestUtil.nextInt(random(), 1, 8);\n    int bytesPerDimensions = TestUtil.nextInt(random(), 2, 30);\n    int packedLength = dimensions * bytesPerDimensions;\n    PointWriter points = getRandomPointWriter(dir, values, packedLength);\n    byte[] value = new byte[packedLength];\n    for (int i =0; i < values; i++) {\n      random().nextBytes(value);\n      points.append(value, i);\n    }\n    points.close();\n    verify(dir, points, dimensions, start, end, partitionPoint, packedLength, bytesPerDimensions, sortedOnHeap);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"619d6ef89bb642f6258a8369ba5a7a330580e97f","date":1561535144,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws IOException {\n    int values = TestUtil.nextInt(random(), count, count*2);\n    Directory dir = getDirectory(values);\n    int start;\n    int end;\n    if (random().nextBoolean()) {\n      start = 0;\n      end = values;\n    } else  {\n      start = TestUtil.nextInt(random(), 0, values -3);\n      end = TestUtil.nextInt(random(), start  + 2, values);\n    }\n    int partitionPoint = TestUtil.nextInt(random(), start + 1, end - 1);\n    int sortedOnHeap = random().nextInt(5000);\n    int indexDimensions =  TestUtil.nextInt(random(), 1, 8);\n    int dataDimensions =  TestUtil.nextInt(random(), indexDimensions, 8);\n    int bytesPerDimensions = TestUtil.nextInt(random(), 2, 30);\n    int packedLength = dataDimensions * bytesPerDimensions;\n    PointWriter points = getRandomPointWriter(dir, values, packedLength);\n    byte[] value = new byte[packedLength];\n    for (int i =0; i < values; i++) {\n      random().nextBytes(value);\n      points.append(value, i);\n    }\n    points.close();\n    verify(dir, points, dataDimensions, indexDimensions, start, end, partitionPoint, packedLength, bytesPerDimensions, sortedOnHeap);\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws IOException {\n    int values = TestUtil.nextInt(random(), count, count*2);\n    Directory dir = getDirectory(values);\n    int start;\n    int end;\n    if (random().nextBoolean()) {\n      start = 0;\n      end = values;\n    } else  {\n      start = TestUtil.nextInt(random(), 0, values -3);\n      end = TestUtil.nextInt(random(), start  + 2, values);\n    }\n    int partitionPoint = TestUtil.nextInt(random(), start + 1, end - 1);\n    int sortedOnHeap = random().nextInt(5000);\n    int dimensions =  TestUtil.nextInt(random(), 1, 8);\n    int bytesPerDimensions = TestUtil.nextInt(random(), 2, 30);\n    int packedLength = dimensions * bytesPerDimensions;\n    PointWriter points = getRandomPointWriter(dir, values, packedLength);\n    byte[] value = new byte[packedLength];\n    for (int i =0; i < values; i++) {\n      random().nextBytes(value);\n      points.append(value, i);\n    }\n    points.close();\n    verify(dir, points, dimensions, start, end, partitionPoint, packedLength, bytesPerDimensions, sortedOnHeap);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws IOException {\n    BKDConfig config = getRandomConfig();\n    int values = TestUtil.nextInt(random(), count, count*2);\n    Directory dir = getDirectory(values);\n    int start;\n    int end;\n    if (random().nextBoolean()) {\n      start = 0;\n      end = values;\n    } else  {\n      start = TestUtil.nextInt(random(), 0, values -3);\n      end = TestUtil.nextInt(random(), start  + 2, values);\n    }\n    int partitionPoint = TestUtil.nextInt(random(), start + 1, end - 1);\n    int sortedOnHeap = random().nextInt(5000);\n    PointWriter points = getRandomPointWriter(config, dir, values);\n    byte[] value = new byte[config.packedBytesLength];\n    for (int i =0; i < values; i++) {\n      random().nextBytes(value);\n      points.append(value, i);\n    }\n    points.close();\n    verify(config, dir, points,start, end, partitionPoint, sortedOnHeap);\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws IOException {\n    int values = TestUtil.nextInt(random(), count, count*2);\n    Directory dir = getDirectory(values);\n    int start;\n    int end;\n    if (random().nextBoolean()) {\n      start = 0;\n      end = values;\n    } else  {\n      start = TestUtil.nextInt(random(), 0, values -3);\n      end = TestUtil.nextInt(random(), start  + 2, values);\n    }\n    int partitionPoint = TestUtil.nextInt(random(), start + 1, end - 1);\n    int sortedOnHeap = random().nextInt(5000);\n    int indexDimensions =  TestUtil.nextInt(random(), 1, 8);\n    int dataDimensions =  TestUtil.nextInt(random(), indexDimensions, 8);\n    int bytesPerDimensions = TestUtil.nextInt(random(), 2, 30);\n    int packedLength = dataDimensions * bytesPerDimensions;\n    PointWriter points = getRandomPointWriter(dir, values, packedLength);\n    byte[] value = new byte[packedLength];\n    for (int i =0; i < values; i++) {\n      random().nextBytes(value);\n      points.append(value, i);\n    }\n    points.close();\n    verify(dir, points, dataDimensions, indexDimensions, start, end, partitionPoint, packedLength, bytesPerDimensions, sortedOnHeap);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"619d6ef89bb642f6258a8369ba5a7a330580e97f":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"619d6ef89bb642f6258a8369ba5a7a330580e97f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}