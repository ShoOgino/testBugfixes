{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f107636c2cc82350a2607d774c092da5b73152e5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f107636c2cc82350a2607d774c092da5b73152e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f107636c2cc82350a2607d774c092da5b73152e5"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}