{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6a86d0be697bc418e5fe35576a02a5d0e3ce37","date":1399644085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      if (len > Short.MAX_VALUE) {\n        throw new IllegalArgumentException(\"len must be <= \" + Short.MAX_VALUE + \"; got \" + len);\n      }\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }\n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }        \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter.ByteSequencesWriter#write(byte[],int,int).mjava","sourceNew":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte[] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      if (len > Short.MAX_VALUE) {\n        throw new IllegalArgumentException(\"len must be <= \" + Short.MAX_VALUE + \"; got \" + len);\n      }\n      out.writeShort((short) len);\n      out.writeBytes(bytes, off, len);\n    }\n\n","sourceOld":"    /**\n     * Writes a byte array.\n     * <p>\n     * The length is written as a <code>short</code>, followed\n     * by the bytes.\n     */\n    public void write(byte [] bytes, int off, int len) throws IOException {\n      assert bytes != null;\n      assert off >= 0 && off + len <= bytes.length;\n      assert len >= 0;\n      if (len > Short.MAX_VALUE) {\n        throw new IllegalArgumentException(\"len must be <= \" + Short.MAX_VALUE + \"; got \" + len);\n      }\n      os.writeShort(len);\n      os.write(bytes, off, len);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d6a86d0be697bc418e5fe35576a02a5d0e3ce37":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["7d6a86d0be697bc418e5fe35576a02a5d0e3ce37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["7d6a86d0be697bc418e5fe35576a02a5d0e3ce37"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"7d6a86d0be697bc418e5fe35576a02a5d0e3ce37":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}