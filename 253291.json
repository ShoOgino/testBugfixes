{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createExpectedFacetResult(String,IndexContext,int,int,int,boolean,String).mjava","commits":[{"id":"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2","date":1331803866,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createExpectedFacetResult(String,IndexContext,int,int,int,boolean,String).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TermGroupFacetCollectorTest#createExpectedFacetResult(String,IndexContext,int,int,int,boolean,String).mjava","sourceNew":"  private GroupedFacetResult createExpectedFacetResult(String searchTerm, IndexContext context, int offset, int limit, int minCount, final boolean orderByCount, String facetPrefix) {\n    Map<String, Set<String>> facetGroups = context.searchTermToFacetGroups.get(searchTerm);\n    if (facetGroups == null) {\n      facetGroups = new HashMap<String, Set<String>>();\n    }\n\n    int totalCount = 0;\n    int totalMissCount = 0;\n    Set<String> facetValues;\n    if (facetPrefix != null) {\n      facetValues = new HashSet<String>();\n      for (String facetValue : context.facetValues) {\n        if (facetValue != null && facetValue.startsWith(facetPrefix)) {\n          facetValues.add(facetValue);\n        }\n      }\n    } else {\n      facetValues = context.facetValues;\n    }\n\n    List<TermGroupFacetCollector.FacetEntry> entries = new ArrayList<TermGroupFacetCollector.FacetEntry>(facetGroups.size());\n    // also includes facets with count 0\n    for (String facetValue : facetValues) {\n      if (facetValue == null) {\n        continue;\n      }\n\n      Set<String> groups = facetGroups.get(facetValue);\n      int count = groups != null ? groups.size() : 0;\n      if (count >= minCount) {\n        entries.add(new TermGroupFacetCollector.FacetEntry(new BytesRef(facetValue), count));\n      }\n      totalCount += count;\n    }\n\n    // Only include null count when no facet prefix is specified\n    if (facetPrefix == null) {\n      Set<String> groups = facetGroups.get(null);\n      if (groups != null) {\n        totalMissCount = groups.size();\n      }\n    }\n\n    Collections.sort(entries, new Comparator<TermGroupFacetCollector.FacetEntry>() {\n\n      public int compare(TermGroupFacetCollector.FacetEntry a, TermGroupFacetCollector.FacetEntry b) {\n        if (orderByCount) {\n          int cmp = b.getCount() - a.getCount();\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n        return a.getValue().compareTo(b.getValue());\n      }\n\n    });\n\n    int endOffset = offset + limit;\n    List<TermGroupFacetCollector.FacetEntry> entriesResult;\n    if (offset >= entries.size()) {\n      entriesResult = Collections.emptyList();\n    } else if (endOffset >= entries.size()) {\n      entriesResult = entries.subList(offset, entries.size());\n    } else {\n      entriesResult = entries.subList(offset, endOffset);\n    }\n    return new GroupedFacetResult(totalCount, totalMissCount, entriesResult);\n  }\n\n","sourceOld":"  private GroupedFacetResult createExpectedFacetResult(String searchTerm, IndexContext context, int offset, int limit, int minCount, final boolean orderByCount, String facetPrefix) {\n    Map<String, Set<String>> facetGroups = context.searchTermToFacetGroups.get(searchTerm);\n    if (facetGroups == null) {\n      facetGroups = new HashMap<String, Set<String>>();\n    }\n\n    int totalCount = 0;\n    int totalMissCount = 0;\n    Set<String> facetValues;\n    if (facetPrefix != null) {\n      facetValues = new HashSet<String>();\n      for (String facetValue : context.facetValues) {\n        if (facetValue != null && facetValue.startsWith(facetPrefix)) {\n          facetValues.add(facetValue);\n        }\n      }\n    } else {\n      facetValues = context.facetValues;\n    }\n\n    List<TermGroupFacetCollector.FacetEntry> entries = new ArrayList<TermGroupFacetCollector.FacetEntry>(facetGroups.size());\n    // also includes facets with count 0\n    for (String facetValue : facetValues) {\n      if (facetValue == null) {\n        continue;\n      }\n\n      Set<String> groups = facetGroups.get(facetValue);\n      int count = groups != null ? groups.size() : 0;\n      if (count >= minCount) {\n        entries.add(new TermGroupFacetCollector.FacetEntry(new BytesRef(facetValue), count));\n      }\n      totalCount += count;\n    }\n\n    // Only include null count when no facet prefix is specified\n    if (facetPrefix == null) {\n      Set<String> groups = facetGroups.get(null);\n      if (groups != null) {\n        totalMissCount = groups.size();\n      }\n    }\n\n    Collections.sort(entries, new Comparator<TermGroupFacetCollector.FacetEntry>() {\n\n      public int compare(TermGroupFacetCollector.FacetEntry a, TermGroupFacetCollector.FacetEntry b) {\n        if (orderByCount) {\n          int cmp = b.getCount() - a.getCount();\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n        return a.getValue().compareTo(b.getValue());\n      }\n\n    });\n\n    int endOffset = offset + limit;\n    List<TermGroupFacetCollector.FacetEntry> entriesResult;\n    if (offset >= entries.size()) {\n      entriesResult = Collections.emptyList();\n    } else if (endOffset >= entries.size()) {\n      entriesResult = entries.subList(offset, entries.size());\n    } else {\n      entriesResult = entries.subList(offset, endOffset);\n    }\n    return new GroupedFacetResult(totalCount, totalMissCount, entriesResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createExpectedFacetResult(String,IndexContext,int,int,int,boolean,String).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#createExpectedFacetResult(String,IndexContext,int,int,int,boolean,String).mjava","sourceNew":"  private GroupedFacetResult createExpectedFacetResult(String searchTerm, IndexContext context, int offset, int limit, int minCount, final boolean orderByCount, String facetPrefix) {\n    Map<String, Set<String>> facetGroups = context.searchTermToFacetGroups.get(searchTerm);\n    if (facetGroups == null) {\n      facetGroups = new HashMap<String, Set<String>>();\n    }\n\n    int totalCount = 0;\n    int totalMissCount = 0;\n    Set<String> facetValues;\n    if (facetPrefix != null) {\n      facetValues = new HashSet<String>();\n      for (String facetValue : context.facetValues) {\n        if (facetValue != null && facetValue.startsWith(facetPrefix)) {\n          facetValues.add(facetValue);\n        }\n      }\n    } else {\n      facetValues = context.facetValues;\n    }\n\n    List<TermGroupFacetCollector.FacetEntry> entries = new ArrayList<TermGroupFacetCollector.FacetEntry>(facetGroups.size());\n    // also includes facets with count 0\n    for (String facetValue : facetValues) {\n      if (facetValue == null) {\n        continue;\n      }\n\n      Set<String> groups = facetGroups.get(facetValue);\n      int count = groups != null ? groups.size() : 0;\n      if (count >= minCount) {\n        entries.add(new TermGroupFacetCollector.FacetEntry(new BytesRef(facetValue), count));\n      }\n      totalCount += count;\n    }\n\n    // Only include null count when no facet prefix is specified\n    if (facetPrefix == null) {\n      Set<String> groups = facetGroups.get(null);\n      if (groups != null) {\n        totalMissCount = groups.size();\n      }\n    }\n\n    Collections.sort(entries, new Comparator<TermGroupFacetCollector.FacetEntry>() {\n\n      public int compare(TermGroupFacetCollector.FacetEntry a, TermGroupFacetCollector.FacetEntry b) {\n        if (orderByCount) {\n          int cmp = b.getCount() - a.getCount();\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n        return a.getValue().compareTo(b.getValue());\n      }\n\n    });\n\n    int endOffset = offset + limit;\n    List<TermGroupFacetCollector.FacetEntry> entriesResult;\n    if (offset >= entries.size()) {\n      entriesResult = Collections.emptyList();\n    } else if (endOffset >= entries.size()) {\n      entriesResult = entries.subList(offset, entries.size());\n    } else {\n      entriesResult = entries.subList(offset, endOffset);\n    }\n    return new GroupedFacetResult(totalCount, totalMissCount, entriesResult);\n  }\n\n","sourceOld":"  private GroupedFacetResult createExpectedFacetResult(String searchTerm, IndexContext context, int offset, int limit, int minCount, final boolean orderByCount, String facetPrefix) {\n    Map<String, Set<String>> facetGroups = context.searchTermToFacetGroups.get(searchTerm);\n    if (facetGroups == null) {\n      facetGroups = new HashMap<String, Set<String>>();\n    }\n\n    int totalCount = 0;\n    int totalMissCount = 0;\n    Set<String> facetValues;\n    if (facetPrefix != null) {\n      facetValues = new HashSet<String>();\n      for (String facetValue : context.facetValues) {\n        if (facetValue != null && facetValue.startsWith(facetPrefix)) {\n          facetValues.add(facetValue);\n        }\n      }\n    } else {\n      facetValues = context.facetValues;\n    }\n\n    List<TermGroupFacetCollector.FacetEntry> entries = new ArrayList<TermGroupFacetCollector.FacetEntry>(facetGroups.size());\n    // also includes facets with count 0\n    for (String facetValue : facetValues) {\n      if (facetValue == null) {\n        continue;\n      }\n\n      Set<String> groups = facetGroups.get(facetValue);\n      int count = groups != null ? groups.size() : 0;\n      if (count >= minCount) {\n        entries.add(new TermGroupFacetCollector.FacetEntry(new BytesRef(facetValue), count));\n      }\n      totalCount += count;\n    }\n\n    // Only include null count when no facet prefix is specified\n    if (facetPrefix == null) {\n      Set<String> groups = facetGroups.get(null);\n      if (groups != null) {\n        totalMissCount = groups.size();\n      }\n    }\n\n    Collections.sort(entries, new Comparator<TermGroupFacetCollector.FacetEntry>() {\n\n      public int compare(TermGroupFacetCollector.FacetEntry a, TermGroupFacetCollector.FacetEntry b) {\n        if (orderByCount) {\n          int cmp = b.getCount() - a.getCount();\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n        return a.getValue().compareTo(b.getValue());\n      }\n\n    });\n\n    int endOffset = offset + limit;\n    List<TermGroupFacetCollector.FacetEntry> entriesResult;\n    if (offset >= entries.size()) {\n      entriesResult = Collections.emptyList();\n    } else if (endOffset >= entries.size()) {\n      entriesResult = entries.subList(offset, entries.size());\n    } else {\n      entriesResult = entries.subList(offset, endOffset);\n    }\n    return new GroupedFacetResult(totalCount, totalMissCount, entriesResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}