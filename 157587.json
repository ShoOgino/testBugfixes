{"path":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testPartialMerge().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testPartialOptimize().mjava","sourceNew":"  public void testPartialMerge() throws Exception {\n    int num = atLeast(10);\n    for(int iter=0;iter<num;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      conf.setMergeScheduler(new SerialMergeScheduler());\n      TieredMergePolicy tmp = newTieredMergePolicy();\n      conf.setMergePolicy(tmp);\n      conf.setMaxBufferedDocs(2);\n      tmp.setMaxMergeAtOnce(3);\n      tmp.setSegmentsPerTier(6);\n\n      IndexWriter w = new IndexWriter(dir, conf);\n      int maxCount = 0;\n      final int numDocs = _TestUtil.nextInt(random, 20, 100);\n      for(int i=0;i<numDocs;i++) {\n        Document doc = new Document();\n        doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        int count = w.getSegmentCount();\n        maxCount = Math.max(count, maxCount);\n        assertTrue(\"count=\" + count + \" maxCount=\" + maxCount, count >= maxCount-3);\n      }\n\n      w.flush(true, true);\n\n      int segmentCount = w.getSegmentCount();\n      int targetCount = _TestUtil.nextInt(random, 1, segmentCount);\n      if (VERBOSE) {\n        System.out.println(\"TEST: merge to \" + targetCount + \" segs (current count=\" + segmentCount + \")\");\n      }\n      w.forceMerge(targetCount);\n      assertEquals(targetCount, w.getSegmentCount());\n\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testPartialOptimize() throws Exception {\n    int num = atLeast(10);\n    for(int iter=0;iter<num;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      conf.setMergeScheduler(new SerialMergeScheduler());\n      TieredMergePolicy tmp = newTieredMergePolicy();\n      conf.setMergePolicy(tmp);\n      conf.setMaxBufferedDocs(2);\n      tmp.setMaxMergeAtOnce(3);\n      tmp.setSegmentsPerTier(6);\n\n      IndexWriter w = new IndexWriter(dir, conf);\n      int maxCount = 0;\n      final int numDocs = _TestUtil.nextInt(random, 20, 100);\n      for(int i=0;i<numDocs;i++) {\n        Document doc = new Document();\n        doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        int count = w.getSegmentCount();\n        maxCount = Math.max(count, maxCount);\n        assertTrue(\"count=\" + count + \" maxCount=\" + maxCount, count >= maxCount-3);\n      }\n\n      w.flush(true, true);\n\n      int segmentCount = w.getSegmentCount();\n      int targetCount = _TestUtil.nextInt(random, 1, segmentCount);\n      if (VERBOSE) {\n        System.out.println(\"TEST: optimize to \" + targetCount + \" segs (current count=\" + segmentCount + \")\");\n      }\n      w.optimize(targetCount);\n      assertEquals(targetCount, w.getSegmentCount());\n\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws Exception {\n    int num = atLeast(10);\n    for(int iter=0;iter<num;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      conf.setMergeScheduler(new SerialMergeScheduler());\n      TieredMergePolicy tmp = newTieredMergePolicy();\n      conf.setMergePolicy(tmp);\n      conf.setMaxBufferedDocs(2);\n      tmp.setMaxMergeAtOnce(3);\n      tmp.setSegmentsPerTier(6);\n\n      IndexWriter w = new IndexWriter(dir, conf);\n      int maxCount = 0;\n      final int numDocs = _TestUtil.nextInt(random, 20, 100);\n      for(int i=0;i<numDocs;i++) {\n        Document doc = new Document();\n        doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        int count = w.getSegmentCount();\n        maxCount = Math.max(count, maxCount);\n        assertTrue(\"count=\" + count + \" maxCount=\" + maxCount, count >= maxCount-3);\n      }\n\n      w.flush(true, true);\n\n      int segmentCount = w.getSegmentCount();\n      int targetCount = _TestUtil.nextInt(random, 1, segmentCount);\n      if (VERBOSE) {\n        System.out.println(\"TEST: merge to \" + targetCount + \" segs (current count=\" + segmentCount + \")\");\n      }\n      w.forceMerge(targetCount);\n      assertEquals(targetCount, w.getSegmentCount());\n\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testPartialMerge() throws Exception {\n    int num = atLeast(10);\n    for(int iter=0;iter<num;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      conf.setMergeScheduler(new SerialMergeScheduler());\n      TieredMergePolicy tmp = newTieredMergePolicy();\n      conf.setMergePolicy(tmp);\n      conf.setMaxBufferedDocs(2);\n      tmp.setMaxMergeAtOnce(3);\n      tmp.setSegmentsPerTier(6);\n\n      IndexWriter w = new IndexWriter(dir, conf);\n      int maxCount = 0;\n      final int numDocs = _TestUtil.nextInt(random, 20, 100);\n      for(int i=0;i<numDocs;i++) {\n        Document doc = new Document();\n        doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        int count = w.getSegmentCount();\n        maxCount = Math.max(count, maxCount);\n        assertTrue(\"count=\" + count + \" maxCount=\" + maxCount, count >= maxCount-3);\n      }\n\n      w.flush(true, true);\n\n      int segmentCount = w.getSegmentCount();\n      int targetCount = _TestUtil.nextInt(random, 1, segmentCount);\n      if (VERBOSE) {\n        System.out.println(\"TEST: merge to \" + targetCount + \" segs (current count=\" + segmentCount + \")\");\n      }\n      w.forceMerge(targetCount);\n      assertEquals(targetCount, w.getSegmentCount());\n\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}