{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"MatchNoDocsQuery(\\\"\\\") MatchNoDocsQuery(\\\"\\\")\", q.toString());\n    //assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"MatchNoDocsQuery(\\\"\\\") MatchNoDocsQuery(\\\"\\\")\", q.toString());\n    //assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) t:two\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      QueryParserUtil.parse(queries5, fields, new MockAnalyzer(random()));\n    });\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\" \", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"05fe562aa248790944d43cdd478f512572835ba0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4778b794a897685e2f6c62caa1ac04983d1e69f"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["05fe562aa248790944d43cdd478f512572835ba0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"05fe562aa248790944d43cdd478f512572835ba0":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}