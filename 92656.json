{"path":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","commits":[{"id":"044cc6e1551cd0687478395eeceb9cde12caf10b","date":1150919367,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"661128e262718a7dc418602b138db3abe96c9efc","date":1151001452,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array or <code>null</code>\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f01f28d422fb8f120bbdfd69b63e199d848415f","date":1205492908,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array or <code>null</code>\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array or <code>null</code>\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf6c7bd2a2227ed1883f39804a356e29a7949a2","date":1205753506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array or <code>null</code>\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70c362dc47e16ef90835bd9d78415bdceefbd7e","date":1254561360,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List<Fieldable> result = new ArrayList<Fieldable>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List<Fieldable> result = new ArrayList<Fieldable>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List<Fieldable> result = new ArrayList<Fieldable>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Document#getFieldables(String).mjava","sourceNew":null,"sourceOld":"   /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public Fieldable[] getFieldables(String name) {\n     List<Fieldable> result = new ArrayList<Fieldable>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDABLES;\n\n     return result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"661128e262718a7dc418602b138db3abe96c9efc":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"3f01f28d422fb8f120bbdfd69b63e199d848415f":["661128e262718a7dc418602b138db3abe96c9efc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"]},"commit2Childs":{"661128e262718a7dc418602b138db3abe96c9efc":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"3f01f28d422fb8f120bbdfd69b63e199d848415f":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["661128e262718a7dc418602b138db3abe96c9efc"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}