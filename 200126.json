{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","commits":[{"id":"36e9f571cf40a8818eb678ed8fcf845cb9f9b456","date":1399039701,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.shutdown();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.shutdown();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.shutdown();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.shutdown();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<AtomicReaderContext> leaves = reader.leaves();\n    for (AtomicReaderContext atomicReaderContext : leaves) {\n      AtomicReader ar = atomicReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<StorableField> storedFields = new ArrayList<>();\n        storedFields.add(new StoredField(\"id\", id));\n        storedFields.add(new StoredField(\"foo\",TestUtil.randomSimpleString(random())));\n        final List<IndexableField> indexFields = new ArrayList<>();\n        indexFields.add(new StringField(\"id\", id, Field.Store.NO));\n        indexFields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new IndexDocument() {\n            @Override\n            public Iterable<IndexableField> indexableFields() {\n              return new RandomFailingIterable<IndexableField>(indexFields, random());\n            }\n\n            @Override\n            public Iterable<StorableField> storableFields() {\n              return new RandomFailingIterable<StorableField>(storedFields, random());\n            }        \n          });\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {\n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n\n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {\n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n\n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableFieldThrowsException().mjava","sourceNew":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {\n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n\n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testIterableFieldThrowsException() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    int iters = atLeast(100);\n    int docCount = 0;\n    int docId = 0;\n    Set<String> liveIds = new HashSet<>();\n    for (int i = 0; i < iters; i++) {      \n      int numDocs = atLeast(4);\n      for (int j = 0; j < numDocs; j++) {\n        String id = Integer.toString(docId++);\n        final List<IndexableField> fields = new ArrayList<>();\n        fields.add(new StringField(\"id\", id, Field.Store.YES));\n        fields.add(new StringField(\"foo\", TestUtil.randomSimpleString(random()), Field.Store.NO));\n        docId++;\n        \n        boolean success = false;\n        try {\n          w.addDocument(new RandomFailingIterable<IndexableField>(fields, random()));\n          success = true;\n        } catch (RuntimeException e) {\n          assertEquals(\"boom\", e.getMessage());\n        } finally {\n          if (success) {\n            docCount++;\n            liveIds.add(id);\n          }\n        }\n      }\n    }\n    DirectoryReader reader = w.getReader();\n    assertEquals(docCount, reader.numDocs());\n    List<LeafReaderContext> leaves = reader.leaves();\n    for (LeafReaderContext leafReaderContext : leaves) {\n      LeafReader ar = leafReaderContext.reader();\n      Bits liveDocs = ar.getLiveDocs();\n      int maxDoc = ar.maxDoc();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          assertTrue(liveIds.remove(ar.document(i).get(\"id\")));\n        }\n      }\n    }\n    assertTrue(liveIds.isEmpty());\n    w.close();\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["36e9f571cf40a8818eb678ed8fcf845cb9f9b456"],"36e9f571cf40a8818eb678ed8fcf845cb9f9b456":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"36e9f571cf40a8818eb678ed8fcf845cb9f9b456":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36e9f571cf40a8818eb678ed8fcf845cb9f9b456"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}