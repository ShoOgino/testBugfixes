{"path":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,HashMap,HashMap,HashMap,HashMap,HashMap,Query,Query,Query,Query,Query).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,HashMap,HashMap,HashMap,HashMap,HashMap,Query,Query,Query,Query,Query).mjava","pathOld":"/dev/null","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      HashMap h1, HashMap h2customNeutral, HashMap h3CustomMul, HashMap h4CustomAdd, HashMap h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(q1,s);\n    QueryUtils.check(q2,s);\n    QueryUtils.check(q3,s);\n    QueryUtils.check(q4,s);\n    QueryUtils.check(q5,s);\n\n    // verify scores ratios\n    for (Iterator it = h1.keySet().iterator(); it.hasNext();) {\n      Integer x = (Integer) it.next();\n\n      int doc =  x.intValue();\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \"+fieldScore);\n      assertTrue(\"fieldScore should not be 0\",fieldScore>0);\n\n      float score1 = ((Float)h1.get(x)).floatValue();\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = ((Float)h2customNeutral.get(x)).floatValue();\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = ((Float)h3CustomMul.get(x)).floatValue();\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = ((Float)h4CustomAdd.get(x)).floatValue();\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = ((Float)h5CustomMulAdd.get(x)).floatValue();\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,HashMap,HashMap,HashMap,HashMap,HashMap,Query,Query,Query,Query,Query).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,HashMap,HashMap,HashMap,HashMap,HashMap,Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      HashMap h1, HashMap h2customNeutral, HashMap h3CustomMul, HashMap h4CustomAdd, HashMap h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(q1,s);\n    QueryUtils.check(q2,s);\n    QueryUtils.check(q3,s);\n    QueryUtils.check(q4,s);\n    QueryUtils.check(q5,s);\n\n    // verify scores ratios\n    for (Iterator it = h1.keySet().iterator(); it.hasNext();) {\n      Integer x = (Integer) it.next();\n\n      int doc =  x.intValue();\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \"+fieldScore);\n      assertTrue(\"fieldScore should not be 0\",fieldScore>0);\n\n      float score1 = ((Float)h1.get(x)).floatValue();\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = ((Float)h2customNeutral.get(x)).floatValue();\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = ((Float)h3CustomMul.get(x)).floatValue();\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = ((Float)h4CustomAdd.get(x)).floatValue();\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = ((Float)h5CustomMulAdd.get(x)).floatValue();\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      HashMap h1, HashMap h2customNeutral, HashMap h3CustomMul, HashMap h4CustomAdd, HashMap h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(q1,s);\n    QueryUtils.check(q2,s);\n    QueryUtils.check(q3,s);\n    QueryUtils.check(q4,s);\n    QueryUtils.check(q5,s);\n\n    // verify scores ratios\n    for (Iterator it = h1.keySet().iterator(); it.hasNext();) {\n      Integer x = (Integer) it.next();\n\n      int doc =  x.intValue();\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \"+fieldScore);\n      assertTrue(\"fieldScore should not be 0\",fieldScore>0);\n\n      float score1 = ((Float)h1.get(x)).floatValue();\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = ((Float)h2customNeutral.get(x)).floatValue();\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = ((Float)h3CustomMul.get(x)).floatValue();\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = ((Float)h4CustomAdd.get(x)).floatValue();\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = ((Float)h5CustomMulAdd.get(x)).floatValue();\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}