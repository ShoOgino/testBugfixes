{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#copy(FileSystem,Path[],FileSystem,Path,boolean,boolean,Configuration).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#copy(FileSystem,Path[],FileSystem,Path,boolean,boolean,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean copy(FileSystem srcFS, Path[] srcs,\n                             FileSystem dstFS, Path dst,\n                             boolean deleteSource,\n                             boolean overwrite, Configuration conf)\n      throws IOException {\n    boolean gotException = false;\n    boolean returnVal = true;\n    StringBuilder exceptions = new StringBuilder();\n\n    if (srcs.length == 1)\n      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n\n    // Check if dest is directory\n    try {\n      FileStatus sdst = dstFS.getFileStatus(dst);\n      if (!sdst.isDirectory())\n        throw new IOException(\"copying multiple files, but last argument `\" +\n            dst + \"' is not a directory\");\n    } catch (FileNotFoundException e) {\n      throw new IOException(\n          \"`\" + dst + \"': specified destination directory \" +\n              \"does not exist\", e);\n    }\n\n    for (Path src : srcs) {\n      try {\n        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n          returnVal = false;\n      } catch (IOException e) {\n        gotException = true;\n        exceptions.append(e.getMessage());\n        exceptions.append(\"\\n\");\n      }\n    }\n    if (gotException) {\n      throw new IOException(exceptions.toString());\n    }\n    return returnVal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#copy(FileSystem,Path[],FileSystem,Path,boolean,boolean,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean copy(FileSystem srcFS, Path[] srcs,\n                             FileSystem dstFS, Path dst,\n                             boolean deleteSource,\n                             boolean overwrite, Configuration conf)\n      throws IOException {\n    boolean gotException = false;\n    boolean returnVal = true;\n    StringBuilder exceptions = new StringBuilder();\n\n    if (srcs.length == 1)\n      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n\n    // Check if dest is directory\n    try {\n      FileStatus sdst = dstFS.getFileStatus(dst);\n      if (!sdst.isDirectory())\n        throw new IOException(\"copying multiple files, but last argument `\" +\n            dst + \"' is not a directory\");\n    } catch (FileNotFoundException e) {\n      throw new IOException(\n          \"`\" + dst + \"': specified destination directory \" +\n              \"does not exist\", e);\n    }\n\n    for (Path src : srcs) {\n      try {\n        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n          returnVal = false;\n      } catch (IOException e) {\n        gotException = true;\n        exceptions.append(e.getMessage());\n        exceptions.append(\"\\n\");\n      }\n    }\n    if (gotException) {\n      throw new IOException(exceptions.toString());\n    }\n    return returnVal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}