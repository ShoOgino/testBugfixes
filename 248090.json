{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity    \n  }\n\n","bugFix":["e28b14e7783d24ca69089f13ddadadbd2afdcb29","d21918640a59a58307481ebd2506d4b708cd2588"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,0, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["19275ba31e621f6da1b83bf13af75233876fd3d4","9d3d365762604952e436b51980101dfc84cc1b3e"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["5da0b42730b6b99b31389ef94cb97384e83b9ede","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9274621789ce990dbfef455dabdf026bb3184821":["e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["28288370235ed02234a64753cdbf0c6ec096304a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"56572ec06f1407c066d6b7399413178b33176cd8":["9d3d365762604952e436b51980101dfc84cc1b3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"28288370235ed02234a64753cdbf0c6ec096304a":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["9d3d365762604952e436b51980101dfc84cc1b3e","9274621789ce990dbfef455dabdf026bb3184821"],"9d3d365762604952e436b51980101dfc84cc1b3e":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["9d3d365762604952e436b51980101dfc84cc1b3e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9d3d365762604952e436b51980101dfc84cc1b3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"28288370235ed02234a64753cdbf0c6ec096304a":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a71f63026529f3c1f03cfdd664910873ab2369ae","56572ec06f1407c066d6b7399413178b33176cd8","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["9274621789ce990dbfef455dabdf026bb3184821"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","56572ec06f1407c066d6b7399413178b33176cd8","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}