{"path":"lucene/tools/src/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","pathOld":"lucene/src/tools/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","sourceNew":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be658e3695ce5dfe92a3ad3d6531cfc987ae8935","date":1329142379,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/DependencyChecker#getLicenseTypes(String).mjava","sourceNew":null,"sourceOld":"  private static LicenseType[] getLicenseTypes(String licName) {\n    LicenseType[] result = new LicenseType[0];\n    int idx = licName.lastIndexOf(\"-\");\n    if (idx != -1) {\n      String licAbbrev = licName.substring(idx + 1, licName.length() - \".txt\".length());\n      String[] lics = licAbbrev.split(\"__\");\n      result = new LicenseType[lics.length];\n      for (int j = 0; j < lics.length; j++) {\n        try {\n          result[j] = LicenseType.valueOf(lics[j].toUpperCase());\n        } catch (IllegalArgumentException e) {\n          System.out.println(\"Invalid license: \" + lics[j].toUpperCase() + \" for \" + licName);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be658e3695ce5dfe92a3ad3d6531cfc987ae8935":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be658e3695ce5dfe92a3ad3d6531cfc987ae8935"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["be658e3695ce5dfe92a3ad3d6531cfc987ae8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be658e3695ce5dfe92a3ad3d6531cfc987ae8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}