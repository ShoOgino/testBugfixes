{"path":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeRecord(Map).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeRecord(Map).mjava","pathOld":"/dev/null","sourceNew":"    public void writeRecord(Map map) {\n        CSVField[] fields = config.getFields();\n        try {\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < fields.length; i++) {\n                Object o = map.get(fields[i].getName());\n                if (o != null) {\n                    String value = o.toString();\n                    value = writeValue(fields[i], value);\n                    sb.append(value);\n                }\n                if (!config.isDelimiterIgnored() && fields.length != (i+1)) {\n                    sb.append(config.getDelimiter());\n                }\n            }\n            if (config.isEndTrimmed()) {\n                for (int i = sb.length()-1; i >= 0; i--) {\n                    System.out.println(\"i : \" + i);\n                    if (Character.isWhitespace(sb.charAt(i))) {\n                        sb.deleteCharAt(i);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            sb.append(\"\\n\");\n            String line = sb.toString();\n            writer.write(line);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeRecord(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeRecord(Map).mjava","sourceNew":"    public void writeRecord(Map map) {\n        CSVField[] fields = config.getFields();\n        try {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < fields.length; i++) {\n                Object o = map.get(fields[i].getName());\n                if (o != null) {\n                    String value = o.toString();\n                    value = writeValue(fields[i], value);\n                    sb.append(value);\n                }\n                if (!config.isDelimiterIgnored() && fields.length != (i+1)) {\n                    sb.append(config.getDelimiter());\n                }\n            }\n            if (config.isEndTrimmed()) {\n                for (int i = sb.length()-1; i >= 0; i--) {\n                    System.out.println(\"i : \" + i);\n                    if (Character.isWhitespace(sb.charAt(i))) {\n                        sb.deleteCharAt(i);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            sb.append(\"\\n\");\n            String line = sb.toString();\n            writer.write(line);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n","sourceOld":"    public void writeRecord(Map map) {\n        CSVField[] fields = config.getFields();\n        try {\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < fields.length; i++) {\n                Object o = map.get(fields[i].getName());\n                if (o != null) {\n                    String value = o.toString();\n                    value = writeValue(fields[i], value);\n                    sb.append(value);\n                }\n                if (!config.isDelimiterIgnored() && fields.length != (i+1)) {\n                    sb.append(config.getDelimiter());\n                }\n            }\n            if (config.isEndTrimmed()) {\n                for (int i = sb.length()-1; i >= 0; i--) {\n                    System.out.println(\"i : \" + i);\n                    if (Character.isWhitespace(sb.charAt(i))) {\n                        sb.deleteCharAt(i);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            sb.append(\"\\n\");\n            String line = sb.toString();\n            writer.write(line);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n","bugFix":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b","date":1553472106,"type":4,"author":"Gus Heck","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeRecord(Map).mjava","sourceNew":null,"sourceOld":"    public void writeRecord(Map map) {\n        CSVField[] fields = config.getFields();\n        try {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < fields.length; i++) {\n                Object o = map.get(fields[i].getName());\n                if (o != null) {\n                    String value = o.toString();\n                    value = writeValue(fields[i], value);\n                    sb.append(value);\n                }\n                if (!config.isDelimiterIgnored() && fields.length != (i+1)) {\n                    sb.append(config.getDelimiter());\n                }\n            }\n            if (config.isEndTrimmed()) {\n                for (int i = sb.length()-1; i >= 0; i--) {\n                    System.out.println(\"i : \" + i);\n                    if (Character.isWhitespace(sb.charAt(i))) {\n                        sb.deleteCharAt(i);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            sb.append(\"\\n\");\n            String line = sb.toString();\n            writer.write(line);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b":["d06343967a29132f5d782f74e8d0988400278a02"],"d06343967a29132f5d782f74e8d0988400278a02":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63fc16c8a7bc8d24e5266ae06d44d83c6d30403b"]},"commit2Childs":{"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d06343967a29132f5d782f74e8d0988400278a02":["63fc16c8a7bc8d24e5266ae06d44d83c6d30403b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["d06343967a29132f5d782f74e8d0988400278a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}