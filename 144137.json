{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"/dev/null","sourceNew":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab580e6e4b52e834d604ab96b0c981f50d0f96e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"/dev/null","sourceNew":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab580e6e4b52e834d604ab96b0c981f50d0f96e3","date":1511990237,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","sourceNew":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","sourceNew":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","sourceNew":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    ApiBag apiBag;\n    try (CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC)) {\n       apiBag = new ApiBag(false);\n       for (Api api : coreAdminHandler.getApis()) {\n         apiBag.register(api, Collections.EMPTY_MAP);\n       }\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC);\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : coreAdminHandler.getApis()) {\n      apiBag.register(api, Collections.EMPTY_MAP);\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#testCalls().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    ApiBag apiBag;\n    try (CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC)) {\n       apiBag = new ApiBag(false);\n       for (Api api : coreAdminHandler.getApis()) {\n         apiBag.register(api, Collections.EMPTY_MAP);\n       }\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","sourceOld":"  public void testCalls() throws Exception {\n    Map<String, Object[]> calls = new HashMap<>();\n    CoreContainer mockCC = getCoreContainerMock(calls, new HashMap<>());\n\n    ApiBag apiBag;\n    try (CoreAdminHandler  coreAdminHandler = new CoreAdminHandler(mockCC)) {\n       apiBag = new ApiBag(false);\n       for (Api api : coreAdminHandler.getApis()) {\n         apiBag.register(api, Collections.EMPTY_MAP);\n       }\n    }\n    TestCollectionAPIs.makeCall(apiBag, \"/cores\", SolrRequest.METHOD.POST,\n        \"{create:{name: hello, instanceDir : someDir, schema: 'schema.xml'}}\", mockCC);\n    Object[] params = calls.get(\"create\");\n    assertEquals(\"hello\" ,params[0]);\n    assertEquals(fromJSONString(\"{schema : schema.xml}\") ,params[2]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{swap:{with: core2}}\", mockCC);\n    params = calls.get(\"swap\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{rename:{to: core2}}\", mockCC);\n    params = calls.get(\"rename\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(\"core2\" ,params[1]);\n\n    TestCollectionAPIs.makeCall(apiBag, \"/cores/core1\", SolrRequest.METHOD.POST,\n        \"{unload:{deleteIndex : true}}\", mockCC);\n    params = calls.get(\"unload\");\n    assertEquals(\"core1\" ,params[0]);\n    assertEquals(Boolean.TRUE ,params[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","ab580e6e4b52e834d604ab96b0c981f50d0f96e3"],"ba055e19afc289adcb5bedaf68513793a7254012":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"ab580e6e4b52e834d604ab96b0c981f50d0f96e3":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["e98520789adb1d5ad05afb4956eca0944a929688"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["1aad05eeff7818b0833c02ac6b743aa72054963b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ab580e6e4b52e834d604ab96b0c981f50d0f96e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ab580e6e4b52e834d604ab96b0c981f50d0f96e3":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}