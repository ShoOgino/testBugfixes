{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    BytesRef payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length + \" does not equal: \" + expectPay.length, payload.length == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.bytes[i + payload.offset], expectPay[i] == payload.bytes[i + payload.offset]);\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    BytesRef payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length + \" does not equal: \" + expectPay.length, payload.length == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.bytes[i + payload.offset], expectPay[i] == payload.bytes[i + payload.offset]);\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    BytesRef payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length + \" does not equal: \" + expectPay.length, payload.length == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.bytes[i + payload.offset], expectPay[i] == payload.bytes[i + payload.offset]);\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}