{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","pathOld":"/dev/null","sourceNew":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // OfflineSorter isn't thread safe, but our own private tempDir works around this:\n    tempDir = Files.createTempDirectory(OfflineSorter.defaultTempDir(), RangeTreeWriter.class.getSimpleName());\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = tempDir.resolve(\"in\");\n    writer = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","sourceNew":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"in\", \"\");\n    writer = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","sourceOld":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // OfflineSorter isn't thread safe, but our own private tempDir works around this:\n    tempDir = Files.createTempDirectory(OfflineSorter.defaultTempDir(), RangeTreeWriter.class.getSimpleName());\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = tempDir.resolve(\"in\");\n    writer = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","sourceNew":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = tempDir.createTempOutput(tempFileNamePrefix, \"rangetree\", IOContext.DEFAULT);\n    offlineWriter = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      offlineWriter.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","sourceOld":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"in\", \"\");\n    writer = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#switchToOffline().mjava","sourceNew":null,"sourceOld":"  /** If the current segment has too many points then we switchover to temp files / offline sort. */\n  private void switchToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    tempInput = tempDir.createTempOutput(tempFileNamePrefix, \"rangetree\", IOContext.DEFAULT);\n    offlineWriter = new OfflineSorter.ByteSequencesWriter(tempInput);\n    for(int i=0;i<valueCount;i++) {\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeLong(heapWriter.values[i]);\n      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);\n      scratchBytesOutput.writeVLong(i);\n      // TODO: can/should OfflineSorter optimize the fixed-width case?\n      offlineWriter.write(scratchBytes, 0, scratchBytes.length);\n    }\n\n    heapWriter = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}