{"path":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n    SegmentInfos eligible = new SegmentInfos();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.range(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.range(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","79ba4baff197d5691f403962548d82fe855e4101","79ba4baff197d5691f403962548d82fe855e4101","79ba4baff197d5691f403962548d82fe855e4101","79ba4baff197d5691f403962548d82fe855e4101"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n    SegmentInfos eligible = new SegmentInfos();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.range(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.range(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n    SegmentInfos eligible = new SegmentInfos();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.range(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.range(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n    SegmentInfos eligible = new SegmentInfos();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.range(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.range(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n    SegmentInfos eligible = new SegmentInfos();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.range(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.range(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isOptimized(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isOptimized(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3","45669a651c970812a680841b97a77cce06af559f"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"45669a651c970812a680841b97a77cce06af559f":[],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}