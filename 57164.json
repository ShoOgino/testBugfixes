{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","commits":[{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n\n     int i = 0;\n     while (spans.next()){\n        i++;\n     }\n     return i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n\n     int i = 0;\n     while (spans.next()){\n        i++;\n     }\n     return i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), snq);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n\n     int i = 0;\n     while (spans.next()){\n        i++;\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), snq);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n\n     int i = 0;\n     while (spans.next()){\n        i++;\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), snq);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanTermQuery iq = new SpanTermQuery(new Term(field, include));\n     SpanTermQuery eq = new SpanTermQuery(new Term(field, exclude));\n     SpanNotQuery snq = new SpanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), snq);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), snq);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7d57d8425f061bbc789486399b498a35f960765e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"fab172655716b96f7e42376116235017a922de3a":["2102da8a037e2ce5cb9f72256c58c8722b9cd706","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d57d8425f061bbc789486399b498a35f960765e"],"7d57d8425f061bbc789486399b498a35f960765e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7d57d8425f061bbc789486399b498a35f960765e"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"7d57d8425f061bbc789486399b498a35f960765e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}