{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    rmDir(new File(storePathname));\n    FSDirectory storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    rmDir(new File(storePathname));\n    FSDirectory storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    rmDir(new File(storePathname));\n    FSDirectory storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":null,"sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    rmDir(new File(storePathname));\n    FSDirectory storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}