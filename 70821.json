{"path":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","pathOld":"/dev/null","sourceNew":"    /** Add a source stream. If sourceDir is null, it is set to the\n     *  same value as the directory where this compound stream exists.\n     *  The id is the string by which the sub-stream will be know in the\n     *  compound stream. The caller must ensure that the ID is unique. If the\n     *  id is null, it is set to the name of the source file.\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n                \n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n            \n        if (! ids.add(file)) \n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n            \n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f534c1db9eb255bc5a5137c7bf362ff90c276","date":1066054684,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","sourceNew":"    /** Add a source stream. If sourceDir is null, it is set to the\n     *  same value as the directory where this compound stream exists.\n     *  The id is the string by which the sub-stream will be know in the\n     *  compound stream. The caller must ensure that the ID is unique. If the\n     *  id is null, it is set to the name of the source file.\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","sourceOld":"    /** Add a source stream. If sourceDir is null, it is set to the\n     *  same value as the directory where this compound stream exists.\n     *  The id is the string by which the sub-stream will be know in the\n     *  compound stream. The caller must ensure that the ID is unique. If the\n     *  id is null, it is set to the name of the source file.\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n                \n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n            \n        if (! ids.add(file)) \n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n            \n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dfeb29da40c8c2de1b6697f65ce234b4e73294","date":1092426876,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","sourceNew":"    /** Add a source stream. <code>file</code> is the string by which the \n     *  sub-stream will be known in the compound stream.\n     * \n     *  @throws IllegalStateException if this writer is closed\n     *  @throws IllegalArgumentException if <code>file</code> is null\n     *   or if a file with the same name has been added already\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","sourceOld":"    /** Add a source stream. If sourceDir is null, it is set to the\n     *  same value as the directory where this compound stream exists.\n     *  The id is the string by which the sub-stream will be know in the\n     *  compound stream. The caller must ensure that the ID is unique. If the\n     *  id is null, it is set to the name of the source file.\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67cd33295438e867652c323bd3edf9bcfb9bf66","date":1093524074,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","sourceNew":"    /** Add a source stream. <code>file</code> is the string by which the \n     *  sub-stream will be known in the compound stream.\n     * \n     *  @throws IllegalStateException if this writer is closed\n     *  @throws NullPointerException if <code>file</code> is null\n     *  @throws IllegalArgumentException if a file with the same name\n     *   has been added already\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new NullPointerException(\n                \"file cannot be null\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","sourceOld":"    /** Add a source stream. <code>file</code> is the string by which the \n     *  sub-stream will be known in the compound stream.\n     * \n     *  @throws IllegalStateException if this writer is closed\n     *  @throws IllegalArgumentException if <code>file</code> is null\n     *   or if a file with the same name has been added already\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new IllegalArgumentException(\n                \"Missing source file\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileWriter#addFile(String).mjava","sourceNew":"    /** Add a source stream. <code>file</code> is the string by which the \n     *  sub-stream will be known in the compound stream.\n     * \n     *  @throws IllegalStateException if this writer is closed\n     *  @throws NullPointerException if <code>file</code> is null\n     *  @throws IllegalArgumentException if a file with the same name\n     *   has been added already\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new NullPointerException(\n                \"file cannot be null\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","sourceOld":"    /** Add a source stream. <code>file</code> is the string by which the \n     *  sub-stream will be known in the compound stream.\n     * \n     *  @throws IllegalStateException if this writer is closed\n     *  @throws NullPointerException if <code>file</code> is null\n     *  @throws IllegalArgumentException if a file with the same name\n     *   has been added already\n     */\n    public void addFile(String file) {\n        if (merged)\n            throw new IllegalStateException(\n                \"Can't add extensions after merge has been called\");\n\n        if (file == null)\n            throw new NullPointerException(\n                \"file cannot be null\");\n\n        if (! ids.add(file))\n            throw new IllegalArgumentException(\n                \"File \" + file + \" already added\");\n\n        FileEntry entry = new FileEntry();\n        entry.file = file;\n        entries.add(entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4dfeb29da40c8c2de1b6697f65ce234b4e73294":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"f67cd33295438e867652c323bd3edf9bcfb9bf66":["f4dfeb29da40c8c2de1b6697f65ce234b4e73294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f67cd33295438e867652c323bd3edf9bcfb9bf66"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"f4dfeb29da40c8c2de1b6697f65ce234b4e73294":["f67cd33295438e867652c323bd3edf9bcfb9bf66"],"f67cd33295438e867652c323bd3edf9bcfb9bf66":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["f4dfeb29da40c8c2de1b6697f65ce234b4e73294"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}