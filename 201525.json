{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    double w = Math.abs(rMaxX - rMinX);\n    if (w <= 90.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    // partition\n    w /= 4;\n    final double p1 = rMinX + w;\n    final double p2 = p1 + w;\n    final double p3 = p2 + w;\n\n    return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p1) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p1) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p2) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p2) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p3) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p3) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f","ec60431d008a694828dacb4bc3cda775b6c44a9f","70f899f76073d8bd93f9f635fe5be681bf516d98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70f899f76073d8bd93f9f635fe5be681bf516d98","date":1451578105,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    double w = Math.abs(rMaxX - rMinX);\n    if (w <= 90.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    // partition\n    w /= 4;\n    final double p1 = rMinX + w;\n    final double p2 = p1 + w;\n    final double p3 = p2 + w;\n\n    return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p1) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p1) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p2) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p2) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, p3) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, p3) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n        || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectAnyCornersOutsideCircle(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","sourceOld":"  /**\n   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined\n   * by centerLon, centerLat, radiusMeters)\n   *\n   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not\n   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the\n   * space will be further divided to more accurately compute whether the rectangle crosses the circle\n   */\n  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,\n                                                     final double rMaxY, final double centerLon, final double centerLat,\n                                                     final double radiusMeters, final boolean approx) {\n    if (approx == true) {\n      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);\n    }\n    // if span is less than 70 degrees we can approximate using distance alone\n    if (Math.abs(rMaxX - rMinX) <= 70.0) {\n      return GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMinX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;\n    }\n    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["70f899f76073d8bd93f9f635fe5be681bf516d98","937923083e4d137932336fc80f3d78758ff698a6"],"70f899f76073d8bd93f9f635fe5be681bf516d98":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"937923083e4d137932336fc80f3d78758ff698a6":["70f899f76073d8bd93f9f635fe5be681bf516d98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"70f899f76073d8bd93f9f635fe5be681bf516d98":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["70f899f76073d8bd93f9f635fe5be681bf516d98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}