{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(AttributeFactory,IntPredicate).mjava","commits":[{"id":"d87468ba199460e43121d57563bbc0560d509c29","date":1446677057,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(AttributeFactory,IntPredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.\n   * The predicate should return {@code true} for all valid token characters.\n   * <p>\n   * This factory is intended to be used with lambdas or method references. E.g., an elegant way\n   * to create an instance which behaves exactly as {@link LetterTokenizer} is:\n   * <pre class=\"prettyprint lang-java\">\n   * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(factory, Character::isLetter);\n   * </pre>\n   */\n  public static CharTokenizer fromTokenCharPredicate(AttributeFactory factory, final IntPredicate tokenCharPredicate) {\n    return fromTokenCharPredicate(factory, tokenCharPredicate, IntUnaryOperator.identity());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","date":1537441025,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(AttributeFactory,IntPredicate).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(AttributeFactory,IntPredicate).mjava","sourceNew":"  /**\n   * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.\n   * The predicate should return {@code true} for all valid token characters.\n   * <p>\n   * This factory is intended to be used with lambdas or method references. E.g., an elegant way\n   * to create an instance which behaves exactly as {@link LetterTokenizer} is:\n   * <pre class=\"prettyprint lang-java\">\n   * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(factory, Character::isLetter);\n   * </pre>\n   */\n  public static CharTokenizer fromTokenCharPredicate(AttributeFactory factory, final IntPredicate tokenCharPredicate) {\n    Objects.requireNonNull(tokenCharPredicate, \"predicate must not be null.\");\n    return new CharTokenizer(factory) {\n      @Override\n      protected boolean isTokenChar(int c) {\n        return tokenCharPredicate.test(c);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of CharTokenizer with the supplied attribute factory using a custom predicate, supplied as method reference or lambda expression.\n   * The predicate should return {@code true} for all valid token characters.\n   * <p>\n   * This factory is intended to be used with lambdas or method references. E.g., an elegant way\n   * to create an instance which behaves exactly as {@link LetterTokenizer} is:\n   * <pre class=\"prettyprint lang-java\">\n   * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(factory, Character::isLetter);\n   * </pre>\n   */\n  public static CharTokenizer fromTokenCharPredicate(AttributeFactory factory, final IntPredicate tokenCharPredicate) {\n    return fromTokenCharPredicate(factory, tokenCharPredicate, IntUnaryOperator.identity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["d87468ba199460e43121d57563bbc0560d509c29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"],"d87468ba199460e43121d57563bbc0560d509c29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d87468ba199460e43121d57563bbc0560d509c29"],"d87468ba199460e43121d57563bbc0560d509c29":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}