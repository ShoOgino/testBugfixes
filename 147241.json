{"path":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeoHashUtils.encode(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/GeoHashField#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String geohash = toInternal(options.pointStr);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","sourceOld":"    //QUESTION: Should we do a fast and crude one?  Or actually check distances\n  //Fast and crude could use EdgeNGrams, but that would require a different\n  //encoding.  Plus there are issues around the Equator/Prime Meridian\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, 2);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    String geohash = GeohashUtils.encodeLatLon(point[0], point[1]);\n    //TODO: optimize this\n    return new SolrConstantScoreQuery(new ValueSourceRangeFilter(new GeohashHaversineFunction(getValueSource(options.field, parser),\n            new LiteralValueSource(geohash), options.radius), \"0\", String.valueOf(options.distance), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e47768b261c28e7e6032060e8331475c81057953","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e47768b261c28e7e6032060e8331475c81057953"],"e47768b261c28e7e6032060e8331475c81057953":["c26f00b574427b55127e869b935845554afde1fa","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e47768b261c28e7e6032060e8331475c81057953":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}