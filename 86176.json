{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores, boost);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores, boost);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, scoreMode, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, scoreMode, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (TermAndBoost term : terms) {\n        bq.add(new TermQuery(term.term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores()) {\n      return new SynonymWeight(this, searcher, scoreMode, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["2f2c13220a828a78007cedb364e22dd8986ed650"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f2c13220a828a78007cedb364e22dd8986ed650":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"2f2c13220a828a78007cedb364e22dd8986ed650":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2f2c13220a828a78007cedb364e22dd8986ed650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}