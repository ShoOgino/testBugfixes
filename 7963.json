{"path":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#findForRemove(int,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#findForRemove(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#findForRemove(int,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#findForRemove(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#findForRemove(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find} there's\n   * no need to re-calculate that hash.\n   * \n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(int key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index] == key) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}