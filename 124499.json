{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29514ce99b5036f405d8ac886578639d8d8f6336","date":1500647906,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3dcb96911c944d95b31bbb0615643e743e08911","date":1500648181,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028, https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961ca4db6a4e79b4d273820a1cfd1d80aca4d598","date":1521550033,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028, https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028, https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice, hits.getMaxScore());\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits.value);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDifferentTopN().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits.value);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        if (log.isInfoEnabled()) {\n          log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n              .get(\"id\"), j);\n        }\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11134\")\n  @Test\n  public void testDifferentTopN() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz oz\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz oz the\", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz oz the the \", Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 3.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"3\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz oz the the the the \",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 4.0f));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"4\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 5.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(5, hits.totalHits.value);\n\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n\n    // rerank @ 0 should not change the order\n    hits = rescorer.rescore(searcher, hits, 0);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", searcher.doc(hits.scoreDocs[2].doc).get(\"id\"));\n    assertEquals(\"3\", searcher.doc(hits.scoreDocs[3].doc).get(\"id\"));\n    assertEquals(\"4\", searcher.doc(hits.scoreDocs[4].doc).get(\"id\"));\n\n    // test rerank with different topN cuts\n\n    for (int topN = 1; topN <= 5; topN++) {\n      log.info(\"rerank {} documents \", topN);\n      hits = searcher.search(bqBuilder.build(), 10);\n\n      final ScoreDoc[] slice = new ScoreDoc[topN];\n      System.arraycopy(hits.scoreDocs, 0, slice, 0, topN);\n      hits = new TopDocs(hits.totalHits, slice);\n      hits = rescorer.rescore(searcher, hits, topN);\n      for (int i = topN - 1, j = 0; i >= 0; i--, j++) {\n        log.info(\"doc {} in pos {}\", searcher.doc(hits.scoreDocs[j].doc)\n            .get(\"id\"), j);\n\n        assertEquals(i,\n            Integer.parseInt(searcher.doc(hits.scoreDocs[j].doc).get(\"id\")));\n        assertEquals(i + 1, hits.scoreDocs[j].score, 0.00001);\n\n      }\n    }\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","961ca4db6a4e79b4d273820a1cfd1d80aca4d598"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["a52341299179de5479672f7cf518bf4b173f34b3"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"29514ce99b5036f405d8ac886578639d8d8f6336":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","f3dcb96911c944d95b31bbb0615643e743e08911"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a52341299179de5479672f7cf518bf4b173f34b3":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","f3dcb96911c944d95b31bbb0615643e743e08911"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"961ca4db6a4e79b4d273820a1cfd1d80aca4d598":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"f3dcb96911c944d95b31bbb0615643e743e08911":["29514ce99b5036f405d8ac886578639d8d8f6336"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","961ca4db6a4e79b4d273820a1cfd1d80aca4d598"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","29514ce99b5036f405d8ac886578639d8d8f6336","936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"29514ce99b5036f405d8ac886578639d8d8f6336":["f3dcb96911c944d95b31bbb0615643e743e08911"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"961ca4db6a4e79b4d273820a1cfd1d80aca4d598":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"f3dcb96911c944d95b31bbb0615643e743e08911":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","936cdd5882761db3b844afd6f84ab81cbb011a75","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}