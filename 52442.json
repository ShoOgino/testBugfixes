{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":null,"sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"771281b4c7dc712b48ba338b970b49007ca402a1","date":1295480908,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(sort, nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    SolrIndexReader r=null;\n\n\n    while(iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        r = reader.getLeafReaders()[++readerIndex];\n        base = reader.getLeafOffsets()[readerIndex];\n        end = base + r.maxDoc();\n        topCollector.setNextReader(r, base);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89681ce7e164f6a4b0325f7aa542592f77c07c43","date":1302480749,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = -1;\n    \n    AtomicReaderContext leaf = null;\n\n    for (int i = 0; i < leafContexts.length; i++) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        leaf = leafContexts[i++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    // bit of a hack to tell if a set is sorted - do it better in the futute.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts[readerIndex++];\n        base = leaf.docBase;\n        end = base + leaf.reader.maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["89681ce7e164f6a4b0325f7aa542592f77c07c43","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","89681ce7e164f6a4b0325f7aa542592f77c07c43"],"962d04139994fce5193143ef35615499a9a96d78":["e79a6d080bdd5b2a8f56342cf571b5476de04180","89681ce7e164f6a4b0325f7aa542592f77c07c43"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","771281b4c7dc712b48ba338b970b49007ca402a1"],"771281b4c7dc712b48ba338b970b49007ca402a1":["323f871ffe96b871d8c534a614be60751bb023c2"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"89681ce7e164f6a4b0325f7aa542592f77c07c43":["771281b4c7dc712b48ba338b970b49007ca402a1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["771281b4c7dc712b48ba338b970b49007ca402a1","89681ce7e164f6a4b0325f7aa542592f77c07c43"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","771281b4c7dc712b48ba338b970b49007ca402a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["89681ce7e164f6a4b0325f7aa542592f77c07c43"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["771281b4c7dc712b48ba338b970b49007ca402a1","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["962d04139994fce5193143ef35615499a9a96d78"],"771281b4c7dc712b48ba338b970b49007ca402a1":["e79a6d080bdd5b2a8f56342cf571b5476de04180","89681ce7e164f6a4b0325f7aa542592f77c07c43","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1da8d55113b689b06716246649de6f62430f15c0":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"89681ce7e164f6a4b0325f7aa542592f77c07c43":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}