{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","commits":[{"id":"c0f69522aa66ecee0518b3ea6d49afa08d03f588","date":1494874995,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 10);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n    assertTrue(copy1.get(4).doubleValue() == 0D);\n    assertTrue(copy1.get(5).doubleValue() == 0D);\n    assertTrue(copy1.get(6).doubleValue() == 0D);\n    assertTrue(copy1.get(7).doubleValue() == 0D);\n    assertTrue(copy1.get(8).doubleValue() == 0D);\n    assertTrue(copy1.get(9).doubleValue() == 0D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["e9017cf144952056066919f1ebc7897ff9bd71b1","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c0f69522aa66ecee0518b3ea6d49afa08d03f588":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c0f69522aa66ecee0518b3ea6d49afa08d03f588"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c0f69522aa66ecee0518b3ea6d49afa08d03f588","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"c0f69522aa66ecee0518b3ea6d49afa08d03f588":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}