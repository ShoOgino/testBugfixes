{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","commits":[{"id":"5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f","date":1356082924,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : _TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = _TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : _TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = _TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","sourceNew":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : _TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = _TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","sourceNew":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomNumbers.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInputOutput().mjava","sourceNew":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomNumbers.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPackedInputOutput() throws IOException {\n    final long[] longs = new long[random().nextInt(8192)];\n    final int[] bitsPerValues = new int[longs.length];\n    final boolean[] skip = new boolean[longs.length];\n    for (int i = 0; i < longs.length; ++i) {\n      final int bpv = RandomInts.randomIntBetween(random(), 1, 64);\n      bitsPerValues[i] = random().nextBoolean() ? bpv : TestUtil.nextInt(random(), bpv, 64);\n      if (bpv == 64) {\n        longs[i] = random().nextLong();\n      } else {\n        longs[i] = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      }\n      skip[i] = rarely();\n    }\n\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    PackedDataOutput pout = new PackedDataOutput(out);\n    long totalBits = 0;\n    for (int i = 0; i < longs.length; ++i) {\n      pout.writeLong(longs[i], bitsPerValues[i]);\n      totalBits += bitsPerValues[i];\n      if (skip[i]) {\n        pout.flush();\n        totalBits = 8 * (long) Math.ceil((double) totalBits / 8);\n      }\n    }\n    pout.flush();\n    assertEquals((long) Math.ceil((double) totalBits / 8), out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.READONCE);\n    final PackedDataInput pin = new PackedDataInput(in);\n    for (int i = 0; i < longs.length; ++i) {\n      assertEquals(\"\" + i, longs[i], pin.readLong(bitsPerValues[i]));\n      if (skip[i]) {\n        pin.skipToNextByte();\n      }\n    }\n    assertEquals((long) Math.ceil((double) totalBits / 8), in.getFilePointer());\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f"],"5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6448f67be45147de82a85cd903fec34e8930da75":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6613659748fe4411a7dcf85266e55db1f95f7315","6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6448f67be45147de82a85cd903fec34e8930da75"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5e7f04452aea74b8e0c287f1bfa3edb6e29baa8f"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}