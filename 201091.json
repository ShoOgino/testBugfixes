{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char,int,int).mjava","sourceNew":"  /**\n   * like {@link #toString(char)}, but takes only a part of the path, rather\n   * than the whole path.\n   * <P>\n   * <code>start</code> specifies the first component in the subpath, and\n   * <code>end</code> is one past the last component. If <code>start</code> is\n   * negative, 0 is assumed, and if <code>end</code> is negative or past the\n   * end of the path, the path is taken until the end. Otherwise, if\n   * <code>end<=start</code>, an empty string is returned. An emptry string is\n   * returned also in the case that the path is empty.\n   */\n  public String toString(char delimiter, int start, int end) {\n    if (start < 0) {\n      start = 0;\n    }\n    if (end < 0 || end > ncomponents) {\n      end = ncomponents;\n    }\n    if (end <= start) {\n      return \"\";\n    }\n    int startchar = (start == 0) ? 0 : ends[start - 1];\n    StringBuilder sb = new StringBuilder(ends[end - 1] - startchar\n        + (end - start) - 1);\n    try {\n      this.appendTo(sb, delimiter, start, end);\n    } catch (IOException e) {\n      // can't happen, because sb.append() never actually throws an\n      // exception\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * like {@link #toString(char)}, but takes only a part of the path, rather\n   * than the whole path.\n   * <P>\n   * <code>start</code> specifies the first component in the subpath, and\n   * <code>end</code> is one past the last component. If <code>start</code> is\n   * negative, 0 is assumed, and if <code>end</code> is negative or past the\n   * end of the path, the path is taken until the end. Otherwise, if\n   * <code>end<=start</code>, an empty string is returned. An emptry string is\n   * returned also in the case that the path is empty.\n   */\n  public String toString(char delimiter, int start, int end) {\n    if (start < 0) {\n      start = 0;\n    }\n    if (end < 0 || end > ncomponents) {\n      end = ncomponents;\n    }\n    if (end <= start) {\n      return \"\";\n    }\n    int startchar = (start == 0) ? 0 : ends[start - 1];\n    StringBuilder sb = new StringBuilder(ends[end - 1] - startchar\n        + (end - start) - 1);\n    try {\n      this.appendTo(sb, delimiter, start, end);\n    } catch (IOException e) {\n      // can't happen, because sb.append() never actually throws an\n      // exception\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * like {@link #toString(char)}, but takes only a part of the path, rather\n   * than the whole path.\n   * <P>\n   * <code>start</code> specifies the first component in the subpath, and\n   * <code>end</code> is one past the last component. If <code>start</code> is\n   * negative, 0 is assumed, and if <code>end</code> is negative or past the\n   * end of the path, the path is taken until the end. Otherwise, if\n   * <code>end<=start</code>, an empty string is returned. An emptry string is\n   * returned also in the case that the path is empty.\n   */\n  public String toString(char delimiter, int start, int end) {\n    if (start < 0) {\n      start = 0;\n    }\n    if (end < 0 || end > ncomponents) {\n      end = ncomponents;\n    }\n    if (end <= start) {\n      return \"\";\n    }\n    int startchar = (start == 0) ? 0 : ends[start - 1];\n    StringBuilder sb = new StringBuilder(ends[end - 1] - startchar\n        + (end - start) - 1);\n    try {\n      this.appendTo(sb, delimiter, start, end);\n    } catch (IOException e) {\n      // can't happen, because sb.append() never actually throws an\n      // exception\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * like {@link #toString(char)}, but takes only a part of the path, rather\n   * than the whole path.\n   * <P>\n   * <code>start</code> specifies the first component in the subpath, and\n   * <code>end</code> is one past the last component. If <code>start</code> is\n   * negative, 0 is assumed, and if <code>end</code> is negative or past the\n   * end of the path, the path is taken until the end. Otherwise, if\n   * <code>end<=start</code>, an empty string is returned. An emptry string is\n   * returned also in the case that the path is empty.\n   */\n  public String toString(char delimiter, int start, int end) {\n    if (start < 0) {\n      start = 0;\n    }\n    if (end < 0 || end > ncomponents) {\n      end = ncomponents;\n    }\n    if (end <= start) {\n      return \"\";\n    }\n    int startchar = (start == 0) ? 0 : ends[start - 1];\n    StringBuilder sb = new StringBuilder(ends[end - 1] - startchar\n        + (end - start) - 1);\n    try {\n      this.appendTo(sb, delimiter, start, end);\n    } catch (IOException e) {\n      // can't happen, because sb.append() never actually throws an\n      // exception\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}