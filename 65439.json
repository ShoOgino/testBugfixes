{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDeduplicateMustClauses().mjava","commits":[{"id":"33b0cbce3d060cc2547083fc6559e6080ec5ca23","date":1503308288,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDeduplicateMustClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeduplicateMustClauses() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    Query query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .build();\n    Query expected = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2);\n    assertEquals(expected, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 3), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    assertEquals(expected, searcher.rewrite(query));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8e4fbf51a35a1292b838d83f793794c274932a1","date":1503371298,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDeduplicateMustClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeduplicateMustClauses() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    Query query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .build();\n    Query expected = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2);\n    assertEquals(expected, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 3), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    assertEquals(expected, searcher.rewrite(query));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testDeduplicateMustClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeduplicateMustClauses() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    Query query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .build();\n    Query expected = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2);\n    assertEquals(expected, searcher.rewrite(query));\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 2), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), 3), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.MUST)\n        .build();\n    assertEquals(expected, searcher.rewrite(query));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8e4fbf51a35a1292b838d83f793794c274932a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b0cbce3d060cc2547083fc6559e6080ec5ca23"],"33b0cbce3d060cc2547083fc6559e6080ec5ca23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","a8e4fbf51a35a1292b838d83f793794c274932a1","33b0cbce3d060cc2547083fc6559e6080ec5ca23"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"33b0cbce3d060cc2547083fc6559e6080ec5ca23":["a8e4fbf51a35a1292b838d83f793794c274932a1"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}