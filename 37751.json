{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"/dev/null","sourceNew":"  public int doLogic() throws IOException {\n    if (t == null) {\n      IndexWriter w = getRunData().getIndexWriter();\n      t = new ReopenThread(w, pauseSec);\n      t.start();\n    }\n    return 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    if (t == null) {\n      IndexWriter w = getRunData().getIndexWriter();\n      t = new ReopenThread(w, pauseSec);\n      t.start();\n    }\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    if (t == null) {\n      IndexWriter w = getRunData().getIndexWriter();\n      t = new ReopenThread(w, pauseSec);\n      t.start();\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3353540ef2debe4c4c017e9d86e2c60f9e784336","date":1258197258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    int reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n        reopenCount++;\n      }\n    }\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    if (t == null) {\n      IndexWriter w = getRunData().getIndexWriter();\n      t = new ReopenThread(w, pauseSec);\n      t.start();\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    int reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n        reopenCount++;\n      }\n    }\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c8ee4a3c7836e15334241f70e67745db535320","date":1263810494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (long) (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"89c8ee4a3c7836e15334241f70e67745db535320":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["89c8ee4a3c7836e15334241f70e67745db535320"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["89c8ee4a3c7836e15334241f70e67745db535320"],"89c8ee4a3c7836e15334241f70e67745db535320":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}