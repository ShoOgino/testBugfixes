{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<String>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<String>();\n    synchronized (locker) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<String>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"593370180729325d1d6e43c1dfad05ea2a38b707","date":1463517150,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n      set.addAll(createdCores.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(lazyDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(lazyDescriptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded (dynamic)\n   *\n   * @return all cores names, whether loaded or unloaded.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      set.addAll(transientCores.keySet());\n      set.addAll(dynamicDescriptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(lazyDescriptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(lazyDescriptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permenent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set;\n    synchronized (modifyLock) {\n      set = new TreeSet<>(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getAllCoreNames().mjava","sourceNew":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set;\n    synchronized (modifyLock) {\n      set = new TreeSet<>(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets a list of all cores, loaded and unloaded \n   *\n   * @return all cores names, whether loaded or unloaded, transient or permanent.\n   */\n  public Collection<String> getAllCoreNames() {\n    Set<String> set = new TreeSet<>();\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getAllCoreNames());\n      }\n      set.addAll(residentDesciptors.keySet());\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["28288370235ed02234a64753cdbf0c6ec096304a"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9409650933cc688e77e565092a25e58adfc2e18d"],"9c9819d04ff44d2877a5a19257cd662751284a5f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","593370180729325d1d6e43c1dfad05ea2a38b707"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","593370180729325d1d6e43c1dfad05ea2a38b707"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"593370180729325d1d6e43c1dfad05ea2a38b707":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","593370180729325d1d6e43c1dfad05ea2a38b707"],"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"28288370235ed02234a64753cdbf0c6ec096304a":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","30c8e5574b55d57947e989443dfde611646530ee","b0b597c65628ca9e73913a07e81691f8229bae35"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9409650933cc688e77e565092a25e58adfc2e18d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"593370180729325d1d6e43c1dfad05ea2a38b707":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}