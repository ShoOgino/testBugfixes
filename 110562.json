{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCSelect() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\", new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","sourceOld":"  private void testJDBCSelect() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\", new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","sourceOld":"  private void testJDBCSelect() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\", new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","sourceOld":"  private void testJDBCSelect() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\", new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","sourceOld":"  private void testJDBCSelect() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\", new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17361387c1023c3b72fb3bcf3d258318ab54deb7","date":1494596656,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n    // Additional Types\n    String query = \"select 1 as ID1, {ts '2017-02-18 12:34:56.789'} as TS1, {t '01:02:03'} as T1, \"\n        + \"{d '1593-03-14'} as D1, cast(12.34 AS DECIMAL(4,2)) as DEC4_2, \"\n        + \"cast(1234 AS DECIMAL(4,0)) as DEC4_0, cast('big stuff' as CLOB(100)) as CLOB1 \"\n        + \"from DUAL order by ID1\";\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", query, new FieldComparator(\"ID1\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    assertEquals(1, tuples.size());\n    Tuple t;\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n        Statement statement = connection.createStatement()) {\n      ResultSet rs = statement.executeQuery(query);\n      rs.next();\n      t = tuples.iterator().next();\n      assertString(t, \"CLOB1\", rs.getString(\"CLOB1\"));\n      assertString(t, \"TS1\", rs.getTimestamp(\"TS1\").toInstant().toString());\n      assertString(t, \"T1\", rs.getTime(\"T1\").toString());\n      assertString(t, \"D1\", rs.getDate(\"D1\").toString());\n      assertDouble(t, \"DEC4_2\", rs.getDouble(\"DEC4_2\"));\n      assertLong(t, \"DEC4_0\", rs.getLong(\"DEC4_0\"));      \n    }     \n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSelect().mjava","sourceNew":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n    // Additional Types\n    String query = \"select 1 as ID1, {ts '2017-02-18 12:34:56.789'} as TS1, {t '01:02:03'} as T1, \"\n        + \"{d '1593-03-14'} as D1, cast(12.34 AS DECIMAL(4,2)) as DEC4_2, \"\n        + \"cast(1234 AS DECIMAL(4,0)) as DEC4_0, cast('big stuff' as CLOB(100)) as CLOB1 \"\n        + \"from DUAL order by ID1\";\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", query, new FieldComparator(\"ID1\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    assertEquals(1, tuples.size());\n    Tuple t;\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n        Statement statement = connection.createStatement()) {\n      ResultSet rs = statement.executeQuery(query);\n      rs.next();\n      t = tuples.iterator().next();\n      assertString(t, \"CLOB1\", rs.getString(\"CLOB1\"));\n      assertString(t, \"TS1\", rs.getTimestamp(\"TS1\").toInstant().toString());\n      assertString(t, \"T1\", rs.getTime(\"T1\").toString());\n      assertString(t, \"D1\", rs.getDate(\"D1\").toString());\n      assertDouble(t, \"DEC4_2\", rs.getDouble(\"DEC4_2\"));\n      assertLong(t, \"DEC4_0\", rs.getLong(\"DEC4_0\"));      \n    }     \n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSelect() throws Exception {\n\n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\",\n        new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrderOf(tuples, \"CODE\", \"NL\", \"NO\", \"NP\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    \n    // Simple 2\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME\",\n        new FieldComparator(\"COUNTRY_NAME\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(4, tuples.size());\n    assertOrderOf(tuples, \"CODE\", \"NP\", \"NL\", \"NO\", \"US\");\n    assertOrderOf(tuples, \"COUNTRY_NAME\", \"Nepal\", \"Netherlands\", \"Norway\", \"United States\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["73450c0955930295d34703e7ddbfc6973b7a121a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["73450c0955930295d34703e7ddbfc6973b7a121a","17361387c1023c3b72fb3bcf3d258318ab54deb7"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c533b201163bd7b15aa8881f922f9289a7668187","73450c0955930295d34703e7ddbfc6973b7a121a"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b940572a59da1b42b6c20ab5278155b12816807a":["c533b201163bd7b15aa8881f922f9289a7668187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17361387c1023c3b72fb3bcf3d258318ab54deb7"]},"commit2Childs":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["17361387c1023c3b72fb3bcf3d258318ab54deb7","e9017cf144952056066919f1ebc7897ff9bd71b1","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"c533b201163bd7b15aa8881f922f9289a7668187":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}