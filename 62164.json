{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      // Tricky: if primary crashes while warming (pre-copying) a merged segment _X, the new primary can easily flush or merge to _X (since we don't\n      // have a distributed inflateGens for the new primary) and _X file names will be reused.  In this case, our local deleter will be\n      // thinking it must remove _X's files (from the warmed merge that never went live), but this is dangerous when virus checker is active\n      // since deleter may finally succeed in deleting the file after we have copied the new _X flushed files.  So at this point was ask the\n      // deleter to NOT delete the file anymore:\n      dest.deleter.clearPending(Collections.singleton(fileName));\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c","date":1454874368,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      // Tricky: if primary crashes while warming (pre-copying) a merged segment _X, the new primary can easily flush or merge to _X (since we don't\n      // have a distributed inflateGens for the new primary) and _X file names will be reused.  In this case, our local deleter will be\n      // thinking it must remove _X's files (from the warmed merge that never went live), but this is dangerous when virus checker is active\n      // since deleter may finally succeed in deleting the file after we have copied the new _X flushed files.  So at this point was ask the\n      // deleter to NOT delete the file anymore:\n      dest.deleter.clearPending(Collections.singleton(fileName));\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.rename(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#finish().mjava","sourceNew":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.rename(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","sourceOld":"  @Override\n  public void finish() throws IOException {\n    dest.message(String.format(Locale.ROOT,\n                               \"top: file copy done; took %.1f msec to copy %d bytes; now rename %d tmp files\",\n                               (System.nanoTime() - startNS)/1000000.0,\n                               totBytesCopied,\n                               copiedFiles.size()));\n\n    // NOTE: if any of the files we copied overwrote a file in the current commit point, we (ReplicaNode) removed the commit point up\n    // front so that the commit is not corrupt.  This way if we hit exc here, or if we crash here, we won't leave a corrupt commit in\n    // the index:\n    for(Map.Entry<String,String> ent : copiedFiles.entrySet()) {\n      String tmpFileName = ent.getValue();\n      String fileName = ent.getKey();\n\n      if (Node.VERBOSE_FILES) {\n        dest.message(\"rename file \" + tmpFileName + \" to \" + fileName);\n      }\n\n      // NOTE: if this throws exception, then some files have been moved to their true names, and others are leftover .tmp files.  I don't\n      // think heroic exception handling is necessary (no harm will come, except some leftover files),  nor warranted here (would make the\n      // code more complex, for the exceptional cases when something is wrong w/ your IO system):\n      dest.dir.renameFile(tmpFileName, fileName);\n    }\n\n    copiedFiles.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"214256b5eeeaba88b8293b37d30460b462b19562":["68496c2200e559fb7802f7575427b7a482659afb"],"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b72a3c8c250ce67d9dd59e06316f982cd77bdb3c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","214256b5eeeaba88b8293b37d30460b462b19562"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["214256b5eeeaba88b8293b37d30460b462b19562"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"214256b5eeeaba88b8293b37d30460b462b19562":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["214256b5eeeaba88b8293b37d30460b462b19562","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["b72a3c8c250ce67d9dd59e06316f982cd77bdb3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}