{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonQueryParserConfiguration qp = getParserConfig(a);\n    \n    // set a field specific date resolution\n    setDateResolution(qp, monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    setDateResolution(qp, hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","174ced3f382f37c6b4eab123325bfea03b47af5e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonQueryParserConfiguration qp = getParserConfig(a);\n    \n    // set a field specific date resolution\n    setDateResolution(qp, monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    setDateResolution(qp, hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonQueryParserConfiguration qp = getParserConfig(a);\n    \n    // set a field specific date resolution\n    setDateResolution(qp, monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    setDateResolution(qp, hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    // we use the default Locale/TZ since LuceneTestCase randomizes it\n    Calendar endDateExpected = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ec57145e34263e28da6b82568e35471f7d67df69":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["46d8ada1fff8d18cb197c38c7983225162599948","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec57145e34263e28da6b82568e35471f7d67df69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}