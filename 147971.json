{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","commits":[{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a random integer between [start, end]. Integers between must be divisible by the 3rd argument. */\n  protected int randomIntBetweenDivisible(int start, int end, int divisible) {\n    // DWS: I tested this\n    int divisStart = (int) Math.ceil( (start+1) / (double)divisible );\n    int divisEnd = (int) Math.floor( (end-1) / (double)divisible );\n    int divisRange = Math.max(0,divisEnd - divisStart + 1);\n    int r = randomInt(1 + divisRange);//remember that '0' is counted\n    if (r == 0)\n      return start;\n    if (r == 1)\n      return end;\n    return (r-2 + divisStart)*divisible;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end]. Integers between must be divisible by the 3rd argument. */\n  protected int randomIntBetweenDivisible(int start, int end, int divisible) {\n    // DWS: I tested this\n    int divisStart = (int) Math.ceil( (start+1) / (double)divisible );\n    int divisEnd = (int) Math.floor( (end-1) / (double)divisible );\n    int divisRange = Math.max(0,divisEnd - divisStart + 1);\n    int r = randomInt(1 + divisRange);//remember that '0' is counted\n    if (r == 0)\n      return start;\n    if (r == 1)\n      return end;\n    return (r-2 + divisStart)*divisible;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end]. Integers between must be divisible by the 3rd argument. */\n  protected int randomIntBetweenDivisible(int start, int end, int divisible) {\n    // DWS: I tested this\n    int divisStart = (int) Math.ceil( (start+1) / (double)divisible );\n    int divisEnd = (int) Math.floor( (end-1) / (double)divisible );\n    int divisRange = Math.max(0,divisEnd - divisStart + 1);\n    int r = randomInt(1 + divisRange);//remember that '0' is counted\n    if (r == 0)\n      return start;\n    if (r == 1)\n      return end;\n    return (r-2 + divisStart)*divisible;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#randomIntBetweenDivisible(int,int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end]. Integers between must be divisible by the 3rd argument. */\n  protected int randomIntBetweenDivisible(int start, int end, int divisible) {\n    // DWS: I tested this\n    int divisStart = (int) Math.ceil( (start+1) / (double)divisible );\n    int divisEnd = (int) Math.floor( (end-1) / (double)divisible );\n    int divisRange = Math.max(0,divisEnd - divisStart + 1);\n    int r = randomInt(1 + divisRange);//remember that '0' is counted\n    if (r == 0)\n      return start;\n    if (r == 1)\n      return end;\n    return (r-2 + divisStart)*divisible;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end]. Integers between must be divisible by the 3rd argument. */\n  protected int randomIntBetweenDivisible(int start, int end, int divisible) {\n    // DWS: I tested this\n    int divisStart = (int) Math.ceil( (start+1) / (double)divisible );\n    int divisEnd = (int) Math.floor( (end-1) / (double)divisible );\n    int divisRange = Math.max(0,divisEnd - divisStart + 1);\n    int r = randomInt(1 + divisRange);//remember that '0' is counted\n    if (r == 0)\n      return start;\n    if (r == 1)\n      return end;\n    return (r-2 + divisStart)*divisible;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}