{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","commits":[{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":1,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new SlotAcc.CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9e4bd10604489b5817ee29e35ac96a3148cbec","date":1594345357,"type":3,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new SlotAcc.CountSlotArrAcc(fcontext, slotCount);\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new SlotAcc.CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c841e27891873cab110ebeb89f124a8ec470176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}