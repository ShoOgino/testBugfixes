{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<PivotField>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = null;\n      if (4 <= nl.size()) {\n        assert \"pivot\".equals(nl.getName(3));\n        Object subPiv = nl.getVal(3);\n        assert null != subPiv : \"Server sent back 'null' for sub pivots?\";\n        p = readPivots( (List<NamedList>) subPiv );\n      }\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      String f = (String)nl.getVal( 0 );\n      Object v = nl.getVal( 1 );\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n\n      List<PivotField> subPivots = null;\n      Map<String,FieldStatsInfo> fieldStatsInfos = null;\n\n      if (4 <= nl.size()) {\n        for(int index = 3; index < nl.size(); index++) {\n          final String key = nl.getName(index);\n          final Object val = nl.getVal(index);\n          switch (key) {\n\n          case \"pivot\": {\n            assert null != val : \"Server sent back 'null' for sub pivots?\";\n            assert val instanceof List : \"Server sent non-List for sub pivots?\";\n\n            subPivots = readPivots( (List<NamedList>) val );\n            break;\n          }\n          case \"stats\": {\n            assert null != val : \"Server sent back 'null' for stats?\";\n            assert val instanceof NamedList : \"Server sent non-NamedList for stats?\";\n\n            fieldStatsInfos = extractFieldStatsInfo((NamedList<Object>) val);\n            break;\n          }\n          default: \n            throw new RuntimeException( \"unknown key in pivot: \"+ key+ \" [\"+val+\"]\");\n\n          }\n        }\n      }\n\n      values.add( new PivotField( f, v, cnt, subPivots, fieldStatsInfos ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n      List<PivotField> p = null;\n      if (4 <= nl.size()) {\n        assert \"pivot\".equals(nl.getName(3));\n        Object subPiv = nl.getVal(3);\n        assert null != subPiv : \"Server sent back 'null' for sub pivots?\";\n        p = readPivots( (List<NamedList>) subPiv );\n      }\n      values.add( new PivotField( f, v, cnt, p ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n\n      List<PivotField> subPivots = null;\n      Map<String,FieldStatsInfo> fieldStatsInfos = null;\n      Map<String,Integer> queryCounts = null;\n      List<RangeFacet> ranges = null;\n\n      if (4 <= nl.size()) {\n        for(int index = 3; index < nl.size(); index++) {\n          final String key = nl.getName(index);\n          final Object val = nl.getVal(index);\n          switch (key) {\n\n          case \"pivot\": {\n            assert null != val : \"Server sent back 'null' for sub pivots?\";\n            assert val instanceof List : \"Server sent non-List for sub pivots?\";\n\n            subPivots = readPivots( (List<NamedList>) val );\n            break;\n          }\n          case \"stats\": {\n            assert null != val : \"Server sent back 'null' for stats?\";\n            assert val instanceof NamedList : \"Server sent non-NamedList for stats?\";\n\n            fieldStatsInfos = extractFieldStatsInfo((NamedList<Object>) val);\n            break;\n          }\n          case \"queries\": {\n            // Parse the queries\n            queryCounts = new LinkedHashMap<>();\n            NamedList<Integer> fq = (NamedList<Integer>) val;\n            if (fq != null) {\n              for( Map.Entry<String, Integer> entry : fq ) {\n                queryCounts.put( entry.getKey(), entry.getValue() );\n              }\n            }\n            break;\n          }\n          case \"ranges\": {\n            ranges  = extractRangeFacets((NamedList<NamedList<Object>>) val);\n            break;\n          }\n          default: \n            throw new RuntimeException( \"unknown key in pivot: \"+ key+ \" [\"+val+\"]\");\n\n          }\n        }\n      }\n\n      values.add( new PivotField( f, v, cnt, subPivots, fieldStatsInfos, queryCounts, ranges ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n\n      List<PivotField> subPivots = null;\n      Map<String,FieldStatsInfo> fieldStatsInfos = null;\n\n      if (4 <= nl.size()) {\n        for(int index = 3; index < nl.size(); index++) {\n          final String key = nl.getName(index);\n          final Object val = nl.getVal(index);\n          switch (key) {\n\n          case \"pivot\": {\n            assert null != val : \"Server sent back 'null' for sub pivots?\";\n            assert val instanceof List : \"Server sent non-List for sub pivots?\";\n\n            subPivots = readPivots( (List<NamedList>) val );\n            break;\n          }\n          case \"stats\": {\n            assert null != val : \"Server sent back 'null' for stats?\";\n            assert val instanceof NamedList : \"Server sent non-NamedList for stats?\";\n\n            fieldStatsInfos = extractFieldStatsInfo((NamedList<Object>) val);\n            break;\n          }\n          default: \n            throw new RuntimeException( \"unknown key in pivot: \"+ key+ \" [\"+val+\"]\");\n\n          }\n        }\n      }\n\n      values.add( new PivotField( f, v, cnt, subPivots, fieldStatsInfos ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#readPivots(List[NamedList]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n\n      List<PivotField> subPivots = null;\n      Map<String,FieldStatsInfo> fieldStatsInfos = null;\n      Map<String,Integer> queryCounts = null;\n      List<RangeFacet> ranges = null;\n\n      if (4 <= nl.size()) {\n        for(int index = 3; index < nl.size(); index++) {\n          final String key = nl.getName(index);\n          final Object val = nl.getVal(index);\n          switch (key) {\n\n          case \"pivot\": {\n            assert null != val : \"Server sent back 'null' for sub pivots?\";\n            assert val instanceof List : \"Server sent non-List for sub pivots?\";\n\n                    subPivots = readPivots( (List<NamedList>) val );\n            break;\n          }\n          case \"stats\": {\n            assert null != val : \"Server sent back 'null' for stats?\";\n            assert val instanceof NamedList : \"Server sent non-NamedList for stats?\";\n\n            fieldStatsInfos = extractFieldStatsInfo((NamedList<Object>) val);\n            break;\n          }\n          case \"queries\": {\n            // Parse the queries\n            queryCounts = new LinkedHashMap<>();\n            NamedList<Integer> fq = (NamedList<Integer>) val;\n            if (fq != null) {\n              for( Map.Entry<String, Integer> entry : fq ) {\n                queryCounts.put( entry.getKey(), entry.getValue() );\n              }\n            }\n            break;\n          }\n          case \"ranges\": {\n            ranges  = extractRangeFacets((NamedList<NamedList<Object>>) val);\n            break;\n          }\n          default: \n            throw new RuntimeException( \"unknown key in pivot: \"+ key+ \" [\"+val+\"]\");\n\n          }\n        }\n      }\n\n      values.add( new PivotField( f, v, cnt, subPivots, fieldStatsInfos, queryCounts, ranges ) );\n    }\n    return values;\n  }\n\n","sourceOld":"  protected List<PivotField> readPivots( List<NamedList> list )\n  {\n    ArrayList<PivotField> values = new ArrayList<>( list.size() );\n    for( NamedList nl : list ) {\n      // NOTE, this is cheating, but we know the order they are written in, so no need to check\n      assert \"field\".equals(nl.getName(0));\n      String f = (String)nl.getVal( 0 );\n      assert \"value\".equals(nl.getName(1));\n      Object v = nl.getVal( 1 );\n      assert \"count\".equals(nl.getName(2));\n      int cnt = ((Integer)nl.getVal( 2 )).intValue();\n\n      List<PivotField> subPivots = null;\n      Map<String,FieldStatsInfo> fieldStatsInfos = null;\n      Map<String,Integer> queryCounts = null;\n      List<RangeFacet> ranges = null;\n\n      if (4 <= nl.size()) {\n        for(int index = 3; index < nl.size(); index++) {\n          final String key = nl.getName(index);\n          final Object val = nl.getVal(index);\n          switch (key) {\n\n          case \"pivot\": {\n            assert null != val : \"Server sent back 'null' for sub pivots?\";\n            assert val instanceof List : \"Server sent non-List for sub pivots?\";\n\n            subPivots = readPivots( (List<NamedList>) val );\n            break;\n          }\n          case \"stats\": {\n            assert null != val : \"Server sent back 'null' for stats?\";\n            assert val instanceof NamedList : \"Server sent non-NamedList for stats?\";\n\n            fieldStatsInfos = extractFieldStatsInfo((NamedList<Object>) val);\n            break;\n          }\n          case \"queries\": {\n            // Parse the queries\n            queryCounts = new LinkedHashMap<>();\n            NamedList<Integer> fq = (NamedList<Integer>) val;\n            if (fq != null) {\n              for( Map.Entry<String, Integer> entry : fq ) {\n                queryCounts.put( entry.getKey(), entry.getValue() );\n              }\n            }\n            break;\n          }\n          case \"ranges\": {\n            ranges  = extractRangeFacets((NamedList<NamedList<Object>>) val);\n            break;\n          }\n          default: \n            throw new RuntimeException( \"unknown key in pivot: \"+ key+ \" [\"+val+\"]\");\n\n          }\n        }\n      }\n\n      values.add( new PivotField( f, v, cnt, subPivots, fieldStatsInfos, queryCounts, ranges ) );\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}