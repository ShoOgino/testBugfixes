{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","commits":[{"id":"755faee94413f220e729a0b60122d6b24f7a2468","date":1391011756,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e65138961258e03941aa9e98a44c5e3b956e02c4","date":1394639574,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        FacetLabel cp = new FacetLabel(field.dim, field.path);\n        for (int i = 1; i <= cp.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["38d1f7652993e785234ecf3c1fc10c7c46a6129b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38d1f7652993e785234ecf3c1fc10c7c46a6129b","date":1395156504,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        FacetLabel cp = new FacetLabel(field.dim, field.path);\n        for (int i = 1; i <= cp.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":["e65138961258e03941aa9e98a44c5e3b956e02c4","fd83550e4b0bdd36e7d9dca9273264100782440b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be9dc9e17c1046a542423f69130abddef886f16","date":1530129441,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n\n        FacetsConfig.DimConfig ft = getDimConfig(field.dim);        \n        \n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n\n        FacetsConfig.DimConfig ft = getDimConfig(field.dim);        \n        \n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n\n        FacetsConfig.DimConfig ft = getDimConfig(field.dim);        \n        \n        // Drill down:\n        int start;\n        if (ft.requireDimensionDrillDown) {\n          start = 1;\n        } else {\n          start = 2;\n        }\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        FacetLabel label = new FacetLabel(field.dim, field.path);\n        int ordinal = taxoWriter.addCategory(label);\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n        \n        // Drill down:\n        for (int i = 1; i <= label.length; i++) {\n          doc.add(new StringField(indexFieldName, pathToString(label.components, i), Field.Store.NO));\n        }\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d1f7652993e785234ecf3c1fc10c7c46a6129b":["e65138961258e03941aa9e98a44c5e3b956e02c4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["38d1f7652993e785234ecf3c1fc10c7c46a6129b","8be9dc9e17c1046a542423f69130abddef886f16"],"8be9dc9e17c1046a542423f69130abddef886f16":["38d1f7652993e785234ecf3c1fc10c7c46a6129b"],"755faee94413f220e729a0b60122d6b24f7a2468":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e65138961258e03941aa9e98a44c5e3b956e02c4":["755faee94413f220e729a0b60122d6b24f7a2468"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be9dc9e17c1046a542423f69130abddef886f16"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["38d1f7652993e785234ecf3c1fc10c7c46a6129b","8be9dc9e17c1046a542423f69130abddef886f16"]},"commit2Childs":{"38d1f7652993e785234ecf3c1fc10c7c46a6129b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8be9dc9e17c1046a542423f69130abddef886f16","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8be9dc9e17c1046a542423f69130abddef886f16":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"755faee94413f220e729a0b60122d6b24f7a2468":["e65138961258e03941aa9e98a44c5e3b956e02c4"],"e65138961258e03941aa9e98a44c5e3b956e02c4":["38d1f7652993e785234ecf3c1fc10c7c46a6129b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["755faee94413f220e729a0b60122d6b24f7a2468"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}