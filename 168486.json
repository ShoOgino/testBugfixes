{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              new FileInputStream(file)), StandardCharsets.UTF_8));\n    else in = new BufferedReader(IOUtils.getDecodingReader((new FileInputStream(\n            file)), StandardCharsets.UTF_8));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf30702df55f3384decc4b0e1033e8bc322e4c71","date":1465480090,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = new Float(1);\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = new Float(1);\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    while ((word = in.readLine()) != null) {\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase(locale);\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = 1f;\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = new Float(1);\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = 1f;\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = new Float(1);\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = 1f;\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = new Float(1);\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(Path,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occurred while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = 1f;\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(Path file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(IOUtils.getDecodingReader(new GZIPInputStream(\n              Files.newInputStream(file)), StandardCharsets.UTF_8));\n    else in = Files.newBufferedReader(file, StandardCharsets.UTF_8);\n    try {\n      String word;\n      int pos;\n      Float occur, one = 1f;\n      while ((word = in.readLine()) != null) {\n        pos = word.indexOf(\"\\t\");\n        occur = one;\n        if (pos != -1) {\n          occur = Float.parseFloat(word.substring(pos + 1).trim());\n          word = word.substring(0, pos);\n        }\n        String key = word.toLowerCase(locale);\n        if (rootNode == null) {\n          rootNode = new TSTNode(key.charAt(0), null);\n        }\n        TSTNode node = null;\n        if (key.length() > 0 && rootNode != null) {\n          TSTNode currentNode = rootNode;\n          int charIndex = 0;\n          while (true) {\n            if (currentNode == null) break;\n            int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                    currentNode.splitchar);\n            if (charComp == 0) {\n              charIndex++;\n              if (charIndex == key.length()) {\n                node = currentNode;\n                break;\n              }\n              currentNode = currentNode.relatives[TSTNode.EQKID];\n            } else if (charComp < 0) {\n              currentNode = currentNode.relatives[TSTNode.LOKID];\n            } else {\n              currentNode = currentNode.relatives[TSTNode.HIKID];\n            }\n          }\n          Float occur2 = null;\n          if (node != null) occur2 = ((Float) (node.data));\n          if (occur2 != null) {\n            occur += occur2.floatValue();\n          }\n          currentNode = getOrCreateNode(word.trim().toLowerCase(locale));\n          currentNode.data = occur;\n        }\n      }\n    } finally {\n      IOUtils.close(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf30702df55f3384decc4b0e1033e8bc322e4c71":["f4abec28b874149a7223e32cc7a01704c27790de"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["bf30702df55f3384decc4b0e1033e8bc322e4c71"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["bf30702df55f3384decc4b0e1033e8bc322e4c71","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["bf30702df55f3384decc4b0e1033e8bc322e4c71","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f4abec28b874149a7223e32cc7a01704c27790de","bf30702df55f3384decc4b0e1033e8bc322e4c71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"bf30702df55f3384decc4b0e1033e8bc322e4c71":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["bf30702df55f3384decc4b0e1033e8bc322e4c71","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}