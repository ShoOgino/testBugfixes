{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.assertNoActiveDWPT();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac","date":1331837771,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n\n      if (pendingCommit != null) {\n        throw new IllegalStateException(\"cannot close: prepareCommit was already called with no corresponding call to commit\");\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f241b963c5bcd6c2293a928059dd2d64988a6042","date":1340296137,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges, boolean doFlush) throws CorruptIndexException, IOException {\n\n    try {\n\n      if (pendingCommit != null) {\n        throw new IllegalStateException(\"cannot close: prepareCommit was already called with no corresponding call to commit\");\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (doFlush) {\n        flush(waitForMerges, true);\n      } else {\n        docWriter.abort(); // already closed\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (doFlush) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n\n      if (pendingCommit != null) {\n        throw new IllegalStateException(\"cannot close: prepareCommit was already called with no corresponding call to commit\");\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":null,"sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    try {\n\n      if (pendingCommit != null) {\n        throw new IllegalStateException(\"cannot close: prepareCommit was already called with no corresponding call to commit\");\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now flush at close waitForMerges=\" + waitForMerges);\n      }\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      synchronized(this) {\n        finishMerges(waitForMerges);\n        stopMerges = true;\n      }\n      mergeScheduler.close();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now call final commit()\");\n      }\n\n      if (!hitOOM) {\n        commitInternal(null);\n      }\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"at close: \" + segString());\n      }\n      // used by assert below\n      final DocumentsWriter oldWriter = docWriter;\n      synchronized(this) {\n        readerPool.dropAll(true);\n        docWriter = null;\n        deleter.close();\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n      assert oldWriter.perThreadPool.numDeactivatedThreadStates() == oldWriter.perThreadPool.getMaxThreadStates();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception while closing\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac","f241b963c5bcd6c2293a928059dd2d64988a6042"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"f241b963c5bcd6c2293a928059dd2d64988a6042":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac"],"77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac":["f241b963c5bcd6c2293a928059dd2d64988a6042","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}