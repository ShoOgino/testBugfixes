{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.size() == 1) {\n      TermQuery tq = new TermQuery(terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    } else\n      return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.size() == 1) {\n      TermQuery tq = new TermQuery(terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    } else\n      return super.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb5dc223475059e18daa29ecbc9ee827971f72c","date":1424359649,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.size() == 1) {\n      TermQuery tq = new TermQuery(terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions.get(0).intValue() != 0) {\n      // PhraseWeight requires that positions start at 0 so we need to rebase\n      // positions\n      final Term[] terms = getTerms();\n      final int[] positions = getPositions();\n      PhraseQuery rewritten = new PhraseQuery();\n      for (int i = 0; i < terms.length; ++i) {\n        rewritten.add(terms[i], positions[i] - positions[0]);\n      }\n      rewritten.setBoost(getBoost());\n      rewritten.setSlop(getSlop());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.size() == 1) {\n      TermQuery tq = new TermQuery(terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    } else\n      return super.rewrite(reader);\n  }\n\n","bugFix":["2a7a7b75bcd7adde36326458cb81e126ee014ce5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.length == 1) {\n      TermQuery tq = new TermQuery(terms[0]);\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      PhraseQuery rewritten = new PhraseQuery(slop, terms, newPositions);\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.size() == 1) {\n      TermQuery tq = new TermQuery(terms.get(0));\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions.get(0).intValue() != 0) {\n      // PhraseWeight requires that positions start at 0 so we need to rebase\n      // positions\n      final Term[] terms = getTerms();\n      final int[] positions = getPositions();\n      PhraseQuery rewritten = new PhraseQuery();\n      for (int i = 0; i < terms.length; ++i) {\n        rewritten.add(terms[i], positions[i] - positions[0]);\n      }\n      rewritten.setBoost(getBoost());\n      rewritten.setSlop(getSlop());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      MatchNoDocsQuery q = new MatchNoDocsQuery();\n      q.setBoost(getBoost());\n      return q;\n    } else if (terms.length == 1) {\n      TermQuery tq = new TermQuery(terms[0]);\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      PhraseQuery rewritten = new PhraseQuery(slop, terms, newPositions);\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (terms.length == 1) {\n      TermQuery tq = new TermQuery(terms[0]);\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      PhraseQuery rewritten = new PhraseQuery(slop, terms, newPositions);\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      MatchNoDocsQuery q = new MatchNoDocsQuery();\n      q.setBoost(getBoost());\n      return q;\n    } else if (terms.length == 1) {\n      TermQuery tq = new TermQuery(terms[0]);\n      tq.setBoost(getBoost());\n      return tq;\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      PhraseQuery rewritten = new PhraseQuery(slop, terms, newPositions);\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"860d9cc0c963b5c0db351fb0473b6894b1d96020","date":1448302628,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return   new MatchNoDocsQuery();\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return new MatchNoDocsQuery(\"empty PhraseQuery\");\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return   new MatchNoDocsQuery();\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return new MatchNoDocsQuery(\"empty PhraseQuery\");\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (terms.length == 0) {\n      return   new MatchNoDocsQuery();\n    } else if (terms.length == 1) {\n      return new TermQuery(terms[0]);\n    } else if (positions[0] != 0) {\n      int[] newPositions = new int[positions.length];\n      for (int i = 0; i < positions.length; ++i) {\n        newPositions[i] = positions[i] - positions[0];\n      }\n      return new PhraseQuery(slop, terms, newPositions);\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["860d9cc0c963b5c0db351fb0473b6894b1d96020","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4778b794a897685e2f6c62caa1ac04983d1e69f"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["e9e1499c5d26c936238506df90a3c02c76707722"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}