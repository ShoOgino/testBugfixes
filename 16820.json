{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestBpv(Directory directory, int bpv) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    for (int i = 0; i < 100; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5445f368ca115295b7969017bb7c8983bbec0a18","date":1417101894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    for (int i = 0; i < 100; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#doTestBpv(Directory,int).mjava","sourceNew":"  private void doTestBpv(Directory directory, int bpv, long offset) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      for (long j = 0; j < offset; ++j) {\n        output.writeByte((byte) random().nextInt());\n      }\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired, offset);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void doTestBpv(Directory directory, int bpv) throws Exception {\n    MyRandom random = new MyRandom(random().nextLong());\n    int numIters = TEST_NIGHTLY ? 100 : 10;\n    for (int i = 0; i < numIters; i++) {\n      long original[] = randomLongs(random, bpv);\n      int bitsRequired = bpv == 64 ? 64 : DirectWriter.bitsRequired(1L<<(bpv-1));\n      String name = \"bpv\" + bpv + \"_\" + i;\n      IndexOutput output = directory.createOutput(name, IOContext.DEFAULT);\n      DirectWriter writer = DirectWriter.getInstance(output, original.length, bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        writer.add(original[j]);\n      }\n      writer.finish();\n      output.close();\n      IndexInput input = directory.openInput(name, IOContext.DEFAULT);\n      NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsRequired);\n      for (int j = 0; j < original.length; j++) {\n        assertEquals(\"bpv=\" + bpv, original[j], reader.get(j));\n      }\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5445f368ca115295b7969017bb7c8983bbec0a18":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a870f9917149dc600c4ad4417d615c1795de5864":["5445f368ca115295b7969017bb7c8983bbec0a18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["5445f368ca115295b7969017bb7c8983bbec0a18"],"5445f368ca115295b7969017bb7c8983bbec0a18":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}