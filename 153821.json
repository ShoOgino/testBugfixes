{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      if (numDims == 1) {\n        int cmp = FutureArrays.compareUnsigned(lastPackedValue, 0, bytesPerDim, packedValue, 0, bytesPerDim);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D data case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      // for data dimension > 1, leaves are sorted by the dimension with the lowest cardinality to improve block compression\n      if (numDataDims == 1) {\n        int cmp = FutureArrays.compareUnsigned(lastPackedValue, 0, bytesPerDim, packedValue, 0, bytesPerDim);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      if (numDims == 1) {\n        int cmp = FutureArrays.compareUnsigned(lastPackedValue, 0, bytesPerDim, packedValue, 0, bytesPerDim);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D data case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      // for data dimension > 1, leaves are sorted by the dimension with the lowest cardinality to improve block compression\n      if (numDataDims == 1) {\n        int cmp = Arrays.compareUnsigned(lastPackedValue, 0, bytesPerDim, packedValue, 0, bytesPerDim);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      checkPackedValue(\"packed value\", packedValue, docID);\n      pointCountSeen++;\n      docsSeen.set(docID);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        // Compare to last cell:\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n\n        if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lastMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n        }\n      }\n\n      // In the 1D data case, PointValues must make a single in-order sweep through all values, and tie-break by\n      // increasing docID:\n      // for data dimension > 1, leaves are sorted by the dimension with the lowest cardinality to improve block compression\n      if (numDataDims == 1) {\n        int cmp = FutureArrays.compareUnsigned(lastPackedValue, 0, bytesPerDim, packedValue, 0, bytesPerDim);\n        if (cmp > 0) {\n          throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldName + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n        } else if (cmp == 0) {\n          if (docID < lastDocID) {\n            throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldName + \"\\\"\");\n          }\n        }\n        System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["41f60ea1802fda42d3c91d023406066d00ddb5f8","9856095f7afb5a607bf5e65077615ed91273508c"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}