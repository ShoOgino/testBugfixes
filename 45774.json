{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","sourceOld":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermsFilter a = termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = termsFilter(random().nextBoolean(), new Term(\"field1\", \"b\"), new Term(\"field1\", \"a\"));\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(termsFilter(true, new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"))));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"),  new Term(\"field1\", \"v\"))));\n  }\n\n","sourceOld":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","bugFix":["e141595402370bee958745de8b1c9de1fa182581"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermsFilter a = termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<>();\n    cachedFilters.add(a);\n    TermsFilter b = termsFilter(random().nextBoolean(), new Term(\"field1\", \"b\"), new Term(\"field1\", \"a\"));\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(termsFilter(true, new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"))));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"),  new Term(\"field1\", \"v\"))));\n  }\n\n","sourceOld":"  public void testCachability() throws Exception {\n    TermsFilter a = termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = termsFilter(random().nextBoolean(), new Term(\"field1\", \"b\"), new Term(\"field1\", \"a\"));\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(termsFilter(true, new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"))));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"),  new Term(\"field1\", \"v\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","sourceNew":null,"sourceOld":"  public void testCachability() throws Exception {\n    TermsFilter a = termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<>();\n    cachedFilters.add(a);\n    TermsFilter b = termsFilter(random().nextBoolean(), new Term(\"field1\", \"b\"), new Term(\"field1\", \"a\"));\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(termsFilter(true, new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"))));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termsFilter(random().nextBoolean(), new Term(\"field1\", \"a\"), new Term(\"field1\", \"a\"), new Term(\"field1\", \"b\"),  new Term(\"field1\", \"v\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}