{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToSortableBytes(BigInteger,int,byte[],int).mjava","commits":[{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToSortableBytes(BigInteger,int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,int,byte[],int).mjava","sourceNew":"  /** \n   * Encodes a BigInteger {@code value} such that unsigned byte order comparison\n   * is consistent with {@link BigInteger#compareTo(BigInteger)}. This also sign-extends\n   * the value to {@code bigIntSize} bytes if necessary: useful to create a fixed-width size.\n   * @see #sortableBytesToBigInt(byte[], int, int)\n   */\n  public static void bigIntToSortableBytes(BigInteger bigInt, int bigIntSize, byte[] result, int offset) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < bigIntSize) {\n      fullBigIntBytes = new byte[bigIntSize];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, bigIntSize-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, bigIntSize-bigIntBytes.length, (byte) 0xff);\n      }\n    } else if (bigIntBytes.length == bigIntSize) {\n      fullBigIntBytes = bigIntBytes;\n    } else {\n      throw new IllegalArgumentException(\"BigInteger: \" + bigInt + \" requires more than \" + bigIntSize + \" bytes storage\");\n    }\n    // Flip the sign bit so negative bigints sort before positive bigints:\n    fullBigIntBytes[0] ^= 0x80;\n\n    System.arraycopy(fullBigIntBytes, 0, result, offset, bigIntSize);\n\n    assert sortableBytesToBigInt(result, offset, bigIntSize).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + sortableBytesToBigInt(result, offset, bigIntSize);\n  }\n\n","sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, int bigIntSize, byte[] result, int offset) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < bigIntSize) {\n      fullBigIntBytes = new byte[bigIntSize];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, bigIntSize-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, bigIntSize-bigIntBytes.length, (byte) 0xff);\n      }\n    } else if (bigIntBytes.length == bigIntSize) {\n      fullBigIntBytes = bigIntBytes;\n    } else {\n      throw new IllegalArgumentException(\"BigInteger: \" + bigInt + \" requires more than \" + bigIntSize + \" bytes storage\");\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, offset, bigIntSize);\n\n    assert bytesToBigInt(result, offset, bigIntSize).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, offset, bigIntSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToSortableBytes(BigInteger,int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,int,byte[],int).mjava","sourceNew":"  /** \n   * Encodes a BigInteger {@code value} such that unsigned byte order comparison\n   * is consistent with {@link BigInteger#compareTo(BigInteger)}. This also sign-extends\n   * the value to {@code bigIntSize} bytes if necessary: useful to create a fixed-width size.\n   * @see #sortableBytesToBigInt(byte[], int, int)\n   */\n  public static void bigIntToSortableBytes(BigInteger bigInt, int bigIntSize, byte[] result, int offset) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < bigIntSize) {\n      fullBigIntBytes = new byte[bigIntSize];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, bigIntSize-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, bigIntSize-bigIntBytes.length, (byte) 0xff);\n      }\n    } else if (bigIntBytes.length == bigIntSize) {\n      fullBigIntBytes = bigIntBytes;\n    } else {\n      throw new IllegalArgumentException(\"BigInteger: \" + bigInt + \" requires more than \" + bigIntSize + \" bytes storage\");\n    }\n    // Flip the sign bit so negative bigints sort before positive bigints:\n    fullBigIntBytes[0] ^= 0x80;\n\n    System.arraycopy(fullBigIntBytes, 0, result, offset, bigIntSize);\n\n    assert sortableBytesToBigInt(result, offset, bigIntSize).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + sortableBytesToBigInt(result, offset, bigIntSize);\n  }\n\n","sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, int bigIntSize, byte[] result, int offset) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < bigIntSize) {\n      fullBigIntBytes = new byte[bigIntSize];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, bigIntSize-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, bigIntSize-bigIntBytes.length, (byte) 0xff);\n      }\n    } else if (bigIntBytes.length == bigIntSize) {\n      fullBigIntBytes = bigIntBytes;\n    } else {\n      throw new IllegalArgumentException(\"BigInteger: \" + bigInt + \" requires more than \" + bigIntSize + \" bytes storage\");\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, offset, bigIntSize);\n\n    assert bytesToBigInt(result, offset, bigIntSize).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, offset, bigIntSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}