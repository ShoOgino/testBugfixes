{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          String value = (String) o;\n          aRow.put(column, process(value, fmt));\n        }\n      } catch (ParseException e) {\n        LOG.log(Level.WARNING, \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          String value = (String) o;\n          aRow.put(column, process(value, fmt));\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          String value = (String) o;\n          aRow.put(column, process(value, fmt));\n        }\n      } catch (ParseException e) {\n        LOG.log(Level.WARNING, \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55e6797cb890240f85ee506bee0a78726c85dce3","date":1228984448,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          aRow.put(column, process(o.toString(), fmt));\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          String value = (String) o;\n          aRow.put(column, process(value, fmt));\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":["5da353056e9425493c58d6f70720ced176e0435c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da353056e9425493c58d6f70720ced176e0435c","date":1229279322,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null)  {\n            aRow.put(column, process(o.toString(), fmt));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          aRow.put(column, process(o.toString(), fmt));\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":["55e6797cb890240f85ee506bee0a78726c85dce3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edd2c40a0750a29d9863d4b849f0fbb0f58f8049","date":1238971810,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List<String> inputs = (List<String>) o;\n          List<Date> results = new ArrayList<Date>();\n          for (String input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null)  {\n            aRow.put(column, process(o.toString(), fmt));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn( \"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":["5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532","date":1265612273,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","edd2c40a0750a29d9863d4b849f0fbb0f58f8049"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DateFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> aRow, Context context) {\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      Locale locale = Locale.getDefault();\n      String customLocale = map.get(\"locale\");\n      if(customLocale != null){\n        locale = new Locale(customLocale);\n      }\n\n      String fmt = map.get(DATE_TIME_FMT);\n      if (fmt == null)\n        continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      try {\n        Object o = aRow.get(srcCol);\n        if (o instanceof List) {\n          List inputs = (List) o;\n          List<Date> results = new ArrayList<Date>();\n          for (Object input : inputs) {\n            results.add(process(input, fmt, locale));\n          }\n          aRow.put(column, results);\n        } else {\n          if (o != null) {\n            aRow.put(column, process(o, fmt, locale));\n          }\n        }\n      } catch (ParseException e) {\n        LOG.warn(\"Could not parse a Date field \", e);\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532":["edd2c40a0750a29d9863d4b849f0fbb0f58f8049"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5da353056e9425493c58d6f70720ced176e0435c":["55e6797cb890240f85ee506bee0a78726c85dce3"],"ad94625fb8d088209f46650c8097196fec67f00c":["5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532"],"edd2c40a0750a29d9863d4b849f0fbb0f58f8049":["5da353056e9425493c58d6f70720ced176e0435c"],"55e6797cb890240f85ee506bee0a78726c85dce3":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532":["ad94625fb8d088209f46650c8097196fec67f00c"],"5da353056e9425493c58d6f70720ced176e0435c":["edd2c40a0750a29d9863d4b849f0fbb0f58f8049"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"edd2c40a0750a29d9863d4b849f0fbb0f58f8049":["5fd5d4c0febc6b9a66ac7a3607d9b4e22348f532"],"55e6797cb890240f85ee506bee0a78726c85dce3":["5da353056e9425493c58d6f70720ced176e0435c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["55e6797cb890240f85ee506bee0a78726c85dce3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}