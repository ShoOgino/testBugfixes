{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","commits":[{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() throws InterruptedException, IOException {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() throws InterruptedException, IOException {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58","date":1538573878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0,new HashMap<>(), getLiveNodes(),\"/clusterstate.json\");\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, new HashMap<>(), getLiveNodes(), CLUSTER_STATE);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0,new HashMap<>(), getLiveNodes(),\"/clusterstate.json\");\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, new HashMap<>(), getLiveNodes(), CLUSTER_STATE);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, new HashMap<>(), getLiveNodes(), CLUSTER_STATE);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, new HashMap<>(), getLiveNodes(), CLUSTER_STATE);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["f5a27e78e3d29dee02bab19ded25336471e96882"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new Replica(name, (String) node, coll.toString(), shard.toString(), name, Replica.State.ACTIVE, type, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = (Map<String, Map<String, List<Replica>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(Map).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager cloudManagerWithData(Map m) {\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new Replica(name, (String) node, coll.toString(), shard.toString(), name, Replica.State.ACTIVE, type, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.createFromCollectionMap(0, new HashMap<>(), getLiveNodes());\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = (Map<String, Map<String, List<Replica>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["f5a27e78e3d29dee02bab19ded25336471e96882"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ae23947c41339ea2b352422bb762dfb4a17077":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["33ae23947c41339ea2b352422bb762dfb4a17077"],"f5a27e78e3d29dee02bab19ded25336471e96882":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["f5a27e78e3d29dee02bab19ded25336471e96882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"33ae23947c41339ea2b352422bb762dfb4a17077":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["33ae23947c41339ea2b352422bb762dfb4a17077"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}