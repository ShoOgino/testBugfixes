{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#newFrame().mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#newFrame().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#newFrame().mjava","sourceNew":"      Frame newFrame() {\n        if (level+1 == stack.length) {\n          final Frame[] temp = new Frame[ArrayUtil.oversize(level+2, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, temp, 0, stack.length);\n          for (int i = stack.length; i < temp.length; i++) {\n            temp[i] = new Frame();\n          }\n          stack = temp;\n        }\n        return stack[level+1];\n      }\n\n","sourceOld":"      Frame newFrame() {\n        if (level+1 == stack.length) {\n          final Frame[] temp = new Frame[ArrayUtil.oversize(level+2, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, temp, 0, stack.length);\n          for (int i = stack.length; i < temp.length; i++) {\n            temp[i] = new Frame();\n          }\n          stack = temp;\n        }\n        return stack[level+1];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader.IntersectTermsEnum#newFrame().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.IntersectTermsEnum#newFrame().mjava","sourceNew":"      Frame newFrame() {\n        if (level+1 == stack.length) {\n          final Frame[] temp = new Frame[ArrayUtil.oversize(level+2, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, temp, 0, stack.length);\n          for (int i = stack.length; i < temp.length; i++) {\n            temp[i] = new Frame();\n          }\n          stack = temp;\n        }\n        return stack[level+1];\n      }\n\n","sourceOld":"      Frame newFrame() {\n        if (level+1 == stack.length) {\n          final Frame[] temp = new Frame[ArrayUtil.oversize(level+2, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, temp, 0, stack.length);\n          for (int i = stack.length; i < temp.length; i++) {\n            temp[i] = new Frame();\n          }\n          stack = temp;\n        }\n        return stack[level+1];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}