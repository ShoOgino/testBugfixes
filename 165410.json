{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":["1224a4027481acce15495b03bce9b48b93b42722"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50805be75df24f05d29a4d2a496c7ec825cde9eb","date":1398078566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      assertEquals(0, dir.listAll().length);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.shutdown();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22989c36ff05c657df26dd3377b37c9ad35859bc","date":1424477375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == 0 || Arrays.equals(files, new String[] { IndexWriter.WRITE_LOCK_NAME }));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      dir.setEnableVirusScanner(false); // we check for specific list of files\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      expectThrows(RuntimeException.class, () -> {\n        w.close();\n      });\n\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      try {\n        w.close();\n        fail();\n      } catch (IOException ioe) {\n        fail(\"expected only RuntimeException\");\n      } catch (RuntimeException re) {\n        // Expected\n      }\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":["1224a4027481acce15495b03bce9b48b93b42722"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138741d0260b216d27359469d74d61f8d40b4b57","date":1512493522,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, true, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, false, FailOnlyInCommit.PREPARE_STAGE), // fail during sync metadata\n        new FailOnlyInCommit(true, true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, true, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit\n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      expectThrows(RuntimeException.class, () -> {\n        w.close();\n      });\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile\n          + \" failOnSyncMetadata=\" + failure.failOnSyncMetadata + \"\", failure.failOnCommit && (failure.failOnDeleteFile || failure.failOnSyncMetadata));\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      expectThrows(RuntimeException.class, () -> {\n        w.close();\n      });\n\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc","date":1512493768,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionsDuringCommit().mjava","sourceNew":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, true, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, false, FailOnlyInCommit.PREPARE_STAGE), // fail during sync metadata\n        new FailOnlyInCommit(true, true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, true, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit\n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      expectThrows(RuntimeException.class, () -> {\n        w.close();\n      });\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile\n          + \" failOnSyncMetadata=\" + failure.failOnSyncMetadata + \"\", failure.failOnCommit && (failure.failOnDeleteFile || failure.failOnSyncMetadata));\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testExceptionsDuringCommit() throws Throwable {\n    FailOnlyInCommit[] failures = new FailOnlyInCommit[] {\n        // LUCENE-1214\n        new FailOnlyInCommit(false, FailOnlyInCommit.PREPARE_STAGE), // fail during global field map is written\n        new FailOnlyInCommit(true, FailOnlyInCommit.PREPARE_STAGE), // fail after global field map is written\n        new FailOnlyInCommit(false, FailOnlyInCommit.FINISH_STAGE)  // fail while running finishCommit    \n    };\n    \n    for (FailOnlyInCommit failure : failures) {\n      MockDirectoryWrapper dir = newMockDirectory();\n      dir.setFailOnCreateOutput(false);\n      int fileCount = dir.listAll().length;\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"a field\", Field.Store.YES));\n      w.addDocument(doc);\n      dir.failOn(failure);\n      expectThrows(RuntimeException.class, () -> {\n        w.close();\n      });\n\n      assertTrue(\"failOnCommit=\" + failure.failOnCommit + \" failOnDeleteFile=\" + failure.failOnDeleteFile, failure.failOnCommit && failure.failOnDeleteFile);\n      w.rollback();\n      String files[] = dir.listAll();\n      assertTrue(files.length == fileCount || (files.length == fileCount+1 && Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME)));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc":["05fe562aa248790944d43cdd478f512572835ba0","138741d0260b216d27359469d74d61f8d40b4b57"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"138741d0260b216d27359469d74d61f8d40b4b57":["05fe562aa248790944d43cdd478f512572835ba0"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["22989c36ff05c657df26dd3377b37c9ad35859bc","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc"]},"commit2Childs":{"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc","138741d0260b216d27359469d74d61f8d40b4b57"],"138741d0260b216d27359469d74d61f8d40b4b57":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}