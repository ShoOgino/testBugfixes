{"path":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","commits":[{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d8e8c25cf14084ed34d963e13af2b71675d8614","cd96bb97a4b735ffb1031ca05c395f42471751ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da7373b6df772f51a66550c8080379e9ddf2e7db","date":1462690671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8e8c25cf14084ed34d963e13af2b71675d8614","date":1470779269,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":["536b47681314488eb94706248be6047a3f142841"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.getKey();\n      int chanceIn100 = pair.getValue();\n      if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {\n        if (RANDOM.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                Thread.sleep(RANDOM.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, RANDOM.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd96bb97a4b735ffb1031ca05c395f42471751ad","date":1579896262,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectNonGracefullClose(CoreContainer).mjava","sourceNew":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          final Timer timer = new Timer();\n          final Thread cthread = Thread.currentThread();\n\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(timer);\n            }\n          };\n\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectNonGracefullClose(CoreContainer cc) {\n    if (cc.isShutDown() && nonGracefullClose != null) {\n      Random rand = random();\n      if (null == rand) return true;\n      \n      Pair<Boolean,Integer> pair = parseValue(nonGracefullClose);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100)) {\n        if (rand.nextBoolean()) {\n          throw new TestShutdownFailError(\"Test exception for non graceful close\");\n        } else {\n          \n          final Thread cthread = Thread.currentThread();\n          TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n              // as long as places that catch interruptedexception reset that\n              // interrupted status,\n              // we should only need to do it once\n              \n              try {\n                // call random() again to get the correct one for this thread\n                Random taskRand = random();\n                Thread.sleep(taskRand.nextInt(1000));\n              } catch (InterruptedException e) {\n              \n              }\n              \n              cthread.interrupt();\n              timers.remove(this);\n              cancel();\n            }\n          };\n          Timer timer = new Timer();\n          timers.add(timer);\n          timer.schedule(task, rand.nextInt(500));\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":["536b47681314488eb94706248be6047a3f142841"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["da7373b6df772f51a66550c8080379e9ddf2e7db","7d8e8c25cf14084ed34d963e13af2b71675d8614"],"536b47681314488eb94706248be6047a3f142841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d8e8c25cf14084ed34d963e13af2b71675d8614":["da7373b6df772f51a66550c8080379e9ddf2e7db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["536b47681314488eb94706248be6047a3f142841","da7373b6df772f51a66550c8080379e9ddf2e7db"],"da7373b6df772f51a66550c8080379e9ddf2e7db":["536b47681314488eb94706248be6047a3f142841"],"cd96bb97a4b735ffb1031ca05c395f42471751ad":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["536b47681314488eb94706248be6047a3f142841","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["da7373b6df772f51a66550c8080379e9ddf2e7db","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd96bb97a4b735ffb1031ca05c395f42471751ad"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["cd96bb97a4b735ffb1031ca05c395f42471751ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"536b47681314488eb94706248be6047a3f142841":["e66a459d38c1c4a2f97128433dab546f683a9fed","da7373b6df772f51a66550c8080379e9ddf2e7db","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7d8e8c25cf14084ed34d963e13af2b71675d8614":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536b47681314488eb94706248be6047a3f142841"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"da7373b6df772f51a66550c8080379e9ddf2e7db":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","7d8e8c25cf14084ed34d963e13af2b71675d8614","e66a459d38c1c4a2f97128433dab546f683a9fed","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd96bb97a4b735ffb1031ca05c395f42471751ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}