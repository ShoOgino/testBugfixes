{"path":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","commits":[{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.US);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.US);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.US);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.US);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.US);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz);\n\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"/MILLIS\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz);\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":["b3c7501e15f71c01b69ba22749b192827fa2019b","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz);\n\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"/MILLIS\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz);\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz);\n\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"/MILLIS\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz);\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testParseMathTz().mjava","sourceNew":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz);\n\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"/MILLIS\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz);\n    setNow(p, \"2001-07-04T12:08:56.235\");\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","sourceOld":"  public void testParseMathTz() throws Exception {\n\n    final String PLUS_TZS = \"America/Los_Angeles\";\n    final String NEG_TZS = \"Europe/Paris\";\n    \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + PLUS_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(PLUS_TZS)); \n    assumeTrue(\"Test requires JVM to know about about TZ: \" + NEG_TZS,\n               TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(NEG_TZS)); \n\n    // US, Positive Offset with DST\n\n    TimeZone tz = TimeZone.getTimeZone(PLUS_TZS);\n    DateMathParser p = new DateMathParser(tz, Locale.ROOT);\n\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    // No-Op\n    assertMath(\"2001-07-04T12:08:56.235\", p, \"\");\n    \n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-04T07:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-07-01T07:00:00.000\", p, \"/MONTH\");\n    // no DST in jan\n    assertMath(\"2001-01-01T08:00:00.000\", p, \"/YEAR\");\n    // no DST in nov 2001\n    assertMath(\"2001-11-04T08:00:00.000\", p, \"+4MONTH/DAY\");\n    // yes DST in nov 2010\n    assertMath(\"2010-11-04T07:00:00.000\", p, \"+9YEAR+4MONTH/DAY\");\n\n    // France, Negative Offset with DST\n\n    tz = TimeZone.getTimeZone(NEG_TZS);\n    p = new DateMathParser(tz, Locale.ROOT);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n\n    assertMath(\"2001-07-04T12:08:56.000\", p, \"/SECOND\");\n    assertMath(\"2001-07-04T12:08:00.000\", p, \"/MINUTE\");\n    assertMath(\"2001-07-04T12:00:00.000\", p, \"/HOUR\");\n    assertMath(\"2001-07-03T22:00:00.000\", p, \"/DAY\");\n    assertMath(\"2001-06-30T22:00:00.000\", p, \"/MONTH\");\n    // no DST in dec\n    assertMath(\"2000-12-31T23:00:00.000\", p, \"/YEAR\");\n    // no DST in nov\n    assertMath(\"2001-11-03T23:00:00.000\", p, \"+4MONTH/DAY\");\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b3c7501e15f71c01b69ba22749b192827fa2019b","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"0ad30c6a479e764150a3316e57263319775f1df2":["2acf500f78aa12b92e371fd89c719291986b6b90","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b3c7501e15f71c01b69ba22749b192827fa2019b","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2acf500f78aa12b92e371fd89c719291986b6b90","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["2acf500f78aa12b92e371fd89c719291986b6b90","0ad30c6a479e764150a3316e57263319775f1df2"],"46d8ada1fff8d18cb197c38c7983225162599948":["b3c7501e15f71c01b69ba22749b192827fa2019b","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2acf500f78aa12b92e371fd89c719291986b6b90":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","fe33227f6805edab2036cbb80645cc4e2d1fa424","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","46d8ada1fff8d18cb197c38c7983225162599948"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}