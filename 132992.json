{"path":"lucene/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#start(State,State,UTF8Sequence,int,boolean).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#start(State,State,UTF8Sequence,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void start(State start, State end, UTF8Sequence utf8, int upto, boolean doAll) {\n    if (upto == utf8.len-1) {\n      // Done recursing\n      start.addTransition(new Transition(utf8.byteAt(upto), utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1], end));  // type=start\n    } else {\n      State n = newUTF8State();\n      start.addTransition(new Transition(utf8.byteAt(upto), n));  // type=start\n      start(n, end, utf8, 1+upto, true);\n      int endCode = utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1];\n      if (doAll && utf8.byteAt(upto) != endCode) {\n        all(start, end, utf8.byteAt(upto)+1, endCode, utf8.len-upto-1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#start(State,State,UTF8Sequence,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#start(State,State,UTF8Sequence,int,boolean).mjava","sourceNew":"  private void start(State start, State end, UTF8Sequence utf8, int upto, boolean doAll) {\n    if (upto == utf8.len-1) {\n      // Done recursing\n      start.addTransition(new Transition(utf8.byteAt(upto), utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1], end));  // type=start\n    } else {\n      State n = newUTF8State();\n      start.addTransition(new Transition(utf8.byteAt(upto), n));  // type=start\n      start(n, end, utf8, 1+upto, true);\n      int endCode = utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1];\n      if (doAll && utf8.byteAt(upto) != endCode) {\n        all(start, end, utf8.byteAt(upto)+1, endCode, utf8.len-upto-1);\n      }\n    }\n  }\n\n","sourceOld":"  private void start(State start, State end, UTF8Sequence utf8, int upto, boolean doAll) {\n    if (upto == utf8.len-1) {\n      // Done recursing\n      start.addTransition(new Transition(utf8.byteAt(upto), utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1], end));  // type=start\n    } else {\n      State n = newUTF8State();\n      start.addTransition(new Transition(utf8.byteAt(upto), n));  // type=start\n      start(n, end, utf8, 1+upto, true);\n      int endCode = utf8.byteAt(upto) | MASKS[utf8.numBits(upto)-1];\n      if (doAll && utf8.byteAt(upto) != endCode) {\n        all(start, end, utf8.byteAt(upto)+1, endCode, utf8.len-upto-1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}