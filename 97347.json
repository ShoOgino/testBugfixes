{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final LightAutomaton a = DaciukMihovAutomatonBuilderLight.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final LightAutomaton a = DaciukMihovAutomatonBuilderLight.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(int,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#build(String...).mjava","sourceNew":"  private CompiledAutomaton build(int maxDeterminizedStates, String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false, maxDeterminizedStates);\n  }\n\n","sourceOld":"  private CompiledAutomaton build(String... strings) {\n    final List<BytesRef> terms = new ArrayList<>();\n    for(String s : strings) {\n      terms.add(new BytesRef(s));\n    }\n    Collections.sort(terms);\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return new CompiledAutomaton(a, true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","8b316f82baae88f5e279893a9cb7eee51fd8902f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}