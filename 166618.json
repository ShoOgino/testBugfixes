{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","commits":[{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    assert Sorter.isConsistent(docMap, reader.maxDoc());\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","sourceNew":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    assert Sorter.isConsistent(docMap, reader.maxDoc());\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","sourceNew":"  /** Expert: same as {@link #wrap(AtomicReader, Sort)} but operates directly on a {@link Sorter.DocMap}. */\n  static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","sourceNew":"  /** Expert: same as {@link #wrap(AtomicReader, Sort)} but operates directly on a {@link Sorter.DocMap}. */\n  static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","sourceNew":"  /** Expert: same as {@link #wrap(AtomicReader, Sort)} but operates directly on a {@link Sorter.DocMap}. */\n  static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":"  /** Expert: same as {@link #wrap(AtomicReader, Sorter)} but operates directly on a {@link Sorter.DocMap}. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter.DocMap).mjava","sourceNew":null,"sourceOld":"  /** Expert: same as {@link #wrap(AtomicReader, Sort)} but operates directly on a {@link Sorter.DocMap}. */\n  static AtomicReader wrap(AtomicReader reader, Sorter.DocMap docMap) {\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    if (reader.maxDoc() != docMap.size()) {\n      throw new IllegalArgumentException(\"reader.maxDoc() should be equal to docMap.size(), got\" + reader.maxDoc() + \" != \" + docMap.size());\n    }\n    assert Sorter.isConsistent(docMap);\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["4d1c249f01722fe2de6d60de2f0aade417fbb638","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["4d1c249f01722fe2de6d60de2f0aade417fbb638","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}