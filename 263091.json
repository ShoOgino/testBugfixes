{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" + \n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n \n    SolrIndexSearcher.QueryCommand cmd = rb.getQueryCommand();\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(cmd.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(rb.getSortSpec().getOffset());\n    groupingSpec.setLimit(rb.getSortSpec().getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba39ba201a572fd944ed71d888de0cd4f2957af","date":1404307334,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher.QueryCommand cmd = rb.getQueryCommand();\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(cmd.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(rb.getSortSpec().getOffset());\n    groupingSpec.setLimit(rb.getSortSpec().getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" + \n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n \n    SolrIndexSearcher.QueryCommand cmd = rb.getQueryCommand();\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(cmd.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(rb.getSortSpec().getOffset());\n    groupingSpec.setLimit(rb.getSortSpec().getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4","date":1443729405,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher.QueryCommand cmd = rb.getQueryCommand();\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(cmd.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(rb.getSortSpec().getOffset());\n    groupingSpec.setLimit(rb.getSortSpec().getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(QueryParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  private void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe","date":1476579365,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String groupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = groupSortStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(groupSortStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20d97ebbd280405cebcc21d53c781bf4456453","date":1480454130,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec sortSpecWithinGroup;\n    if (sortWithinGroupStr != null) {\n      SortSpec parsedSortSpecWithinGroup = SortSpecParsing.parseSortSpec(sortWithinGroupStr, req);\n      sortSpecWithinGroup = searcher.weightSortSpec(parsedSortSpecWithinGroup, Sort.RELEVANCE);\n    } else {\n      sortSpecWithinGroup = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    sortSpecWithinGroup.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    sortSpecWithinGroup.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setSortSpecWithinGroup(sortSpecWithinGroup);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec sortSpecWithinGroup;\n    if (sortWithinGroupStr != null) {\n      SortSpec parsedSortSpecWithinGroup = SortSpecParsing.parseSortSpec(sortWithinGroupStr, req);\n      sortSpecWithinGroup = searcher.weightSortSpec(parsedSortSpecWithinGroup, Sort.RELEVANCE);\n    } else {\n      sortSpecWithinGroup = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    sortSpecWithinGroup.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    sortSpecWithinGroup.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setSortSpecWithinGroup(sortSpecWithinGroup);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec sortSpecWithinGroup;\n    if (sortWithinGroupStr != null) {\n      SortSpec parsedSortSpecWithinGroup = SortSpecParsing.parseSortSpec(sortWithinGroupStr, req);\n      sortSpecWithinGroup = searcher.weightSortSpec(parsedSortSpecWithinGroup, Sort.RELEVANCE);\n    } else {\n      sortSpecWithinGroup = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    sortSpecWithinGroup.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    sortSpecWithinGroup.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setSortSpecWithinGroup(sortSpecWithinGroup);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    Sort groupSort = searcher.weightSort(sortSpec.getSort());\n    if (groupSort == null) {\n      groupSort = Sort.RELEVANCE;\n    }\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort());\n    if (sortWithinGroup == null) {\n      sortWithinGroup = Sort.RELEVANCE;\n    }\n\n    groupingSpec.setSortWithinGroup(sortWithinGroup);\n    groupingSpec.setGroupSort(groupSort);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT, 1));\n    groupingSpec.setOffset(sortSpec.getOffset());\n    groupingSpec.setLimit(sortSpec.getCount());\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe5f7e6793410fbed586cbf4066125df4b7b31d4","date":1482508865,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec sortSpecWithinGroup;\n    if (sortWithinGroupStr != null) {\n      SortSpec parsedSortSpecWithinGroup = SortSpecParsing.parseSortSpec(sortWithinGroupStr, req);\n      sortSpecWithinGroup = searcher.weightSortSpec(parsedSortSpecWithinGroup, Sort.RELEVANCE);\n    } else {\n      sortSpecWithinGroup = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    sortSpecWithinGroup.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    sortSpecWithinGroup.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setSortSpecWithinGroup(sortSpecWithinGroup);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String sortWithinGroupStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec sortSpecWithinGroup;\n    if (sortWithinGroupStr != null) {\n      SortSpec parsedSortSpecWithinGroup = SortSpecParsing.parseSortSpec(sortWithinGroupStr, req);\n      sortSpecWithinGroup = searcher.weightSortSpec(parsedSortSpecWithinGroup, Sort.RELEVANCE);\n    } else {\n      sortSpecWithinGroup = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    sortSpecWithinGroup.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    sortSpecWithinGroup.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setSortSpecWithinGroup(sortSpecWithinGroup);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c53fe0e8696ada77cfd31c0171278dec7afdac16","date":1487961491,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    // groupSort defaults to sort\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd66051e8d8d59ae300cec8b60f56810394a7511","date":1559669226,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    // See SOLR-12249. Disallow grouping on text fields that are not SortableText in cloud mode\n    if (req.getCore().getCoreContainer().isZooKeeperAware()) {\n      IndexSchema schema = rb.req.getSchema();\n      String[] fields = params.getParams(GroupParams.GROUP_FIELD);\n      for (String field : fields) {\n        SchemaField schemaField = schema.getField(field);\n        if (schemaField.getType().isTokenized() && (schemaField.getType() instanceof SortableTextField) == false) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Sorting on a tokenized field that is not a SortableTextField is not supported in cloud mode.\"));\n        }\n      }\n    }\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":["7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1313c74c6d619d0d98d1284bc17513c9a4b40345","date":1562035273,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    // See SOLR-12249. Disallow grouping on text fields that are not SortableText in cloud mode\n    if (req.getCore().getCoreContainer().isZooKeeperAware()) {\n      IndexSchema schema = rb.req.getSchema();\n      String[] fields = params.getParams(GroupParams.GROUP_FIELD);\n      for (String field : fields) {\n        SchemaField schemaField = schema.getField(field);\n        if (schemaField.getType().isTokenized() && (schemaField.getType() instanceof SortableTextField) == false) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Sorting on a tokenized field that is not a SortableTextField is not supported in cloud mode.\"));\n        }\n      }\n    }\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n\n    // when group.format=grouped then, validate group.offset\n    // for group.main=true and group.format=simple, start value is used instead of group.offset\n    // and start is already validate above for negative values\n    if (!(groupingSpec.isMain() || groupingSpec.getResponseFormat() == Grouping.Format.simple) &&\n        groupingSpec.getWithinGroupSortSpec().getOffset() < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'group.offset' parameter cannot be negative\");\n    }\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    // See SOLR-12249. Disallow grouping on text fields that are not SortableText in cloud mode\n    if (req.getCore().getCoreContainer().isZooKeeperAware()) {\n      IndexSchema schema = rb.req.getSchema();\n      String[] fields = params.getParams(GroupParams.GROUP_FIELD);\n      for (String field : fields) {\n        SchemaField schemaField = schema.getField(field);\n        if (schemaField.getType().isTokenized() && (schemaField.getType() instanceof SortableTextField) == false) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Sorting on a tokenized field that is not a SortableTextField is not supported in cloud mode.\"));\n        }\n      }\n    }\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8","date":1562043474,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#prepareGrouping(ResponseBuilder).mjava","sourceNew":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    // See SOLR-12249. Disallow grouping on text fields that are not SortableText in cloud mode\n    if (req.getCore().getCoreContainer().isZooKeeperAware()) {\n      IndexSchema schema = rb.req.getSchema();\n      String[] fields = params.getParams(GroupParams.GROUP_FIELD);\n      if (fields != null) {\n        for (String field : fields) {\n          SchemaField schemaField = schema.getField(field);\n          if (schemaField.getType().isTokenized() && (schemaField.getType() instanceof SortableTextField) == false) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT,\n                \"Sorting on a tokenized field that is not a SortableTextField is not supported in cloud mode.\"));\n          }\n        }\n      }\n    }\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n\n    // when group.format=grouped then, validate group.offset\n    // for group.main=true and group.format=simple, start value is used instead of group.offset\n    // and start is already validate above for negative values\n    if (!(groupingSpec.isMain() || groupingSpec.getResponseFormat() == Grouping.Format.simple) &&\n        groupingSpec.getWithinGroupSortSpec().getOffset() < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'group.offset' parameter cannot be negative\");\n    }\n  }\n\n","sourceOld":"  protected void prepareGrouping(ResponseBuilder rb) throws IOException {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n\n    if (null != rb.getCursorMark()) {\n      // It's hard to imagine, conceptually, what it would mean to combine\n      // grouping with a cursor - so for now we just don't allow the combination at all\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not use Grouping with \" +\n                              CursorMarkParams.CURSOR_MARK_PARAM);\n    }\n\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n    GroupingSpecification groupingSpec = new GroupingSpecification();\n    rb.setGroupingSpec(groupingSpec);\n\n    final SortSpec sortSpec = rb.getSortSpec();\n\n    //TODO: move weighting of sort\n    final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n\n    String withinGroupSortStr = params.get(GroupParams.GROUP_SORT);\n    //TODO: move weighting of sort\n    final SortSpec withinGroupSortSpec;\n    if (withinGroupSortStr != null) {\n      SortSpec parsedWithinGroupSortSpec = SortSpecParsing.parseSortSpec(withinGroupSortStr, req);\n      withinGroupSortSpec = searcher.weightSortSpec(parsedWithinGroupSortSpec, Sort.RELEVANCE);\n    } else {\n      withinGroupSortSpec = new SortSpec(\n          groupSortSpec.getSort(),\n          groupSortSpec.getSchemaFields(),\n          groupSortSpec.getCount(),\n          groupSortSpec.getOffset());\n    }\n    withinGroupSortSpec.setOffset(params.getInt(GroupParams.GROUP_OFFSET, 0));\n    withinGroupSortSpec.setCount(params.getInt(GroupParams.GROUP_LIMIT, 1));\n\n    groupingSpec.setWithinGroupSortSpec(withinGroupSortSpec);\n    groupingSpec.setGroupSortSpec(groupSortSpec);\n\n    String formatStr = params.get(GroupParams.GROUP_FORMAT, Grouping.Format.grouped.name());\n    Grouping.Format responseFormat;\n    try {\n       responseFormat = Grouping.Format.valueOf(formatStr);\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Illegal %s parameter\", GroupParams.GROUP_FORMAT));\n    }\n    groupingSpec.setResponseFormat(responseFormat);\n\n    // See SOLR-12249. Disallow grouping on text fields that are not SortableText in cloud mode\n    if (req.getCore().getCoreContainer().isZooKeeperAware()) {\n      IndexSchema schema = rb.req.getSchema();\n      String[] fields = params.getParams(GroupParams.GROUP_FIELD);\n      for (String field : fields) {\n        SchemaField schemaField = schema.getField(field);\n        if (schemaField.getType().isTokenized() && (schemaField.getType() instanceof SortableTextField) == false) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, String.format(Locale.ROOT, \"Sorting on a tokenized field that is not a SortableTextField is not supported in cloud mode.\"));\n        }\n      }\n    }\n\n    groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));\n    groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));\n    groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));\n    groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT, false));\n    groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN, false));\n    groupingSpec.setNeedScore((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0);\n    groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE, false));\n\n    // when group.format=grouped then, validate group.offset\n    // for group.main=true and group.format=simple, start value is used instead of group.offset\n    // and start is already validate above for negative values\n    if (!(groupingSpec.isMain() || groupingSpec.getResponseFormat() == Grouping.Format.simple) &&\n        groupingSpec.getWithinGroupSortSpec().getOffset() < 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'group.offset' parameter cannot be negative\");\n    }\n  }\n\n","bugFix":["bd66051e8d8d59ae300cec8b60f56810394a7511"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1313c74c6d619d0d98d1284bc17513c9a4b40345":["bd66051e8d8d59ae300cec8b60f56810394a7511"],"7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["6c8dc56dbae186505066de8a78986cba31525ef0","35d59689803f4ad27f96148bb7c7167e373c6770"],"fe5f7e6793410fbed586cbf4066125df4b7b31d4":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"bd66051e8d8d59ae300cec8b60f56810394a7511":["c53fe0e8696ada77cfd31c0171278dec7afdac16"],"c53fe0e8696ada77cfd31c0171278dec7afdac16":["fe5f7e6793410fbed586cbf4066125df4b7b31d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["35d59689803f4ad27f96148bb7c7167e373c6770","ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9856095f7afb5a607bf5e65077615ed91273508c","fe5f7e6793410fbed586cbf4066125df4b7b31d4"],"6c8dc56dbae186505066de8a78986cba31525ef0":["e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe","3f20d97ebbd280405cebcc21d53c781bf4456453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["6c8dc56dbae186505066de8a78986cba31525ef0"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b101c3c0e7f5871415e80d970cb3289309f3522e"],"ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe":["35d59689803f4ad27f96148bb7c7167e373c6770"],"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4":["5ba39ba201a572fd944ed71d888de0cd4f2957af"],"5ba39ba201a572fd944ed71d888de0cd4f2957af":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8"]},"commit2Childs":{"1313c74c6d619d0d98d1284bc17513c9a4b40345":["7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8"],"7cd278447b1a7ccbbecdc2b5ac69eb10e9761cf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["5ba39ba201a572fd944ed71d888de0cd4f2957af"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"fe5f7e6793410fbed586cbf4066125df4b7b31d4":["c53fe0e8696ada77cfd31c0171278dec7afdac16","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bd66051e8d8d59ae300cec8b60f56810394a7511":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"c53fe0e8696ada77cfd31c0171278dec7afdac16":["bd66051e8d8d59ae300cec8b60f56810394a7511"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"6c8dc56dbae186505066de8a78986cba31525ef0":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["fe5f7e6793410fbed586cbf4066125df4b7b31d4","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe"],"9856095f7afb5a607bf5e65077615ed91273508c":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"ac55b9b9454fce6ef31ab382cb6fd7e0965dcafe":["3f20d97ebbd280405cebcc21d53c781bf4456453","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b101c3c0e7f5871415e80d970cb3289309f3522e"],"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4":["6c8dc56dbae186505066de8a78986cba31525ef0"],"5ba39ba201a572fd944ed71d888de0cd4f2957af":["e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}