{"path":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","commits":[{"id":"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2","date":1268080675,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"/dev/null","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testBoostOnlyRewrite().mjava","sourceNew":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  /** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */\n  public void testBoostOnlyRewrite() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucene\", writer);\n    addDoc(\"Lucenne\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    IndexReader reader = searcher.getIndexReader();\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"Lucene\"));\n    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // normally, 'Lucenne' would be the first result as IDF will skew the score.\n    assertEquals(\"Lucene\", reader.document(hits[0].doc).get(\"field\"));\n    assertEquals(\"Lucene\", reader.document(hits[1].doc).get(\"field\"));\n    assertEquals(\"Lucenne\", reader.document(hits[2].doc).get(\"field\"));\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["009c7f8376975ae03ac312fc80e8a7dff3a3dbe2"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["009c7f8376975ae03ac312fc80e8a7dff3a3dbe2"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}