{"path":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#matches(int,int,TwoPhaseDocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","commits":[{"id":"244d15187e7f59974b9c7cc38eb17236903bdc06","date":1424161968,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#matches(int,int,TwoPhaseDocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Confirm whether there is a match given the current positions of the\n   *  req and excl approximations. This method has 2 important properties:\n   *   - it only calls matches() on excl if the excl approximation is on\n   *     the same doc ID as the req approximation\n   *   - it does NOT call matches() on req if the excl approximation is exact\n   *     and is on the same doc ID as the req approximation */\n  private static boolean matches(int doc, int exclDoc,\n      TwoPhaseDocIdSetIterator reqTwoPhaseIterator,\n      TwoPhaseDocIdSetIterator exclTwoPhaseIterator) throws IOException {\n    assert exclDoc >= doc;\n    if (doc == exclDoc && matches(exclTwoPhaseIterator)) {\n      return false;\n    }\n    return matches(reqTwoPhaseIterator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#matches(int,int,TwoPhaseIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#matches(int,int,TwoPhaseDocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":"  /** Confirm whether there is a match given the current positions of the\n   *  req and excl approximations. This method has 2 important properties:\n   *   - it only calls matches() on excl if the excl approximation is on\n   *     the same doc ID as the req approximation\n   *   - it does NOT call matches() on req if the excl approximation is exact\n   *     and is on the same doc ID as the req approximation */\n  private static boolean matches(int doc, int exclDoc,\n      TwoPhaseIterator reqTwoPhaseIterator,\n      TwoPhaseIterator exclTwoPhaseIterator) throws IOException {\n    assert exclDoc >= doc;\n    if (doc == exclDoc && matches(exclTwoPhaseIterator)) {\n      return false;\n    }\n    return matches(reqTwoPhaseIterator);\n  }\n\n","sourceOld":"  /** Confirm whether there is a match given the current positions of the\n   *  req and excl approximations. This method has 2 important properties:\n   *   - it only calls matches() on excl if the excl approximation is on\n   *     the same doc ID as the req approximation\n   *   - it does NOT call matches() on req if the excl approximation is exact\n   *     and is on the same doc ID as the req approximation */\n  private static boolean matches(int doc, int exclDoc,\n      TwoPhaseDocIdSetIterator reqTwoPhaseIterator,\n      TwoPhaseDocIdSetIterator exclTwoPhaseIterator) throws IOException {\n    assert exclDoc >= doc;\n    if (doc == exclDoc && matches(exclTwoPhaseIterator)) {\n      return false;\n    }\n    return matches(reqTwoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#matches(int,int,TwoPhaseDocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /** Confirm whether there is a match given the current positions of the\n   *  req and excl approximations. This method has 2 important properties:\n   *   - it only calls matches() on excl if the excl approximation is on\n   *     the same doc ID as the req approximation\n   *   - it does NOT call matches() on req if the excl approximation is exact\n   *     and is on the same doc ID as the req approximation */\n  private static boolean matches(int doc, int exclDoc,\n      TwoPhaseDocIdSetIterator reqTwoPhaseIterator,\n      TwoPhaseDocIdSetIterator exclTwoPhaseIterator) throws IOException {\n    assert exclDoc >= doc;\n    if (doc == exclDoc && matches(exclTwoPhaseIterator)) {\n      return false;\n    }\n    return matches(reqTwoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"244d15187e7f59974b9c7cc38eb17236903bdc06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["244d15187e7f59974b9c7cc38eb17236903bdc06","a3d6eb0072094d94624002318ba2d4c840946833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d6eb0072094d94624002318ba2d4c840946833"]},"commit2Childs":{"244d15187e7f59974b9c7cc38eb17236903bdc06":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}