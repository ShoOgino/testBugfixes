{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toStringTree(StringBuilder,String).mjava","commits":[{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toStringTree(StringBuilder,String).mjava","pathOld":"/dev/null","sourceNew":"  void toStringTree(StringBuilder b, String indent) {\n    switch (kind) {\n      // binary\n      case REGEXP_UNION:\n      case REGEXP_CONCATENATION:\n      case REGEXP_INTERSECTION:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        exp2.toStringTree(b, indent + \"  \");\n        break;\n      // unary\n      case REGEXP_OPTIONAL:\n      case REGEXP_REPEAT:\n      case REGEXP_COMPLEMENT:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append(\" max=\");\n        b.append(max);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_CHAR:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" char=\");\n        b.appendCodePoint(c);\n        b.append('\\n');\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" from=\");\n        b.appendCodePoint(from);\n        b.append(\" to=\");\n        b.appendCodePoint(to);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYCHAR:\n      case REGEXP_EMPTY:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_STRING:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" string=\");\n        b.append(s);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_INTERVAL:\n        b.append(indent);\n        b.append(kind);\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        b.append('\\n');\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074f544130034fba3e820179fe98defcf2e5c165","date":1589447065,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toStringTree(StringBuilder,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toStringTree(StringBuilder,String).mjava","sourceNew":"  void toStringTree(StringBuilder b, String indent) {\n    switch (kind) {\n      // binary\n      case REGEXP_UNION:\n      case REGEXP_CONCATENATION:\n      case REGEXP_INTERSECTION:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        exp2.toStringTree(b, indent + \"  \");\n        break;\n      // unary\n      case REGEXP_OPTIONAL:\n      case REGEXP_REPEAT:\n      case REGEXP_COMPLEMENT:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append(\" max=\");\n        b.append(max);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_CHAR:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" char=\");\n        b.appendCodePoint(c);\n        b.append('\\n');\n        break;\n      case REGEXP_PRE_CLASS:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" class=\\\\\");\n        b.appendCodePoint(from);\n        b.append('\\n');\n        break;        \n      case REGEXP_CHAR_RANGE:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" from=\");\n        b.appendCodePoint(from);\n        b.append(\" to=\");\n        b.appendCodePoint(to);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYCHAR:\n      case REGEXP_EMPTY:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_STRING:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" string=\");\n        b.append(s);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_INTERVAL:\n        b.append(indent);\n        b.append(kind);\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        b.append('\\n');\n        break;\n    }\n  }\n\n","sourceOld":"  void toStringTree(StringBuilder b, String indent) {\n    switch (kind) {\n      // binary\n      case REGEXP_UNION:\n      case REGEXP_CONCATENATION:\n      case REGEXP_INTERSECTION:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        exp2.toStringTree(b, indent + \"  \");\n        break;\n      // unary\n      case REGEXP_OPTIONAL:\n      case REGEXP_REPEAT:\n      case REGEXP_COMPLEMENT:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" min=\");\n        b.append(min);\n        b.append(\" max=\");\n        b.append(max);\n        b.append('\\n');\n        exp1.toStringTree(b, indent + \"  \");\n        break;\n      case REGEXP_CHAR:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" char=\");\n        b.appendCodePoint(c);\n        b.append('\\n');\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" from=\");\n        b.appendCodePoint(from);\n        b.append(\" to=\");\n        b.appendCodePoint(to);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYCHAR:\n      case REGEXP_EMPTY:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_STRING:\n        b.append(indent);\n        b.append(kind);\n        b.append(\" string=\");\n        b.append(s);\n        b.append('\\n');\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(indent);\n        b.append(kind);\n        b.append('\\n');\n        break;\n      case REGEXP_INTERVAL:\n        b.append(indent);\n        b.append(kind);\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        b.append('\\n');\n        break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"074f544130034fba3e820179fe98defcf2e5c165":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["074f544130034fba3e820179fe98defcf2e5c165"]},"commit2Childs":{"074f544130034fba3e820179fe98defcf2e5c165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["074f544130034fba3e820179fe98defcf2e5c165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}