{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":null,"sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}