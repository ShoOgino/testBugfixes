{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","commits":[{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3e2d1ac454d3a72f3de14ffff4d77c41de1135f0","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of active shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","bugFix":null,"bugIntro":["3e2d1ac454d3a72f3de14ffff4d77c41de1135f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of active shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e2d1ac454d3a72f3de14ffff4d77c41de1135f0","date":1536617912,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      if (compareActiveReplicaCountsForShards(expectedReplicas, liveNodes, collectionState)) return false;\n      return true;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of active shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      for (Slice slice : collectionState) {\n        int activeReplicas = 0;\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            activeReplicas++;\n        }\n        if (activeReplicas != expectedReplicas)\n          return false;\n      }\n      return true;\n    };\n  }\n\n","bugFix":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","609b19bb8de96c4e5e338d1d4a0349957522b601"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      if (compareActiveReplicaCountsForShards(expectedReplicas, liveNodes, collectionState)) return true;\n      return false;\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      if (compareActiveReplicaCountsForShards(expectedReplicas, liveNodes, collectionState)) return false;\n      return true;\n    };\n  }\n\n","bugFix":["609b19bb8de96c4e5e338d1d4a0349957522b601","3e2d1ac454d3a72f3de14ffff4d77c41de1135f0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#clusterShape(int,int).mjava","sourceNew":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      return compareActiveReplicaCountsForShards(expectedReplicas, liveNodes, collectionState);\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link CollectionStatePredicate} that returns true if a collection has the expected\n   * number of shards and active replicas\n   */\n  public static CollectionStatePredicate clusterShape(int expectedShards, int expectedReplicas) {\n    return (liveNodes, collectionState) -> {\n      if (collectionState == null)\n        return false;\n      if (collectionState.getSlices().size() != expectedShards)\n        return false;\n      if (compareActiveReplicaCountsForShards(expectedReplicas, liveNodes, collectionState)) return true;\n      return false;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3e2d1ac454d3a72f3de14ffff4d77c41de1135f0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3e2d1ac454d3a72f3de14ffff4d77c41de1135f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1967bed916cc89da82a1c2085f27976da6d08cbd","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1edcb08221b33c52c3b24183d470c163dc8df4c"]},"commit2Childs":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e2d1ac454d3a72f3de14ffff4d77c41de1135f0":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3e2d1ac454d3a72f3de14ffff4d77c41de1135f0"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}