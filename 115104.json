{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","sourceNew":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","sourceOld":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","sourceNew":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","sourceOld":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#encodeSequence(byte[],int,int,int,int,DataOutput).mjava","sourceNew":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","sourceOld":"  private static void encodeSequence(byte[] bytes, int anchor, int matchRef, int matchOff, int matchLen, DataOutput out) throws IOException {\n    final int literalLen = matchOff - anchor;\n    assert matchLen >= 4;\n    // encode token\n    final int token = (Math.min(literalLen, 0x0F) << 4) | Math.min(matchLen - 4, 0x0F);\n    encodeLiterals(bytes, token, anchor, literalLen, out);\n\n    // encode match dec\n    final int matchDec = matchOff - matchRef;\n    assert matchDec > 0 && matchDec < 1 << 16;\n    out.writeByte((byte) matchDec);\n    out.writeByte((byte) (matchDec >>> 8));\n\n    // encode match len\n    if (matchLen >= MIN_MATCH + 0x0F) {\n      encodeLen(matchLen - 0x0F - MIN_MATCH, out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"9407318969e8504257b4c5764c65755a043e5404":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","9407318969e8504257b4c5764c65755a043e5404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}