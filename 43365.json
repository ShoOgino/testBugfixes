{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if (core == null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, SolrDispatchFilter.log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core,\n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch (Exception e) { // This error really does not matter\n         exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(response, code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e644f11c9d0dc0769d5dd5f842612a9dfa6ecde","date":1447990946,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, SolrDispatchFilter.log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if (core == null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, SolrDispatchFilter.log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, SolrDispatchFilter.log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d8b64a410e990e9a3314f1158fb525abf79353d","date":1452702247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        try {\n          if (exp != null) {\n            SimpleOrderedMap info = new SimpleOrderedMap();\n            int code = ResponseUtils.getErrorInfo(ex, info, log);\n            sendError(code, info.toString());\n          }\n        } finally {\n          if (core == null && localCore != null) {\n            localCore.close();\n          }\n        }\n      } finally {\n        consumeInput(req);\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f18f087a62b80d9021a57d3742eb56954fd581cf","2339937a3c827aac6c64360f31a9ef0aa19d3183"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18f087a62b80d9021a57d3742eb56954fd581cf","date":1452729486,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          try {\n            SimpleOrderedMap info = new SimpleOrderedMap();\n            int code = ResponseUtils.getErrorInfo(ex, info, log);\n            sendError(code, info.toString());\n          } finally {\n            consumeInput(req);\n          }\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        try {\n          if (exp != null) {\n            SimpleOrderedMap info = new SimpleOrderedMap();\n            int code = ResponseUtils.getErrorInfo(ex, info, log);\n            sendError(code, info.toString());\n          }\n        } finally {\n          if (core == null && localCore != null) {\n            localCore.close();\n          }\n        }\n      } finally {\n        consumeInput(req);\n      }\n    }\n  }\n\n","bugFix":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"bugIntro":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2339937a3c827aac6c64360f31a9ef0aa19d3183","date":1455656470,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          try {\n            SimpleOrderedMap info = new SimpleOrderedMap();\n            int code = ResponseUtils.getErrorInfo(ex, info, log);\n            sendError(code, info.toString());\n          } finally {\n            consumeInput(req);\n          }\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":["5d8b64a410e990e9a3314f1158fb525abf79353d","f18f087a62b80d9021a57d3742eb56954fd581cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","date":1497937593,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      localCore = core;\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = getResponseWriter();\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f18f087a62b80d9021a57d3742eb56954fd581cf":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["28288370235ed02234a64753cdbf0c6ec096304a"],"2339937a3c827aac6c64360f31a9ef0aa19d3183":["f18f087a62b80d9021a57d3742eb56954fd581cf"],"5d8b64a410e990e9a3314f1158fb525abf79353d":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["8e644f11c9d0dc0769d5dd5f842612a9dfa6ecde"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"28288370235ed02234a64753cdbf0c6ec096304a":["2339937a3c827aac6c64360f31a9ef0aa19d3183","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"8e644f11c9d0dc0769d5dd5f842612a9dfa6ecde":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2339937a3c827aac6c64360f31a9ef0aa19d3183","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"f18f087a62b80d9021a57d3742eb56954fd581cf":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"5d8b64a410e990e9a3314f1158fb525abf79353d":["f18f087a62b80d9021a57d3742eb56954fd581cf"],"2339937a3c827aac6c64360f31a9ef0aa19d3183":["2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["8e644f11c9d0dc0769d5dd5f842612a9dfa6ecde"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"8e644f11c9d0dc0769d5dd5f842612a9dfa6ecde":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}