{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory(random);\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory(random);\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":null,"sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":null,"sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneWriteToClone().mjava","sourceNew":null,"sourceOld":"  // open non-readOnly reader1, clone to non-readOnly\n  // reader2, make sure we can change reader2\n  public void testCloneWriteToClone() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = r1.clone(false);\n    if (!deleteWorked(1, r2)) {\n      fail(\"deleting from the original should have worked\");\n    }\n    // should fail because reader1 holds the write lock\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r2.close();\n    // should fail because we are now stale (reader1\n    // committed changes)\n    assertTrue(\"first reader should not be able to delete\", !deleteWorked(1, r1));\n    r1.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1f653cfcf159baeaafe5d01682a911e95bba4012","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1f653cfcf159baeaafe5d01682a911e95bba4012","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}