{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n        }\n        boolean firstVal = true;\n        for (Object val : sfield) {\n          if (firstVal) firstVal=false;\n          else out.append(',');\n          out.append(JSONUtil.toJSON(val));\n        }\n        if (sfield.getValueCount() > 1) {\n          out.append(']');\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n        }\n        boolean firstVal = true;\n        for (Object val : sfield) {\n          if (firstVal) firstVal=false;\n          else out.append(',');\n          out.append(JSONUtil.toJSON(val));\n        }\n        if (sfield.getValueCount() > 1) {\n          out.append(']');\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n        }\n        boolean firstVal = true;\n        for (Object val : sfield) {\n          if (firstVal) firstVal=false;\n          else out.append(',');\n          out.append(JSONUtil.toJSON(val));\n        }\n        if (sfield.getValueCount() > 1) {\n          out.append(']');\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n        }\n        boolean firstVal = true;\n        for (Object val : sfield) {\n          if (firstVal) firstVal=false;\n          else out.append(',');\n          out.append(JSONUtil.toJSON(val));\n        }\n        if (sfield.getValueCount() > 1) {\n          out.append(']');\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","sourceOld":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(SolrInputDocument).mjava","sourceNew":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts.\n   *  @see #json(SolrInputDocument,CharArr)\n   */\n  public static String json(SolrInputDocument doc) {\n    CharArr out = new CharArr();\n    json(doc, out);\n    return out.toString();\n  }\n\n","sourceOld":"  /** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */\n  public static String json(SolrInputDocument doc) {\n     CharArr out = new CharArr();\n    try {\n      out.append('{');\n      boolean firstField = true;\n      for (SolrInputField sfield : doc) {\n        if (firstField) firstField=false;\n        else out.append(',');\n        JSONUtil.writeString(sfield.getName(), 0, sfield.getName().length(), out);\n        out.append(':');\n\n        if (sfield.getValueCount() > 1) {\n          out.append('[');\n          boolean firstVal = true;\n          for (Object val : sfield) {\n            if (firstVal) firstVal=false;\n            else out.append(',');\n            out.append(JSONUtil.toJSON(val));\n          }\n          out.append(']');\n        } else {\n          out.append(JSONUtil.toJSON(sfield.getValue()));\n        }\n      }\n      out.append('}');\n    } catch (IOException e) {\n      // should never happen\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1bea3922196318026c4274f2013416acb60c691e","19275ba31e621f6da1b83bf13af75233876fd3d4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1bea3922196318026c4274f2013416acb60c691e"],"1bea3922196318026c4274f2013416acb60c691e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","1bea3922196318026c4274f2013416acb60c691e"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"1bea3922196318026c4274f2013416acb60c691e":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}