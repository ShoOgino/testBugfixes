{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"d3b03639f1b220125a390cee0e3ae4e79c78f371","date":1343105132,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/CachedDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/CachedDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/CachedDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/CachedDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28bce66b0b769a7827b1f4df30b3f50a2ed6c355","date":1347720564,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShapeFieldCache<Point> cache =\n      provider.getCache(readerContext.reader());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return Double.NaN; // ?? maybe max?\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db81fe5f1911f062c87abbb053871c166d57d849","date":1374686410,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {\n    return new FunctionValues() {\n      private final ShapeFieldCache<Point> cache =\n          provider.getCache(readerContext.reader());\n      private final Point from = ShapeFieldCacheDistanceValueSource.this.from;\n      private final DistanceCalculator calculator = ctx.getDistCalc();\n      private final double nullValue = (ctx.isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n\n        List<Point> vals = cache.getShapes( doc );\n        if( vals != null ) {\n          double v = calculator.distance(from, vals.get(0));\n          for( int i=1; i<vals.size(); i++ ) {\n            v = Math.min(v, calculator.distance(from, vals.get(i)));\n          }\n          return v * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3b03639f1b220125a390cee0e3ae4e79c78f371"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3b03639f1b220125a390cee0e3ae4e79c78f371"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3b03639f1b220125a390cee0e3ae4e79c78f371"],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["d3b03639f1b220125a390cee0e3ae4e79c78f371"],"db81fe5f1911f062c87abbb053871c166d57d849":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["db81fe5f1911f062c87abbb053871c166d57d849"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d3b03639f1b220125a390cee0e3ae4e79c78f371":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","d3b03639f1b220125a390cee0e3ae4e79c78f371"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db81fe5f1911f062c87abbb053871c166d57d849"],"db81fe5f1911f062c87abbb053871c166d57d849":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3b03639f1b220125a390cee0e3ae4e79c78f371":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}