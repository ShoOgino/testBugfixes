{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","commits":[{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3edf6a83020ecefb8f7e7227b6d641d51bf3ebe1","date":1334146995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // nocommit/hack: MockGraph has assertions that will trip if it follows\n          // an offsets violator. so we cant use it after e.g. wikipediatokenizer\n          if (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class) && !spec.offsetsAreCorrect) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6342a2eae2d265392c3f41e5b48f8b37523390","date":1334149690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // nocommit/hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // nocommit/hack: MockGraph has assertions that will trip if it follows\n          // an offsets violator. so we cant use it after e.g. wikipediatokenizer\n          if (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class) && !spec.offsetsAreCorrect) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c","date":1334160067,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // nocommit/hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"/dev/null","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["5f6342a2eae2d265392c3f41e5b48f8b37523390"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6342a2eae2d265392c3f41e5b48f8b37523390":["3edf6a83020ecefb8f7e7227b6d641d51bf3ebe1"],"3edf6a83020ecefb8f7e7227b6d641d51bf3ebe1":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["3edf6a83020ecefb8f7e7227b6d641d51bf3ebe1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"5f6342a2eae2d265392c3f41e5b48f8b37523390":["fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"3edf6a83020ecefb8f7e7227b6d641d51bf3ebe1":["5f6342a2eae2d265392c3f41e5b48f8b37523390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}