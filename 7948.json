{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#countFSTArcs(String).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#countFSTArcs(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","sourceNew":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx() == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#countFSTArcs(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#countFSTArcs(String).mjava","sourceNew":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#countFSTArcs(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#countFSTArcs(String).mjava","sourceNew":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}