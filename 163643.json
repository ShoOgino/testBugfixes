{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","commits":[{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, true);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","sourceNew":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, ScoreMode.COMPLETE);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","sourceOld":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, true);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","sourceNew":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, ScoreMode.COMPLETE);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","sourceOld":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, true);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","sourceNew":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createWeight(q, ScoreMode.COMPLETE, 1);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","sourceOld":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, ScoreMode.COMPLETE);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestIndexReaderFunctions#assertCacheable(LongValuesSource,boolean).mjava","sourceNew":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createWeight(q, ScoreMode.COMPLETE, 1);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","sourceOld":"  void assertCacheable(LongValuesSource vs, boolean expected) throws Exception {\n    Query q = new FunctionScoreQuery(new MatchAllDocsQuery(), vs.toDoubleValuesSource());\n    Weight w = searcher.createNormalizedWeight(q, ScoreMode.COMPLETE);\n    LeafReaderContext ctx = reader.leaves().get(0);\n    assertEquals(expected, w.isCacheable(ctx));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a38488a55cc52553c9792da5044dd31b15128cd8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a38488a55cc52553c9792da5044dd31b15128cd8"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a38488a55cc52553c9792da5044dd31b15128cd8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}