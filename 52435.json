{"path":"src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}