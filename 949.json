{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrClient client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrClient(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrClient(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrServer client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrServer(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrServer(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = new CloudSolrClient(hosts, clientChroot)) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrClient client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrClient(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrClient(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = (new CloudSolrClient.Builder()).withZkHost(hosts).withZkChroot(clientChroot).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = new CloudSolrClient(hosts, clientChroot)) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = (new CloudSolrClient.Builder()).withZkHost(hosts).withZkChroot(clientChroot).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = new CloudSolrClient(hosts, clientChroot)) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = (new CloudSolrClient.Builder()).withZkHost(hosts).withZkChroot(clientChroot).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = new CloudSolrClient(hosts, clientChroot)) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringSetterWithValidChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testZkConnectionStringSetterWithValidChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = (new CloudSolrClient.Builder()).withZkHost(hosts).withZkChroot(clientChroot).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() throws IOException {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    String clientChroot = null;\n    if (withChroot) {\n      sb.append(chroot);\n      clientChroot = \"/mychroot\";\n    }\n\n    try (CloudSolrClient client = (new CloudSolrClient.Builder()).withZkHost(hosts).withZkChroot(clientChroot).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["cc3b13b430571c2e169f98fe38e1e7666f88522d","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cc3b13b430571c2e169f98fe38e1e7666f88522d","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}