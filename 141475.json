{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(HttpResponse).mjava","commits":[{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(HttpResponse).mjava","pathOld":"/dev/null","sourceNew":"    private int getRfFromResponse(HttpResponse resp) {\n      if (resp != null) {\n\n        InputStream inputStream = null;\n\n        try {\n          inputStream = resp.getEntity().getContent();\n          BinaryResponseParser brp = new BinaryResponseParser();\n          NamedList<Object> nl = brp.processResponse(inputStream, null);\n          Object hdr = nl.get(\"responseHeader\");\n          if (hdr != null && hdr instanceof NamedList) {\n            NamedList<Object> hdrList = (NamedList<Object>) hdr;\n            Object rfObj = hdrList.get(UpdateRequest.REPFACT);\n            if (rfObj != null && rfObj instanceof Integer) {\n              return (Integer) rfObj;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to parse response from \" + node + \" during replication factor accounting due to: \" + e);\n        } finally {\n          if (inputStream != null) {\n            try {\n              inputStream.close();\n            } catch (Exception ignore) {\n            }\n          }\n        }\n      }\n      return Integer.MAX_VALUE;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(HttpResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(HttpResponse).mjava","sourceNew":"    private int getRfFromResponse(HttpResponse resp) {\n      if (resp != null) {\n\n        InputStream inputStream = null;\n\n        try {\n          inputStream = resp.getEntity().getContent();\n          BinaryResponseParser brp = new BinaryResponseParser();\n          NamedList<Object> nl = brp.processResponse(inputStream, null);\n          Object hdr = nl.get(\"responseHeader\");\n          if (hdr != null && hdr instanceof NamedList) {\n            NamedList<Object> hdrList = (NamedList<Object>) hdr;\n            Object rfObj = hdrList.get(UpdateRequest.REPFACT);\n            if (rfObj != null && rfObj instanceof Integer) {\n              return (Integer) rfObj;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to parse response from {} during replication factor accounting\", node, e);\n        } finally {\n          if (inputStream != null) {\n            try {\n              inputStream.close();\n            } catch (Exception ignore) {\n            }\n          }\n        }\n      }\n      return Integer.MAX_VALUE;\n    }\n\n","sourceOld":"    private int getRfFromResponse(HttpResponse resp) {\n      if (resp != null) {\n\n        InputStream inputStream = null;\n\n        try {\n          inputStream = resp.getEntity().getContent();\n          BinaryResponseParser brp = new BinaryResponseParser();\n          NamedList<Object> nl = brp.processResponse(inputStream, null);\n          Object hdr = nl.get(\"responseHeader\");\n          if (hdr != null && hdr instanceof NamedList) {\n            NamedList<Object> hdrList = (NamedList<Object>) hdr;\n            Object rfObj = hdrList.get(UpdateRequest.REPFACT);\n            if (rfObj != null && rfObj instanceof Integer) {\n              return (Integer) rfObj;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to parse response from \" + node + \" during replication factor accounting due to: \" + e);\n        } finally {\n          if (inputStream != null) {\n            try {\n              inputStream.close();\n            } catch (Exception ignore) {\n            }\n          }\n        }\n      }\n      return Integer.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.Req#getRfFromResponse(HttpResponse).mjava","sourceNew":"    private int getRfFromResponse(InputStream inputStream) {\n      if (inputStream != null) {\n        try {\n          BinaryResponseParser brp = new BinaryResponseParser();\n          NamedList<Object> nl = brp.processResponse(inputStream, null);\n          Object hdr = nl.get(\"responseHeader\");\n          if (hdr != null && hdr instanceof NamedList) {\n            NamedList<Object> hdrList = (NamedList<Object>) hdr;\n            Object rfObj = hdrList.get(UpdateRequest.REPFACT);\n            if (rfObj != null && rfObj instanceof Integer) {\n              return (Integer) rfObj;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to parse response from {} during replication factor accounting\", node, e);\n        } finally {\n          try {\n            inputStream.close();\n          } catch (Exception ignore) {\n          }\n        }\n      }\n      return Integer.MAX_VALUE;\n    }\n\n","sourceOld":"    private int getRfFromResponse(HttpResponse resp) {\n      if (resp != null) {\n\n        InputStream inputStream = null;\n\n        try {\n          inputStream = resp.getEntity().getContent();\n          BinaryResponseParser brp = new BinaryResponseParser();\n          NamedList<Object> nl = brp.processResponse(inputStream, null);\n          Object hdr = nl.get(\"responseHeader\");\n          if (hdr != null && hdr instanceof NamedList) {\n            NamedList<Object> hdrList = (NamedList<Object>) hdr;\n            Object rfObj = hdrList.get(UpdateRequest.REPFACT);\n            if (rfObj != null && rfObj instanceof Integer) {\n              return (Integer) rfObj;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Failed to parse response from {} during replication factor accounting\", node, e);\n        } finally {\n          if (inputStream != null) {\n            try {\n              inputStream.close();\n            } catch (Exception ignore) {\n            }\n          }\n        }\n      }\n      return Integer.MAX_VALUE;\n    }\n\n","bugFix":null,"bugIntro":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["43f5f8344e80b4bfb2069917069430266753d2f0"],"43f5f8344e80b4bfb2069917069430266753d2f0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43f5f8344e80b4bfb2069917069430266753d2f0":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["43f5f8344e80b4bfb2069917069430266753d2f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}