{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testContainsDateLine().mjava","commits":[{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testContainsDateLine().mjava","pathOld":"/dev/null","sourceNew":"  public void testContainsDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {178d, 180d, 180d, 178d, 178d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {-180d, -178d, -178d, -180d, -180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {179d, 180d, 180d, 179d, 179d}),\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {-180d, -179d, -179d, -180d, -180d})\n    };\n    Query q;\n    // Not supported due to encoding\n    //Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    //assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -1, 1, 179, -179);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testContainsDateLine().mjava","pathOld":"/dev/null","sourceNew":"  public void testContainsDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {178d, 180d, 180d, 178d, 178d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {-180d, -178d, -178d, -180d, -180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {179d, 180d, 180d, 179d, 179d}),\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {-180d, -179d, -179d, -180d, -180d})\n    };\n    Query q;\n    // Not supported due to encoding\n    //Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    //assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -1, 1, 179, -179);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testContainsDateLine().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testContainsDateLine().mjava","sourceNew":"  public void testContainsDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {178d, 180d, 180d, 178d, 178d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {-180d, -178d, -178d, -180d, -180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {179d, 180d, 180d, 179d, 179d}),\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {-180d, -179d, -179d, -180d, -180d})\n    };\n    Query q;\n    // Not supported due to encoding\n    //Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    //assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -1, 1, 179, -179);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testContainsDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {178d, 180d, 180d, 178d, 178d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {-2d, -2d, 2d, 2d, -2d},\n        new double[] {-180d, -178d, -178d, -180d, -180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {179d, 180d, 180d, 179d, 179d}),\n        new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n            new double[] {-180d, -179d, -179d, -180d, -180d})\n    };\n    Query q;\n    // Not supported due to encoding\n    //Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    //assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -1, 1, 179, -179);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -1, 1, 179, -179);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}