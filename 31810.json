{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#get(Filter,LeafReaderContext).mjava","sourceNew":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    key = QueryCache.cacheKey(key);\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  synchronized DocIdSet get(Filter filter, LeafReaderContext context) {\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, filter);\n      return null;\n    }\n    // this get call moves the filter to the most-recently-used position\n    final Filter singleton = uniqueFilters.get(filter);\n    if (singleton == null) {\n      onMiss(readerKey, filter);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    key = QueryCache.cacheKey(key);\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","sourceNew":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    key = QueryCache.cacheKey(key);\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa","date":1461326984,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","sourceNew":"  DocIdSet get(Query key, LeafReaderContext context) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","sourceNew":"  DocIdSet get(Query key, LeafReaderContext context) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  synchronized DocIdSet get(Query key, LeafReaderContext context) {\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","sourceNew":"  DocIdSet get(Query key, LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, LeafReaderContext context) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["2dfdf766e55e943d942055d7de53c7ad6bc45283","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d211216c83f01894810543d1c107160a9ae3650b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}