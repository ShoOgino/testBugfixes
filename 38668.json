{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","commits":[{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"/dev/null","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().getSegmentInfoWriter().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().getSegmentInfoReader().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().getSegmentInfoWriter().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().getSegmentInfoReader().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"/dev/null","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, StringHelper.randomId());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    try {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n      fail(\"diagnostics map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    try {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n      fail(\"diagnostics map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    try {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n      fail(\"diagnostics map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n    try {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n      fail(\"diagnostics map should be immutable\");\n    } catch (UnsupportedOperationException expected) {\n      // ok\n    }\n    dir.close();\n  }\n\n","bugFix":["79700663e164dece87bed4adfd3e28bab6cb1385"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>());\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testDiagnostics().mjava","sourceNew":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, Collections.emptyMap(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test diagnostics map */\n  public void testDiagnostics() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    byte id[] = StringHelper.randomId();\n    Map<String,String> diagnostics = new HashMap<>();\n    diagnostics.put(\"key1\", \"value1\");\n    diagnostics.put(\"key2\", \"value2\");\n    SegmentInfo info = new SegmentInfo(dir, getVersions()[0], getVersions()[0], \"_123\", 1, false, codec, \n                                       diagnostics, id, new HashMap<>(), null);\n    info.setFiles(Collections.<String>emptySet());\n    codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n    SegmentInfo info2 = codec.segmentInfoFormat().read(dir, \"_123\", id, IOContext.DEFAULT);\n    assertEquals(diagnostics, info2.getDiagnostics());\n\n    // diagnostics map should be immutable\n    expectThrows(UnsupportedOperationException.class, () -> {\n      info2.getDiagnostics().put(\"bogus\", \"bogus\");\n    });\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"05fe562aa248790944d43cdd478f512572835ba0":["79700663e164dece87bed4adfd3e28bab6cb1385"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["55980207f1977bd1463465de1659b821347e2fa8"],"0ad30c6a479e764150a3316e57263319775f1df2":["05fe562aa248790944d43cdd478f512572835ba0","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["05fe562aa248790944d43cdd478f512572835ba0","0ad30c6a479e764150a3316e57263319775f1df2"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["05fe562aa248790944d43cdd478f512572835ba0"],"68ba24d6f9380e2463dbe5130d27502647f64904":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["05fe562aa248790944d43cdd478f512572835ba0","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"299a2348fa24151d150182211b6208a38e5e3450":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68ba24d6f9380e2463dbe5130d27502647f64904"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"55980207f1977bd1463465de1659b821347e2fa8":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"05fe562aa248790944d43cdd478f512572835ba0":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["68ba24d6f9380e2463dbe5130d27502647f64904"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"68ba24d6f9380e2463dbe5130d27502647f64904":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"79700663e164dece87bed4adfd3e28bab6cb1385":["05fe562aa248790944d43cdd478f512572835ba0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"299a2348fa24151d150182211b6208a38e5e3450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","92212fd254551a0b1156aafc3a1a6ed1a43932ad","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}