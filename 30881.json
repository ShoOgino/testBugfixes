{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","commits":[{"id":"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64","date":1201200417,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDisableCounting(boolean disable) throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = disableCountingLines(disable);\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test counters\n    int n = disable ? 0 : 1;\n    int nChecked = 0;\n    for (Iterator ts = benchmark.getRunData().getPoints().taskStats().iterator(); ts.hasNext();) {\n      TaskStats stats = (TaskStats) ts.next();\n      String taskName = stats.getTask().getName();\n      if (taskName.equals(\"Rounds\")) {\n        assertEquals(\"Wrong total count!\",20+2*n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CreateIndex\")) {\n        assertEquals(\"Wrong count for CreateIndex!\",n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CloseIndex\")) {\n        assertEquals(\"Wrong count for CloseIndex!\",n,stats.getCount());\n        nChecked++;\n      }\n    }\n    assertEquals(\"Missing some tasks to check!\",3,nChecked);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","sourceNew":"  private void doTestDisableCounting(boolean disable) throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = disableCountingLines(disable);\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test counters\n    int n = disable ? 0 : 1;\n    int nChecked = 0;\n    for (final TaskStats stats : benchmark.getRunData().getPoints().taskStats()) {\n      String taskName = stats.getTask().getName();\n      if (taskName.equals(\"Rounds\")) {\n        assertEquals(\"Wrong total count!\",20+2*n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CreateIndex\")) {\n        assertEquals(\"Wrong count for CreateIndex!\",n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CloseIndex\")) {\n        assertEquals(\"Wrong count for CloseIndex!\",n,stats.getCount());\n        nChecked++;\n      }\n    }\n    assertEquals(\"Missing some tasks to check!\",3,nChecked);\n  }\n\n","sourceOld":"  private void doTestDisableCounting(boolean disable) throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = disableCountingLines(disable);\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test counters\n    int n = disable ? 0 : 1;\n    int nChecked = 0;\n    for (Iterator ts = benchmark.getRunData().getPoints().taskStats().iterator(); ts.hasNext();) {\n      TaskStats stats = (TaskStats) ts.next();\n      String taskName = stats.getTask().getName();\n      if (taskName.equals(\"Rounds\")) {\n        assertEquals(\"Wrong total count!\",20+2*n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CreateIndex\")) {\n        assertEquals(\"Wrong count for CreateIndex!\",n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CloseIndex\")) {\n        assertEquals(\"Wrong count for CloseIndex!\",n,stats.getCount());\n        nChecked++;\n      }\n    }\n    assertEquals(\"Missing some tasks to check!\",3,nChecked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#doTestDisableCounting(boolean).mjava","sourceNew":"  private void doTestDisableCounting(boolean disable) throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = disableCountingLines(disable);\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test counters\n    int n = disable ? 0 : 1;\n    int nChecked = 0;\n    for (final TaskStats stats : benchmark.getRunData().getPoints().taskStats()) {\n      String taskName = stats.getTask().getName();\n      if (taskName.equals(\"Rounds\")) {\n        assertEquals(\"Wrong total count!\",20+2*n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CreateIndex\")) {\n        assertEquals(\"Wrong count for CreateIndex!\",n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CloseIndex\")) {\n        assertEquals(\"Wrong count for CloseIndex!\",n,stats.getCount());\n        nChecked++;\n      }\n    }\n    assertEquals(\"Missing some tasks to check!\",3,nChecked);\n  }\n\n","sourceOld":"  private void doTestDisableCounting(boolean disable) throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = disableCountingLines(disable);\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test counters\n    int n = disable ? 0 : 1;\n    int nChecked = 0;\n    for (final TaskStats stats : benchmark.getRunData().getPoints().taskStats()) {\n      String taskName = stats.getTask().getName();\n      if (taskName.equals(\"Rounds\")) {\n        assertEquals(\"Wrong total count!\",20+2*n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CreateIndex\")) {\n        assertEquals(\"Wrong count for CreateIndex!\",n,stats.getCount());\n        nChecked++;\n      } else if (taskName.equals(\"CloseIndex\")) {\n        assertEquals(\"Wrong count for CloseIndex!\",n,stats.getCount());\n        nChecked++;\n      }\n    }\n    assertEquals(\"Missing some tasks to check!\",3,nChecked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}