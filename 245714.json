{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","commits":[{"id":"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","date":1358964301,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.docValues(\"not-in-index\"));\n    assertNull(reader.normValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.docValues(\"not-in-index\"));\n    assertNull(reader.normValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","b2d5244a676b83c2d551c3746e8181588ba619e1"],"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123":["d4d69c535930b5cce125cff868d40f6373dc27d4","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","b2d5244a676b83c2d551c3746e8181588ba619e1"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}