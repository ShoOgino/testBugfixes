{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","commits":[{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n      \n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* TODO (close to no commit) -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n      \n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* TODO (close to no commit) -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState(false);\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* TODO (close to no commit) -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,PerDocFieldValues,FieldInfo).mjava","sourceNew":null,"sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, PerDocFieldValues values, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(values.type());\n\n      if(fieldsConsumer == null) {\n        /* TODO (close to no commit) -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState(false);\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d619839baa8ce5503e496b94a9e42ad6f079293f":["85130289d2ed101fcc2d8798511c7c5b020ffab4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d619839baa8ce5503e496b94a9e42ad6f079293f","135621f3a0670a9394eb563224a3b76cc4dddc0f","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}