{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getWildcardQuery(String,String).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}