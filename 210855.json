{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata\n      ite.fr.parent.postingsReader.decodeTerm(bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata\n      ite.fr.parent.postingsReader.decodeTerm(bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata\n      ite.fr.parent.postingsReader.decodeTerm(bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata \n      for (int i = 0; i < ite.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ite.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a356e37aed258bcd168680472f8d1dbc6f396935","date":1580233110,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      if (version >= BlockTreeTermsReader.VERSION_COMPRESSED_SUFFIXES) {\n        if (statsSingletonRunLength > 0) {\n          termState.docFreq = 1;\n          termState.totalTermFreq = 1;\n          statsSingletonRunLength--;\n        } else {\n          int token = statsReader.readVInt();\n          if (version >= BlockTreeTermsReader.VERSION_COMPRESSED_SUFFIXES && (token & 1) == 1) {\n            termState.docFreq = 1;\n            termState.totalTermFreq = 1;\n            statsSingletonRunLength = token >>> 1;\n          } else {\n            termState.docFreq = token >>> 1;\n            if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n              termState.totalTermFreq = termState.docFreq;\n            } else {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            }\n          }\n        }\n      } else {\n        termState.docFreq = statsReader.readVInt();\n        //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n        if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n          termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n        } else {\n          termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n          //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n        }\n      }\n      // metadata\n      ite.fr.parent.postingsReader.decodeTerm(bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      termState.docFreq = statsReader.readVInt();\n      if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        termState.totalTermFreq = termState.docFreq; // all postings have freq=1\n      } else {\n        termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n      }\n      // metadata\n      ite.fr.parent.postingsReader.decodeTerm(bytesReader, ite.fr.fieldInfo, termState, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    termState.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"086ffe31d8fba0110227db122974163709ecc1b4":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["59db5e5f780185e0155d296a323e440a6ecfd3b6","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a356e37aed258bcd168680472f8d1dbc6f396935":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a356e37aed258bcd168680472f8d1dbc6f396935"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["a356e37aed258bcd168680472f8d1dbc6f396935"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a356e37aed258bcd168680472f8d1dbc6f396935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}