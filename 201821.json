{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVLong(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVLong(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}