{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24ceb971f4e38f66031e08ad9875913046ed5ee4","date":1329415741,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"desc\", \"one\", \"id\", 1));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"desc\", \"one\", \"id\", 1));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null, null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"desc\", \"one\", \"id\", 1));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":null,"sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"desc\", \"one\", \"id\", 1));\n    rows.add(createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(createMap(\"id\", 2, \"desc\", \"another two\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null, null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["24ceb971f4e38f66031e08ad9875913046ed5ee4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"24ceb971f4e38f66031e08ad9875913046ed5ee4":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["24ceb971f4e38f66031e08ad9875913046ed5ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24ceb971f4e38f66031e08ad9875913046ed5ee4":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}