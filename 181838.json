{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","commits":[{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {\n    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)\n        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());\n    String[] dates = datesList.toArray(new String[datesList.size()]);\n    assertU(adoc(sdoc(\"id\", \"1\", field, dates[0])));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", dates[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", dates[0]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", datesList))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {\n    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)\n        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());\n    String[] dates = datesList.toArray(new String[datesList.size()]);\n    assertU(adoc(sdoc(\"id\", \"1\", field, dates[0])));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", dates[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", dates[0]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", datesList))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {\n    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)\n        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());\n    String[] dates = datesList.toArray(new String[datesList.size()]);\n    assertU(adoc(sdoc(\"id\", \"1\", field, dates[0])));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", dates[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", dates[0]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", datesList))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {\n    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)\n        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());\n    String[] dates = datesList.toArray(new String[datesList.size()]);\n    assertU(adoc(sdoc(\"id\", \"1\", field, dates[0])));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", dates[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", dates[0]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", datesList))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {\n    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)\n        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());\n    String[] dates = datesList.toArray(new String[datesList.size()]);\n    assertU(adoc(sdoc(\"id\", \"1\", field, dates[0])));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", dates[1]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", dates[0]))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", datesList))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[0] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[1] + \"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/date[.='\" + dates[2] + \"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/date)=0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}