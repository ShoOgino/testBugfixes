{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","commits":[{"id":"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","date":1492411712,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326b5c746af092eb827c5c1accdab1b47fe0cf3c","date":1492433195,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b","date":1493360359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(AutoScalingParams.EVENT);\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(AutoScalingParams.EVENT);\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(\"event\");\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      AutoScaling.EventType eventType = cfg.eventType;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(AutoScalingParams.EVENT);\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"c5fd294da67452cd8d116692194908de00eb5209":["664ff2b928393480d9655010aa700656b0fcade0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c32a8448145a74a8902798f2e63e322827757ff2":["cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"664ff2b928393480d9655010aa700656b0fcade0":["cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"c5fd294da67452cd8d116692194908de00eb5209":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","326b5c746af092eb827c5c1accdab1b47fe0cf3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["cd1c7e8b2dac1a217fdb2fe37952d0c02224e43b"],"664ff2b928393480d9655010aa700656b0fcade0":["c5fd294da67452cd8d116692194908de00eb5209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5fd294da67452cd8d116692194908de00eb5209","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}