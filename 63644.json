{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean).mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getMaxScores) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getMaxScores);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getMaxScores);\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}