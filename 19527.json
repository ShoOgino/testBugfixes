{"path":"src/java/org/apache/solr/search/SolrIndexReader#readerIndex(int,int[]).mjava","commits":[{"id":"10845c160c29e7e480692d2e9d7dad15a6de2630","date":1242326245,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexReader#readerIndex(int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Given an array of IndexReader offsets, find which contains the given doc */\n  public static int readerIndex(int doc, int[] offsets) {    // find reader for doc doc:\n    int high = offsets.length - 1;\n\n    // fast-path for a big optimized index and a bunch of smaller ones.\n    if (high <= 0 || doc < offsets[1]) return 0;\n\n    int low = 1;\n\n    while (high >= low) {\n      int mid = (low + high) >>> 1;\n      int offset = offsets[mid];\n      // check low first since first segments are normally bigger.\n      if (doc < offset)\n        high = mid - 1;\n      else if (doc > offset) {\n        low = mid + 1;\n      }\n      else {\n        // exact match on the offset.\n        return mid;\n      }\n    }\n    // low is the insertion point, high should be just below that (and the segment we want).\n    return high;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexReader#readerIndex(int,int[]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexReader#readerIndex(int,int[]).mjava","sourceNew":"  /** Given an array of IndexReader offsets, find which contains the given doc */\n  public static int readerIndex(int doc, int[] offsets) {    // find reader for doc doc:\n    int high = offsets.length - 1;\n\n    // fast-path for a big optimized index and a bunch of smaller ones.\n    if (high <= 0 || doc < offsets[1]) return 0;\n\n    int low = 1;\n\n    while (high >= low) {\n      int mid = (low + high) >>> 1;\n      int offset = offsets[mid];\n      // check low first since first segments are normally bigger.\n      if (doc < offset)\n        high = mid - 1;\n      else if (doc > offset) {\n        low = mid + 1;\n      }\n      else {\n        // exact match on the offset.\n        return mid;\n      }\n    }\n    // low is the insertion point, high should be just below that (and the segment we want).\n    return high;\n  }\n\n","sourceOld":"  /** Given an array of IndexReader offsets, find which contains the given doc */\n  public static int readerIndex(int doc, int[] offsets) {    // find reader for doc doc:\n    int high = offsets.length - 1;\n\n    // fast-path for a big optimized index and a bunch of smaller ones.\n    if (high <= 0 || doc < offsets[1]) return 0;\n\n    int low = 1;\n\n    while (high >= low) {\n      int mid = (low + high) >>> 1;\n      int offset = offsets[mid];\n      // check low first since first segments are normally bigger.\n      if (doc < offset)\n        high = mid - 1;\n      else if (doc > offset) {\n        low = mid + 1;\n      }\n      else {\n        // exact match on the offset.\n        return mid;\n      }\n    }\n    // low is the insertion point, high should be just below that (and the segment we want).\n    return high;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10845c160c29e7e480692d2e9d7dad15a6de2630":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["10845c160c29e7e480692d2e9d7dad15a6de2630"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"10845c160c29e7e480692d2e9d7dad15a6de2630":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10845c160c29e7e480692d2e9d7dad15a6de2630"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}