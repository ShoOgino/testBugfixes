{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/StandardGdataSearcher#search(Query,int,int,String).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/StandardGdataSearcher#search(Query,int,int,String).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/StandardGdataSearcher#search(Query,int,int,String).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.search.GDataSearcher#search(org.apache.lucene.search.Query,\n     *      int, int, java.lang.String)\n     */\n    public List<String> search(Query query, int hitcount, int offset,\n            String feedId) throws IOException {\n        if (hitcount < 0 || offset < 0)\n            throw new IllegalArgumentException(\n                    \"hit count and offset must not be less than 0\");\n        if (this.isClosed.get())\n            throw new IllegalStateException(\"Searcher is closed\");\n        if (query == null)\n            throw new RuntimeException(\"query is null can not apply search\");\n        if (feedId == null)\n            throw new IllegalArgumentException(\"feed id must not be null\");\n        QueryFilter filter = null;\n        synchronized (queryFilterCache) {\n            filter = queryFilterCache.get(feedId);\n        \n        if (filter == null)\n            filter = new QueryFilter(new TermQuery(new Term(\n                    IndexDocument.FIELD_FEED_ID, feedId)));\n            queryFilterCache.put(feedId, filter);\n        }\n        IndexSearcher indexSearcher = this.searcher.get();\n        Hits hits = indexSearcher.search(query, filter);\n        \n        return collectHits(hits, hitcount, offset);\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.search.GDataSearcher#search(org.apache.lucene.search.Query,\n     *      int, int, java.lang.String)\n     */\n    public List<String> search(Query query, int hitcount, int offset,\n            String feedId) throws IOException {\n        if (hitcount < 0 || offset < 0)\n            throw new IllegalArgumentException(\n                    \"hit count and offset must not be less than 0\");\n        if (this.isClosed.get())\n            throw new IllegalStateException(\"Searcher is closed\");\n        if (query == null)\n            throw new RuntimeException(\"query is null can not apply search\");\n        if (feedId == null)\n            throw new IllegalArgumentException(\"feed id must not be null\");\n        QueryFilter filter = null;\n        synchronized (queryFilterCache) {\n            filter = queryFilterCache.get(feedId);\n        \n        if (filter == null)\n            filter = new QueryFilter(new TermQuery(new Term(\n                    IndexDocument.FIELD_FEED_ID, feedId)));\n            queryFilterCache.put(feedId, filter);\n        }\n        IndexSearcher indexSearcher = this.searcher.get();\n        Hits hits = indexSearcher.search(query, filter);\n        \n        return collectHits(hits, hitcount, offset);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/StandardGdataSearcher#search(Query,int,int,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * @see org.apache.lucene.gdata.search.GDataSearcher#search(org.apache.lucene.search.Query,\n     *      int, int, java.lang.String)\n     */\n    public List<String> search(Query query, int hitcount, int offset,\n            String feedId) throws IOException {\n        if (hitcount < 0 || offset < 0)\n            throw new IllegalArgumentException(\n                    \"hit count and offset must not be less than 0\");\n        if (this.isClosed.get())\n            throw new IllegalStateException(\"Searcher is closed\");\n        if (query == null)\n            throw new RuntimeException(\"query is null can not apply search\");\n        if (feedId == null)\n            throw new IllegalArgumentException(\"feed id must not be null\");\n        QueryFilter filter = null;\n        synchronized (queryFilterCache) {\n            filter = queryFilterCache.get(feedId);\n        \n        if (filter == null)\n            filter = new QueryFilter(new TermQuery(new Term(\n                    IndexDocument.FIELD_FEED_ID, feedId)));\n            queryFilterCache.put(feedId, filter);\n        }\n        IndexSearcher indexSearcher = this.searcher.get();\n        Hits hits = indexSearcher.search(query, filter);\n        \n        return collectHits(hits, hitcount, offset);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}