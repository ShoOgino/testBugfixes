{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", \"1.1.1.1.1.1\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", \"1.1.1.1.1.1\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78b7d15e7b8627fa6d1b946da3a39f0225508d","date":1576086705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", DEAD_HOST_1);\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", \"1.1.1.1.1.1\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e614eceb81b081076e753ed62268c93c8a2a28e","date":1576119727,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    HdfsTestUtil.checkAssumptions();\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", DEAD_HOST_1);\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", DEAD_HOST_1);\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth#setupClass().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    HdfsTestUtil.checkAssumptions();\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", DEAD_HOST_1);\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    Path securityJsonPath = TEST_PATH().resolve(\"security\").resolve(\"hadoop_simple_auth_with_delegation.json\");\n    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());\n\n    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);\n    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get(\"authentication\");\n    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig\n        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());\n    proxyUserConfigs.put(\"proxyuser.noGroups.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.anyHostAnyUser.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.hosts\", \"1.1.1.1.1.1\");\n    proxyUserConfigs.put(\"proxyuser.wrongHost.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.noHosts.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    proxyUserConfigs.put(\"proxyuser.localHostAnyGroup.groups\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.hosts\", \"*\");\n    proxyUserConfigs.put(\"proxyuser.bogusGroup.groups\", \"__some_bogus_group\");\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.groups\", ImpersonationUtil.getUsersFirstGroup());\n    proxyUserConfigs.put(\"proxyuser.anyHostUsersGroup.hosts\", \"*\");\n\n    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    configureCluster(NUM_SERVERS)// nodes\n        .withSecurityJson(Utils.toJSONString(securityConfig))\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["29887daf839649150d96855b142b76f5c45d60d2","7e614eceb81b081076e753ed62268c93c8a2a28e"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e614eceb81b081076e753ed62268c93c8a2a28e"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["29887daf839649150d96855b142b76f5c45d60d2"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"7e614eceb81b081076e753ed62268c93c8a2a28e":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29887daf839649150d96855b142b76f5c45d60d2":["df724d84dab24a0cc54bec95a8680867adc7f171","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["7e614eceb81b081076e753ed62268c93c8a2a28e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}