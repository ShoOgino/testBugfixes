{"path":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","commits":[{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testMetricsUnload().mjava","sourceNew":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    handler.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMetricsUnload() throws Exception {\n\n    SolrCore core = h.getCoreContainer().getCore(\"collection1\");//;.getRequestHandlers().put(\"/dumphandler\", new DumpRequestHandler());\n    RefreshablePluginHolder pluginHolder =null;\n    try {\n      PluginInfo info = new PluginInfo(SolrRequestHandler.TYPE, Utils.makeMap(\"name\", \"/dumphandler\", \"class\", DumpRequestHandler.class.getName()));\n      DumpRequestHandler requestHandler = new DumpRequestHandler();\n      requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1\", \"d_k2\",\"v2\");\n      pluginHolder = new RefreshablePluginHolder(info, requestHandler);\n      core.getRequestHandlers().put(\"/dumphandler\",\n\n          pluginHolder);\n    } finally {\n      core.close();\n    }\n\n\n\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n    pluginHolder.closeHandler();\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(null, resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n    DumpRequestHandler requestHandler = new DumpRequestHandler();\n    requestHandler.gaugevals =  Utils.makeMap(\"d_k1\",\"v1.1\", \"d_k2\",\"v2.1\");\n    pluginHolder.reset(requestHandler);\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\", MetricsHandler.COMPACT_PARAM, \"true\", \"key\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\"),\n        resp);\n\n    assertEquals(\"v1.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\", \"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k1\"), null));\n    assertEquals(\"v2.1\", resp.getValues()._getStr(Arrays.asList(\"metrics\",\"solr.core.collection1:QUERY./dumphandler.dumphandlergauge\",\"d_k2\"), null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["52275555c0ae3b55430cef26ad7fca3f02440944"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"]},"commit2Childs":{"52275555c0ae3b55430cef26ad7fca3f02440944":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}