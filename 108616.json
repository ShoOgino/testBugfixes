{"path":"backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(TermPositions,int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(TermPositions,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void checkSkipTo(TermPositions tp, int target, int maxCounter) throws IOException {\n    tp.skipTo(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.doc() + \" after skipTo target \" + target, target, tp.doc());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    byte[] b = new byte[1];\n    tp.getPayload(b, 0);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b[0], (byte) target, b[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(TermPositions,int,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(TermPositions,int,int).mjava","sourceNew":"  public void checkSkipTo(TermPositions tp, int target, int maxCounter) throws IOException {\n    tp.skipTo(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.doc() + \" after skipTo target \" + target, target, tp.doc());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    byte[] b = new byte[1];\n    tp.getPayload(b, 0);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b[0], (byte) target, b[0]);\n  }\n\n","sourceOld":"  public void checkSkipTo(TermPositions tp, int target, int maxCounter) throws IOException {\n    tp.skipTo(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.doc() + \" after skipTo target \" + target, target, tp.doc());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    byte[] b = new byte[1];\n    tp.getPayload(b, 0);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b[0], (byte) target, b[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}