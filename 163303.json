{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":["777b7ef341decfee8757f492d8a154637cd7a384"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":["777b7ef341decfee8757f492d8a154637cd7a384"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9274621789ce990dbfef455dabdf026bb3184821":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","9274621789ce990dbfef455dabdf026bb3184821"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"56572ec06f1407c066d6b7399413178b33176cd8":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}