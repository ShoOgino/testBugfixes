{"path":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1bd110770d1b52ca7d7201410a102c468c540967"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"sliceUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"sliceUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"sliceUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESLICEUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"sliceUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bd110770d1b52ca7d7201410a102c468c540967","date":1419034668,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      try {\n        NamedList<Object> res = doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n            \"collection\", COLLECTION_NAME);\n        fail(\"Should have thrown 'Unknown action' error\");\n      } catch (SolrServerException e) {\n        assertTrue(\"Should have gotten an error message that REBALANCELEADERS is not supported\",\n            e.getCause().getMessage().contains(\"Unknown action: REBALANCELEADERS\"));\n      }\n\n//      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd45c40db7386b20de53b81216bcf574f15be40","date":1419458105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      try {\n        NamedList<Object> res = doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n            \"collection\", COLLECTION_NAME);\n        fail(\"Should have thrown 'Unknown action' error\");\n      } catch (SolrServerException e) {\n        assertTrue(\"Should have gotten an error message that REBALANCELEADERS is not supported\",\n            e.getCause().getMessage().contains(\"Unknown action: REBALANCELEADERS\"));\n      }\n\n//      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a7098b1923741f1d9887fad7cc27074c26d1f","date":1502268482,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"property.bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["636a7098b1923741f1d9887fad7cc27074c26d1f","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1fd45c40db7386b20de53b81216bcf574f15be40":["1bd110770d1b52ca7d7201410a102c468c540967"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"1bd110770d1b52ca7d7201410a102c468c540967":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["636a7098b1923741f1d9887fad7cc27074c26d1f"],"bafca15d8e408346a67f4282ad1143b88023893b":["1fd45c40db7386b20de53b81216bcf574f15be40"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["cc3b13b430571c2e169f98fe38e1e7666f88522d","636a7098b1923741f1d9887fad7cc27074c26d1f"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["cc3b13b430571c2e169f98fe38e1e7666f88522d","636a7098b1923741f1d9887fad7cc27074c26d1f"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fd45c40db7386b20de53b81216bcf574f15be40":["bafca15d8e408346a67f4282ad1143b88023893b"],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["1bd110770d1b52ca7d7201410a102c468c540967"],"1bd110770d1b52ca7d7201410a102c468c540967":["1fd45c40db7386b20de53b81216bcf574f15be40"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["636a7098b1923741f1d9887fad7cc27074c26d1f","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","0a22eafe3f72a4c2945eaad9547e6c78816978f4","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}