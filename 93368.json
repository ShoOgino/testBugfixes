{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n    assert in.bytes == bytes;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n    assert in.bytes == bytes;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n    assert in.bytes == bytes;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc6d3be942e675e8251dbe10796cdb3a484bf607","date":1358026184,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n    assert in.bytes == bytes;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c7c5f2319949ba567dd867f78f86ea8ff0f1476","date":1375469665,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert assertRootArcs();\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["511ba1b4794adf63f340ec836a81133bad124521","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert assertRootArcs();\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"511ba1b4794adf63f340ec836a81133bad124521","date":1376606574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      \n      // LUCENE-5152: detect tricky cases where caller\n      // modified previously returned cached root-arcs:\n      assert assertRootArcs();\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert assertRootArcs();\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"],"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      \n      // LUCENE-5152: detect tricky cases where caller\n      // modified previously returned cached root-arcs:\n      assert assertRootArcs();\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert assertRootArcs();\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f32ed90e12610550e1363aea43afe3d6e292cf9","date":1418230105,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    return findTargetArc(labelToMatch, follow, arc, in, true);\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      \n      // LUCENE-5152: detect tricky cases where caller\n      // modified previously returned cached root-arcs:\n      assert assertRootArcs();\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return null;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(getNodeAddress(follow.target));\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.getPosition();\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.setPosition(arc.posArcsStart);\n        in.skipBytes(arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":["fd9cc9d77712aba3662f24632df7539ab75e3667","3c7c5f2319949ba567dd867f78f86ea8ff0f1476","87e78f3c129251e74ecc2ff73a32de0f27cf09d5","b3be20ca1091c0b7cdb2308b9023606a5e451cec","56da903869515527852ee21ea7ef7bfe414cd40d","511ba1b4794adf63f340ec836a81133bad124521","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","fc6d3be942e675e8251dbe10796cdb3a484bf607"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfe04a006c42318f41df58bdd061cc1065b5f688","date":1574780842,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target() <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target();\n        }\n        arc.output = follow.nextFinalOutput();\n        arc.label = END_LABEL;\n        arc.nodeFlags = arc.flags;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(follow.target());\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.numArcs = in.readVInt(); // This is in fact the label range.\n      arc.bytesPerArc = in.readVInt();\n      readPresenceBytes(arc, in);\n      arc.firstLabel = readLabel(in);\n      arc.posArcsStart = in.getPosition();\n\n      int arcIndex = labelToMatch - arc.firstLabel();\n      if (arcIndex < 0 || arcIndex >= arc.numArcs()) {\n        return null; // Before or after label range.\n      } else if (!arc.bitTable().isBitSet(arcIndex)) {\n        return null; // Arc missing in the range.\n      }\n      return readArcByDirectAddressing(arc, in, arcIndex);\n    } else if (flags == ARCS_FOR_BINARY_SEARCH) {\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.posArcsStart = in.getPosition();\n\n      // Array is sparse; do binary search:\n      int low = 0;\n      int high = arc.numArcs() - 1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        // +1 to skip over flags\n        in.setPosition(arc.posArcsStart() - (arc.bytesPerArc() * mid + 1));\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid - 1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target(), arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label() == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label() > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    return findTargetArc(labelToMatch, follow, arc, in, true);\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target() <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target();\n        }\n        arc.output = follow.nextFinalOutput();\n        arc.label = END_LABEL;\n        arc.nodeFlags = arc.flags;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(follow.target());\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.numArcs = in.readVInt(); // This is in fact the label range.\n      arc.bytesPerArc = in.readVInt();\n      readPresenceBytes(arc, in);\n      arc.firstLabel = readLabel(in);\n      arc.posArcsStart = in.getPosition();\n\n      int arcIndex = labelToMatch - arc.firstLabel();\n      if (arcIndex < 0 || arcIndex >= arc.numArcs()) {\n        return null; // Before or after label range.\n      } else if (!BitTable.isBitSet(arcIndex, arc, in)) {\n        return null; // Arc missing in the range.\n      }\n      return readArcByDirectAddressing(arc, in, arcIndex);\n    } else if (flags == ARCS_FOR_BINARY_SEARCH) {\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.posArcsStart = in.getPosition();\n\n      // Array is sparse; do binary search:\n      int low = 0;\n      int high = arc.numArcs() - 1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        // +1 to skip over flags\n        in.setPosition(arc.posArcsStart() - (arc.bytesPerArc() * mid + 1));\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid - 1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target(), arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label() == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label() > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target() <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target();\n        }\n        arc.output = follow.nextFinalOutput();\n        arc.label = END_LABEL;\n        arc.nodeFlags = arc.flags;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.setPosition(follow.target());\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.numArcs = in.readVInt(); // This is in fact the label range.\n      arc.bytesPerArc = in.readVInt();\n      readPresenceBytes(arc, in);\n      arc.firstLabel = readLabel(in);\n      arc.posArcsStart = in.getPosition();\n\n      int arcIndex = labelToMatch - arc.firstLabel();\n      if (arcIndex < 0 || arcIndex >= arc.numArcs()) {\n        return null; // Before or after label range.\n      } else if (!arc.bitTable().isBitSet(arcIndex)) {\n        return null; // Arc missing in the range.\n      }\n      return readArcByDirectAddressing(arc, in, arcIndex);\n    } else if (flags == ARCS_FOR_BINARY_SEARCH) {\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.posArcsStart = in.getPosition();\n\n      // Array is sparse; do binary search:\n      int low = 0;\n      int high = arc.numArcs() - 1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        // +1 to skip over flags\n        in.setPosition(arc.posArcsStart() - (arc.bytesPerArc() * mid + 1));\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid - 1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target(), arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label() == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label() > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","511ba1b4794adf63f340ec836a81133bad124521"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["0984ad47974c2d5d354519ddb2aa8358973a6271","fc6d3be942e675e8251dbe10796cdb3a484bf607"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"cfe04a006c42318f41df58bdd061cc1065b5f688":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"511ba1b4794adf63f340ec836a81133bad124521":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["511ba1b4794adf63f340ec836a81133bad124521"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["511ba1b4794adf63f340ec836a81133bad124521"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"cfe04a006c42318f41df58bdd061cc1065b5f688":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476","8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"511ba1b4794adf63f340ec836a81133bad124521":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}