{"path":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":null,"sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2","date":1281562408,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":["8626034838b30f3e0a62b18992eb6227c04ec80b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2"],"c26f00b574427b55127e869b935845554afde1fa":["c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}