{"path":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","commits":[{"id":"ca9fcf6500ae3e9e929b21f139aecec4d91b39d9","date":1238970276,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ca9fcf6500ae3e9e929b21f139aecec4d91b39d9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ca9fcf6500ae3e9e929b21f139aecec4d91b39d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ca9fcf6500ae3e9e929b21f139aecec4d91b39d9"],"ca9fcf6500ae3e9e929b21f139aecec4d91b39d9":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}