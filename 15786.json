{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","sourceNew":"  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  /*\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n    // Create initial node:\n    result.createState();\n    int stateOffset = 1;\n\n    // First pass, adding all states epsilon transitions:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      if (a.isAccept(0)) {\n        // If any automaton accepts empty string, we do too:\n        result.setAccept(0, true);\n      }\n\n      for(int s=0;s<numStates;s++) {\n        int state = result.createState();\n        result.setAccept(state, a.isAccept(s));\n      }\n\n      // Add epsilon transition from new initial state to this automaton's initial state:\n      int numTransitions = a.initTransition(0, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        result.addTransition(0, stateOffset + t.dest, t.min, t.max);\n      }\n\n      stateOffset += numStates;\n    }\n\n    // Second pass, copying over all other transitions:\n    stateOffset = 1;\n    for(LightAutomaton a : l) {\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int numTransitions = a.initTransition(s, t);\n        for(int i=0;i<numTransitions;i++) {\n          a.getNextTransition(t);\n          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);\n        }\n      }\n\n      stateOffset += numStates;\n    }\n\n    result.finish();\n\n    return result;\n  }\n  */\n\n  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","sourceNew":"  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}