{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    assertTrue(ac.acceptsDocsOutOfOrder());\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    assertTrue(ac.acceptsDocsOutOfOrder());\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    assertTrue(ac.acceptsDocsOutOfOrder());\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d19aa12f12779ee822b14c5f0479847274d077ff","date":1424529172,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(new FakeScorer());\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(new ScoreAndDoc());\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(new FakeScorer());\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(new ScoreAndDoc());\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    LeafCollector ac = c.getLeafCollector(null);\n    ac.collect(1);\n    ac = c.getLeafCollector(null);\n    ac.setScorer(new ScoreAndDoc());\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"d19aa12f12779ee822b14c5f0479847274d077ff":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["d19aa12f12779ee822b14c5f0479847274d077ff"],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["d19aa12f12779ee822b14c5f0479847274d077ff"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d19aa12f12779ee822b14c5f0479847274d077ff":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}