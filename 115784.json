{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","commits":[{"id":"0cebe7d662ef6b6c677383085b295b9878ba1795","date":1337155300,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(5000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(5000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4","date":1348056920,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(5000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","bugFix":["0cebe7d662ef6b6c677383085b295b9878ba1795"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<FacetLabel> categories = new HashSet<FacetLabel>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      FacetLabel cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<FacetLabel> categories = new HashSet<FacetLabel>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      FacetLabel cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<CategoryPath> categories = new HashSet<CategoryPath>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      CategoryPath cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#testConcurrency().mjava","sourceNew":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<FacetLabel> categories = new HashSet<>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      FacetLabel cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","sourceOld":"  public void testConcurrency() throws Exception {\n    // tests that addTaxonomy and addCategory work in parallel\n    final int numCategories = atLeast(10000);\n    \n    // build an input taxonomy index\n    Directory src = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(src);\n    for (int i = 0; i < numCategories; i++) {\n      tw.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n    }\n    tw.close();\n    \n    // now add the taxonomy to an empty taxonomy, while adding the categories\n    // again, in parallel -- in the end, no duplicate categories should exist.\n    Directory dest = newDirectory();\n    final DirectoryTaxonomyWriter destTW = new DirectoryTaxonomyWriter(dest);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        for (int i = 0; i < numCategories; i++) {\n          try {\n            destTW.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n          } catch (IOException e) {\n            // shouldn't happen - if it does, let the test fail on uncaught exception.\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    t.start();\n    \n    OrdinalMap map = new MemoryOrdinalMap();\n    destTW.addTaxonomy(src, map);\n    t.join();\n    destTW.close();\n    \n    // now validate\n    \n    DirectoryTaxonomyReader dtr = new DirectoryTaxonomyReader(dest);\n    // +2 to account for the root category + \"a\"\n    assertEquals(numCategories + 2, dtr.getSize());\n    HashSet<FacetLabel> categories = new HashSet<FacetLabel>();\n    for (int i = 1; i < dtr.getSize(); i++) {\n      FacetLabel cat = dtr.getPath(i);\n      assertTrue(\"category \" + cat + \" already existed\", categories.add(cat));\n    }\n    dtr.close();\n    \n    IOUtils.close(src, dest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cebe7d662ef6b6c677383085b295b9878ba1795":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4":["0cebe7d662ef6b6c677383085b295b9878ba1795"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cebe7d662ef6b6c677383085b295b9878ba1795"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cebe7d662ef6b6c677383085b295b9878ba1795","ef0d8a69209261514c5739c770bba706c2308450"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0cebe7d662ef6b6c677383085b295b9878ba1795":["f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4","ef0d8a69209261514c5739c770bba706c2308450"],"f08fba7c74c7ff6687a9a2e490c6ad6faf62b4f4":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ef0d8a69209261514c5739c770bba706c2308450":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}