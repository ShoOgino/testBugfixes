{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3971a049eab9d119ba1497d7ee89abc1a9a96278","date":1363282186,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    if (delPolicy == null) {\n      throw new IllegalArgumentException(\"indexDeletionPolicy must not be null\");\n    }\n    this.delPolicy = delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy must not be null.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    if (delPolicy == null) {\n      throw new IllegalArgumentException(\"indexDeletionPolicy must not be null\");\n    }\n    this.delPolicy = delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    if (delPolicy == null) {\n      throw new IllegalArgumentException(\"indexDeletionPolicy must not be null\");\n    }\n    this.delPolicy = delPolicy;\n    return this;\n  }\n\n","bugFix":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}