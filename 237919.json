{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestAssociationFacets#beforeClass().mjava","commits":[{"id":"a1e7272ef767c1304198a2cb2000cf54ea49f808","date":1384786433,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestAssociationFacets#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, new FacetsConfig());\n\n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        doc.add(new AssociationFacetField(2, \"int\", \"a\"));\n        doc.add(new AssociationFacetField(0.5f, \"float\", \"a\"));\n        if (i % 2 == 0) { // 50\n          doc.add(new AssociationFacetField(3, \"int\", \"b\"));\n          doc.add(new AssociationFacetField(0.2f, \"float\", \"b\"));\n        }\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestAssociationFacets#beforeClass().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestAssociationFacets#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    // Cannot mix ints & floats in the same indexed field:\n    config.setIndexFieldName(\"int\", \"$facets.int\");\n    config.setIndexFieldName(\"float\", \"$facets.float\");\n\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, config);\n\n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        doc.add(new AssociationFacetField(2, \"int\", \"a\"));\n        doc.add(new AssociationFacetField(0.5f, \"float\", \"a\"));\n        if (i % 2 == 0) { // 50\n          doc.add(new AssociationFacetField(3, \"int\", \"b\"));\n          doc.add(new AssociationFacetField(0.2f, \"float\", \"b\"));\n        }\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n    taxoReader = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, new FacetsConfig());\n\n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        doc.add(new AssociationFacetField(2, \"int\", \"a\"));\n        doc.add(new AssociationFacetField(0.5f, \"float\", \"a\"));\n        if (i % 2 == 0) { // 50\n          doc.add(new AssociationFacetField(3, \"int\", \"b\"));\n          doc.add(new AssociationFacetField(0.2f, \"float\", \"b\"));\n        }\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"441c188ff9fd7da36e0e4d8a9b51cebe63b31192","date":1384814749,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetAssociations#beforeClass().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestAssociationFacets#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    // Cannot mix ints & floats in the same indexed field:\n    config.setIndexFieldName(\"int\", \"$facets.int\");\n    config.setIndexFieldName(\"float\", \"$facets.float\");\n\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, config);\n\n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        doc.add(new AssociationFacetField(2, \"int\", \"a\"));\n        doc.add(new AssociationFacetField(0.5f, \"float\", \"a\"));\n        if (i % 2 == 0) { // 50\n          doc.add(new AssociationFacetField(3, \"int\", \"b\"));\n          doc.add(new AssociationFacetField(0.2f, \"float\", \"b\"));\n        }\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n    taxoReader = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    taxoDir = newDirectory();\n    // preparations - index, taxonomy, content\n    \n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    // Cannot mix ints & floats in the same indexed field:\n    config.setIndexFieldName(\"int\", \"$facets.int\");\n    config.setIndexFieldName(\"float\", \"$facets.float\");\n\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, config);\n\n    // index documents, 50% have only 'b' and all have 'a'\n    for (int i = 0; i < 110; i++) {\n      Document doc = new Document();\n      // every 11th document is added empty, this used to cause the association\n      // aggregators to go into an infinite loop\n      if (i % 11 != 0) {\n        doc.add(new AssociationFacetField(2, \"int\", \"a\"));\n        doc.add(new AssociationFacetField(0.5f, \"float\", \"a\"));\n        if (i % 2 == 0) { // 50\n          doc.add(new AssociationFacetField(3, \"int\", \"b\"));\n          doc.add(new AssociationFacetField(0.2f, \"float\", \"b\"));\n        }\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n    taxoReader = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a1e7272ef767c1304198a2cb2000cf54ea49f808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["a1e7272ef767c1304198a2cb2000cf54ea49f808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["18edd2e3f5560087a37442fa424cbbed7c295ebc"]},"commit2Childs":{"a1e7272ef767c1304198a2cb2000cf54ea49f808":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1e7272ef767c1304198a2cb2000cf54ea49f808","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}