{"path":"src/lucene_extras/org/apache/lucene/analysis/SynonymFilter#next().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/lucene_extras/org/apache/lucene/analysis/SynonymFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  public Token next() throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        return (Token)replacement.next();\n      }\n\n      // common case fast-path of first token not matching anything\n      Token firstTok = nextTok();\n      if (firstTok ==null) return null;\n      String str = ignoreCase ? firstTok.termText.toLowerCase() : firstTok.termText;\n      Object o = map.submap!=null ? map.submap.get(str) : null;\n      if (o == null) return firstTok;\n\n      // OK, we matched a token, so find the longest match.\n\n      // since matched is only used for matches >= 2, defer creation until now\n      if (matched==null) matched=new LinkedList();\n\n      SynonymMap result = match((SynonymMap)o);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        return firstTok;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList generated = new ArrayList(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      Token lastTok = matched.isEmpty() ? firstTok : (Token)matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      Token origTok = includeOrig ? firstTok : null;\n      int origPos = firstTok.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        Token newTok = new Token(repTok.termText, firstTok.startOffset, lastTok.endOffset, firstTok.type);\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          origTok.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origTok.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n          if (origTok != null) origPos += origTok.getPositionIncrement();\n        }\n\n        newTok.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newTok.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        origTok.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origTok.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n        if (origTok != null) origPos += origTok.getPositionIncrement();\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd72c170d0045d244f19bc40f18b517f56fbf9c9","date":1138916232,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#next().mjava","pathOld":"src/lucene_extras/org/apache/lucene/analysis/SynonymFilter#next().mjava","sourceNew":"  public Token next() throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        return (Token)replacement.next();\n      }\n\n      // common case fast-path of first token not matching anything\n      Token firstTok = nextTok();\n      if (firstTok ==null) return null;\n      String str = ignoreCase ? firstTok.termText().toLowerCase() : firstTok.termText();\n      Object o = map.submap!=null ? map.submap.get(str) : null;\n      if (o == null) return firstTok;\n\n      // OK, we matched a token, so find the longest match.\n\n      // since matched is only used for matches >= 2, defer creation until now\n      if (matched==null) matched=new LinkedList();\n\n      SynonymMap result = match((SynonymMap)o);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        return firstTok;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList generated = new ArrayList(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      Token lastTok = matched.isEmpty() ? firstTok : (Token)matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      Token origTok = includeOrig ? firstTok : null;\n      int origPos = firstTok.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        Token newTok = new Token(repTok.termText(), firstTok.startOffset(), lastTok.endOffset(), firstTok.type());\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          origTok.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origTok.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n          if (origTok != null) origPos += origTok.getPositionIncrement();\n        }\n\n        newTok.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newTok.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        origTok.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origTok.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n        if (origTok != null) origPos += origTok.getPositionIncrement();\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        return (Token)replacement.next();\n      }\n\n      // common case fast-path of first token not matching anything\n      Token firstTok = nextTok();\n      if (firstTok ==null) return null;\n      String str = ignoreCase ? firstTok.termText.toLowerCase() : firstTok.termText;\n      Object o = map.submap!=null ? map.submap.get(str) : null;\n      if (o == null) return firstTok;\n\n      // OK, we matched a token, so find the longest match.\n\n      // since matched is only used for matches >= 2, defer creation until now\n      if (matched==null) matched=new LinkedList();\n\n      SynonymMap result = match((SynonymMap)o);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        return firstTok;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList generated = new ArrayList(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      Token lastTok = matched.isEmpty() ? firstTok : (Token)matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      Token origTok = includeOrig ? firstTok : null;\n      int origPos = firstTok.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        Token newTok = new Token(repTok.termText, firstTok.startOffset, lastTok.endOffset, firstTok.type);\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          origTok.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origTok.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n          if (origTok != null) origPos += origTok.getPositionIncrement();\n        }\n\n        newTok.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newTok.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        origTok.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origTok.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : (Token)matched.removeFirst();\n        if (origTok != null) origPos += origTok.getPositionIncrement();\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["bd72c170d0045d244f19bc40f18b517f56fbf9c9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd72c170d0045d244f19bc40f18b517f56fbf9c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}