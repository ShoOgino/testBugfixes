{"path":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#assertBuffer(FrequencyTrackingRingBuffer,int,int,List[Integer]).mjava","commits":[{"id":"29fc95de48dc0c0b44cef66830a1f0c6c163ed26","date":1418988133,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#assertBuffer(FrequencyTrackingRingBuffer,int,int,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFrequencyTrackingRingBuffer#[T]_assertBuffer(FrequencyTrackingRingBuffer[T],int,List[T]).mjava","sourceNew":"  private static void assertBuffer(FrequencyTrackingRingBuffer buffer, int maxSize, int sentinel, List<Integer> items) {\n    final List<Integer> recentItems;\n    if (items.size() <= maxSize) {\n      recentItems = new ArrayList<>();\n      for (int i = items.size(); i < maxSize; ++i) {\n        recentItems.add(sentinel);\n      }\n      recentItems.addAll(items);\n    } else {\n      recentItems = items.subList(items.size() - maxSize, items.size());\n    }\n    final Map<Integer, Integer> expectedFrequencies = new HashMap<Integer, Integer>();\n    for (Integer item : recentItems) {\n      final Integer freq = expectedFrequencies.get(item);\n      if (freq == null) {\n        expectedFrequencies.put(item, 1);\n      } else {\n        expectedFrequencies.put(item, freq + 1);\n      }\n    }\n    assertEquals(expectedFrequencies, buffer.asFrequencyMap());\n  }\n\n","sourceOld":"  private static <T> void assertBuffer(FrequencyTrackingRingBuffer<T> buffer, int maxSize, List<T> items) {\n    final List<T> recentItems;\n    if (items.size() <= maxSize) {\n      recentItems = items;\n    } else {\n      recentItems = items.subList(items.size() - maxSize, items.size());\n    }\n    final Map<T, Integer> expectedFrequencies = new HashMap<T, Integer>();\n    for (T item : recentItems) {\n      final Integer freq = expectedFrequencies.get(item);\n      if (freq == null) {\n        expectedFrequencies.put(item, 1);\n      } else {\n        expectedFrequencies.put(item, freq + 1);\n      }\n    }\n    assertEquals(expectedFrequencies, buffer.asFrequencyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}