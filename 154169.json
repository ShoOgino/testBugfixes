{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int,int,int).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, PayloadSpanCollector collector, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        collector.reset();\n        spans.collect(collector);\n\n        Collection<byte[]> payload = collector.getPayloads();\n        assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n        for (final byte [] thePayload : payload) {\n          assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n          assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n        }\n\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        assertEquals(\"isPayloadAvailable should return true/false as payloads are expected\", expectedNumPayloads > 0, spans.isPayloadAvailable());\n        //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n          for (final byte [] thePayload : payload) {\n            assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n            assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n          }\n        }\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    VerifyingCollector collector = new VerifyingCollector();\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        collector.reset();\n        spans.collect(collector);\n        collector.verify(expectedPayloadLength, expectedFirstByte);\n        assertEquals(\"expectedNumPayloads\", expectedNumPayloads, collector.payloads.size());\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, PayloadSpanCollector collector, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        collector.reset();\n        spans.collect(collector);\n\n        Collection<byte[]> payload = collector.getPayloads();\n        assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n        for (final byte [] thePayload : payload) {\n          assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n          assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n        }\n\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}