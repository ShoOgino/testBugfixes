{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","commits":[{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(CloudSolrClient cloudSolrClient, String requestId, long duration, TimeUnit timeUnit) throws SolrServerException, IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = CollectionAdminRequest.requestStatus(requestId).process(cloudSolrClient);\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(CloudSolrClient cloudSolrClient, String requestId, long duration, TimeUnit timeUnit) throws SolrServerException, IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = CollectionAdminRequest.requestStatus(requestId).process(cloudSolrClient);\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(CloudSolrClient cloudSolrClient, String requestId, long duration, TimeUnit timeUnit) throws SolrServerException, IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = CollectionAdminRequest.requestStatus(requestId).process(cloudSolrClient);\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager dataProvider, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)dataProvider.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(CloudSolrClient cloudSolrClient, String requestId, long duration, TimeUnit timeUnit) throws SolrServerException, IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = CollectionAdminRequest.requestStatus(requestId).process(cloudSolrClient);\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}