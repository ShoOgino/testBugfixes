{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, 0);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, 0);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, 0);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, 0);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, 0);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","sourceNew":null,"sourceOld":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}