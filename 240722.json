{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","commits":[{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94087bef4f3abfda300fedfa803643a53951bd61","date":1344855261,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","94087bef4f3abfda300fedfa803643a53951bd61"],"94087bef4f3abfda300fedfa803643a53951bd61":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"94087bef4f3abfda300fedfa803643a53951bd61":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["94087bef4f3abfda300fedfa803643a53951bd61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}