{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_INDEX_DIMENSIONS);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["f6652c943595e92c187ee904c382863013eae28f"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}