{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","commits":[{"id":"16c8b96bb5b688807272bd6bee7051c5168e1a10","date":1368203207,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          \"Core  + desc.getName() + \\\" defined twice\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", \"/core1\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", \"/core2\".indexOf(se.getMessage()) != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", message.indexOf(\"/core1\") != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", message.indexOf(\"/core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          \"Core  + desc.getName() + \\\" defined twice\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", \"/core1\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", \"/core2\".indexOf(se.getMessage()) != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          \"Core  + desc.getName() + \\\" defined twice\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", \"/core1\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", \"/core2\".indexOf(se.getMessage()) != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", message.indexOf(\"/core1\") != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", message.indexOf(\"/core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", message.indexOf(\"/core1\") != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", message.indexOf(\"/core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          \"Core  + desc.getName() + \\\" defined twice\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", \"/core1\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", \"/core2\".indexOf(se.getMessage()) != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f8158749a2bad1f17ac42df4f941c6edc4133f5","date":1372794286,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", message.indexOf(\"/core1\") != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", message.indexOf(\"/core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      Throwable cause = se.getCause();\n      String message = cause.getMessage();\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          message.indexOf(\"Core core1 defined more than once\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      assertTrue(\"Should have seen an exception because two cores had the same name\",\n          \"Core  + desc.getName() + \\\" defined twice\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core1 should have been mentioned in the message\", \"/core1\".indexOf(se.getMessage()) != -1);\n      assertTrue(\"/core2 should have been mentioned in the message\", \"/core2\".indexOf(se.getMessage()) != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDuplicateNames().mjava","sourceNew":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"name=core1\"));\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      CoreContainer cc = null;\n      try { cc = init(); }\n      finally { if (cc != null) cc.shutdown(); }\n    });\n    final String message = thrown.getMessage();\n    assertTrue(\"Wrong exception thrown on duplicate core names\",\n        message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n    assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n        message.indexOf(File.separator + \"core1\") != -1);\n    assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n        message.indexOf(File.separator + \"core2\") != -1);\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicateNames() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"name=core1\"));\n    CoreContainer cc = null;\n    try {\n      cc = init();\n      fail(\"Should have thrown exception in testDuplicateNames\");\n    } catch (SolrException se) {\n      String message = se.getMessage();\n      assertTrue(\"Wrong exception thrown on duplicate core names\",\n          message.indexOf(\"Found multiple cores with the name [core1]\") != -1);\n      assertTrue(File.separator + \"core1 should have been mentioned in the message: \" + message,\n          message.indexOf(File.separator + \"core1\") != -1);\n      assertTrue(File.separator + \"core2 should have been mentioned in the message:\" + message,\n          message.indexOf(File.separator + \"core2\") != -1);\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["16c8b96bb5b688807272bd6bee7051c5168e1a10","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","d301cb76d81de80d07b44735622a04d49ed938eb"],"d264f386d864b5751209060e8886ca9845f70469":["16c8b96bb5b688807272bd6bee7051c5168e1a10"],"8f8158749a2bad1f17ac42df4f941c6edc4133f5":["7116474e2e390259937401cf928323e0cbc75e60"],"16c8b96bb5b688807272bd6bee7051c5168e1a10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d301cb76d81de80d07b44735622a04d49ed938eb":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["d301cb76d81de80d07b44735622a04d49ed938eb"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["8f8158749a2bad1f17ac42df4f941c6edc4133f5"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["8f8158749a2bad1f17ac42df4f941c6edc4133f5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"16c8b96bb5b688807272bd6bee7051c5168e1a10":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"8f8158749a2bad1f17ac42df4f941c6edc4133f5":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"d301cb76d81de80d07b44735622a04d49ed938eb":["936cdd5882761db3b844afd6f84ab81cbb011a75","68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16c8b96bb5b688807272bd6bee7051c5168e1a10"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","936cdd5882761db3b844afd6f84ab81cbb011a75","d301cb76d81de80d07b44735622a04d49ed938eb","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}