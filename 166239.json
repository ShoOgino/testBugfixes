{"path":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","commits":[{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db25f0478122f5ca8792a23291340660ff47b05c","date":1435511884,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88124658128e8c06b5dc460e5126ed75aae03079","date":1551817607,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestTolerantSearch#testGetTopIdsPhaseError().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertFalse(\"\"+response, response.getResults().isEmpty());\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c1af881a1691e32ac2275b4008656709aa96e369","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["c1af881a1691e32ac2275b4008656709aa96e369"],"db25f0478122f5ca8792a23291340660ff47b05c":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["28288370235ed02234a64753cdbf0c6ec096304a"],"88124658128e8c06b5dc460e5126ed75aae03079":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"28288370235ed02234a64753cdbf0c6ec096304a":["83b038ad0480d5e81e058bf9fafb2dd85399985d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["83b038ad0480d5e81e058bf9fafb2dd85399985d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88124658128e8c06b5dc460e5126ed75aae03079"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["db25f0478122f5ca8792a23291340660ff47b05c"],"c1af881a1691e32ac2275b4008656709aa96e369":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","db25f0478122f5ca8792a23291340660ff47b05c"],"db25f0478122f5ca8792a23291340660ff47b05c":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1af881a1691e32ac2275b4008656709aa96e369"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["88124658128e8c06b5dc460e5126ed75aae03079"],"88124658128e8c06b5dc460e5126ed75aae03079":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"c1af881a1691e32ac2275b4008656709aa96e369":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}