{"path":"backwards/src/java/org/apache/lucene/index/FormatPostingsDocsWriter#addDoc(int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/FormatPostingsDocsWriter#addDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  FormatPostingsPositionsConsumer addDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n\n    if (docID < 0 || (df > 0 && delta <= 0))\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: abstraction violation\n      skipListWriter.setSkipData(lastDocID, storePayloads, posWriter.lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions)\n      out.writeVInt(delta);\n    else if (1 == termDocFreq)\n      out.writeVInt((delta<<1) | 1);\n    else {\n      out.writeVInt(delta<<1);\n      out.writeVInt(termDocFreq);\n    }\n\n    return posWriter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FormatPostingsDocsWriter#addDoc(int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FormatPostingsDocsWriter#addDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  FormatPostingsPositionsConsumer addDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n\n    if (docID < 0 || (df > 0 && delta <= 0))\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: abstraction violation\n      skipListWriter.setSkipData(lastDocID, storePayloads, posWriter.lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions)\n      out.writeVInt(delta);\n    else if (1 == termDocFreq)\n      out.writeVInt((delta<<1) | 1);\n    else {\n      out.writeVInt(delta<<1);\n      out.writeVInt(termDocFreq);\n    }\n\n    return posWriter;\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  FormatPostingsPositionsConsumer addDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n\n    if (docID < 0 || (df > 0 && delta <= 0))\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: abstraction violation\n      skipListWriter.setSkipData(lastDocID, storePayloads, posWriter.lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (omitTermFreqAndPositions)\n      out.writeVInt(delta);\n    else if (1 == termDocFreq)\n      out.writeVInt((delta<<1) | 1);\n    else {\n      out.writeVInt(delta<<1);\n      out.writeVInt(termDocFreq);\n    }\n\n    return posWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}