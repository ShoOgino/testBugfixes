{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","commits":[{"id":"ebd6f706eb59fe367493c820daeccd76587ec6bf","date":1340868972,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public double score(Rectangle target, Explanation exp) {\n    if (target == null || queryArea <= 0) {\n      return 0;\n    }\n    double targetArea = target.getArea();\n    if (targetArea <= 0) {\n      return 0;\n    }\n    double score = 0;\n\n    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());\n    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());\n    double height = top - bottom;\n    double width = 0;\n\n    // queries that cross the date line\n    if (queryExtent.getCrossesDateLine()) {\n      // documents that cross the date line\n      if (target.getCrossesDateLine()) {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right + 360.0 - left;\n      } else {\n        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());\n        double qryWestRight = Math.min(target.getMaxX(), 180.0);\n        double qryWestWidth = qryWestRight - qryWestLeft;\n        if (qryWestWidth > 0) {\n          width = qryWestWidth;\n        } else {\n          double qryEastLeft = Math.max(target.getMaxX(), -180.0);\n          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double qryEastWidth = qryEastRight - qryEastLeft;\n          if (qryEastWidth > 0) {\n            width = qryEastWidth;\n          }\n        }\n      }\n    } else { // queries that do not cross the date line\n\n      if (target.getCrossesDateLine()) {\n        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());\n        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);\n        double tgtWestWidth = tgtWestRight - tgtWestLeft;\n        if (tgtWestWidth > 0) {\n          width = tgtWestWidth;\n        } else {\n          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);\n          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double tgtEastWidth = tgtEastRight - tgtEastLeft;\n          if (tgtEastWidth > 0) {\n            width = tgtEastWidth;\n          }\n        }\n      } else {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right - left;\n      }\n    }\n\n\n    // calculate the score\n    if ((width > 0) && (height > 0)) {\n      double intersectionArea = width * height;\n      double queryRatio = intersectionArea / queryArea;\n      double targetRatio = intersectionArea / targetArea;\n      double queryFactor = Math.pow(queryRatio, queryPower);\n      double targetFactor = Math.pow(targetRatio, targetPower);\n      score = queryFactor * targetFactor * 10000.0;\n\n      if (exp!=null) {\n//        StringBuilder sb = new StringBuilder();\n//        sb.append(\"\\nscore=\").append(score);\n//        sb.append(\"\\n  query=\").append();\n//        sb.append(\"\\n  target=\").append(target.toString());\n//        sb.append(\"\\n  intersectionArea=\").append(intersectionArea);\n//        \n//        sb.append(\" queryArea=\").append(queryArea).append(\" targetArea=\").append(targetArea);\n//        sb.append(\"\\n  queryRatio=\").append(queryRatio).append(\" targetRatio=\").append(targetRatio);\n//        sb.append(\"\\n  queryFactor=\").append(queryFactor).append(\" targetFactor=\").append(targetFactor);\n//        sb.append(\" (queryPower=\").append(queryPower).append(\" targetPower=\").append(targetPower).append(\")\");\n        \n        exp.setValue((float)score);\n        exp.setDescription(this.getClass().getSimpleName());\n        \n        Explanation e = null;\n        \n        exp.addDetail( e = new Explanation((float)intersectionArea, \"IntersectionArea\") );\n        e.addDetail(new Explanation((float)width,  \"width; Query: \"+queryExtent.toString()));\n        e.addDetail(new Explanation((float)height, \"height; Target: \"+target.toString()));\n\n        exp.addDetail( e = new Explanation((float)queryFactor, \"Query\") );\n        e.addDetail(new Explanation((float)queryArea, \"area\"));\n        e.addDetail(new Explanation((float)queryRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)queryPower, \"power\"));\n\n        exp.addDetail( e = new Explanation((float)targetFactor, \"Target\") );\n        e.addDetail(new Explanation((float)targetArea, \"area\"));\n        e.addDetail(new Explanation((float)targetRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)targetPower, \"power\"));\n      }\n    }\n    else if(exp !=null) {\n      exp.setValue(0);\n      exp.setDescription(\"Shape does not intersect\");\n    }\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public double score(Rectangle target, Explanation exp) {\n    if (target == null || queryArea <= 0) {\n      return 0;\n    }\n    double targetArea = target.getArea();\n    if (targetArea <= 0) {\n      return 0;\n    }\n    double score = 0;\n\n    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());\n    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());\n    double height = top - bottom;\n    double width = 0;\n\n    // queries that cross the date line\n    if (queryExtent.getCrossesDateLine()) {\n      // documents that cross the date line\n      if (target.getCrossesDateLine()) {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right + 360.0 - left;\n      } else {\n        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());\n        double qryWestRight = Math.min(target.getMaxX(), 180.0);\n        double qryWestWidth = qryWestRight - qryWestLeft;\n        if (qryWestWidth > 0) {\n          width = qryWestWidth;\n        } else {\n          double qryEastLeft = Math.max(target.getMaxX(), -180.0);\n          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double qryEastWidth = qryEastRight - qryEastLeft;\n          if (qryEastWidth > 0) {\n            width = qryEastWidth;\n          }\n        }\n      }\n    } else { // queries that do not cross the date line\n\n      if (target.getCrossesDateLine()) {\n        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());\n        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);\n        double tgtWestWidth = tgtWestRight - tgtWestLeft;\n        if (tgtWestWidth > 0) {\n          width = tgtWestWidth;\n        } else {\n          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);\n          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double tgtEastWidth = tgtEastRight - tgtEastLeft;\n          if (tgtEastWidth > 0) {\n            width = tgtEastWidth;\n          }\n        }\n      } else {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right - left;\n      }\n    }\n\n\n    // calculate the score\n    if ((width > 0) && (height > 0)) {\n      double intersectionArea = width * height;\n      double queryRatio = intersectionArea / queryArea;\n      double targetRatio = intersectionArea / targetArea;\n      double queryFactor = Math.pow(queryRatio, queryPower);\n      double targetFactor = Math.pow(targetRatio, targetPower);\n      score = queryFactor * targetFactor * 10000.0;\n\n      if (exp!=null) {\n//        StringBuilder sb = new StringBuilder();\n//        sb.append(\"\\nscore=\").append(score);\n//        sb.append(\"\\n  query=\").append();\n//        sb.append(\"\\n  target=\").append(target.toString());\n//        sb.append(\"\\n  intersectionArea=\").append(intersectionArea);\n//        \n//        sb.append(\" queryArea=\").append(queryArea).append(\" targetArea=\").append(targetArea);\n//        sb.append(\"\\n  queryRatio=\").append(queryRatio).append(\" targetRatio=\").append(targetRatio);\n//        sb.append(\"\\n  queryFactor=\").append(queryFactor).append(\" targetFactor=\").append(targetFactor);\n//        sb.append(\" (queryPower=\").append(queryPower).append(\" targetPower=\").append(targetPower).append(\")\");\n        \n        exp.setValue((float)score);\n        exp.setDescription(this.getClass().getSimpleName());\n        \n        Explanation e = null;\n        \n        exp.addDetail( e = new Explanation((float)intersectionArea, \"IntersectionArea\") );\n        e.addDetail(new Explanation((float)width,  \"width; Query: \"+queryExtent.toString()));\n        e.addDetail(new Explanation((float)height, \"height; Target: \"+target.toString()));\n\n        exp.addDetail( e = new Explanation((float)queryFactor, \"Query\") );\n        e.addDetail(new Explanation((float)queryArea, \"area\"));\n        e.addDetail(new Explanation((float)queryRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)queryPower, \"power\"));\n\n        exp.addDetail( e = new Explanation((float)targetFactor, \"Target\") );\n        e.addDetail(new Explanation((float)targetArea, \"area\"));\n        e.addDetail(new Explanation((float)targetRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)targetPower, \"power\"));\n      }\n    }\n    else if(exp !=null) {\n      exp.setValue(0);\n      exp.setDescription(\"Shape does not intersect\");\n    }\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","sourceNew":"  @Override\n  public double score(Rectangle target, Explanation exp) {\n    if (target == null || queryArea <= 0) {\n      return 0;\n    }\n    double targetArea = target.getArea(null);\n    if (targetArea <= 0) {\n      return 0;\n    }\n    double score = 0;\n\n    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());\n    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());\n    double height = top - bottom;\n    double width = 0;\n\n    // queries that cross the date line\n    if (queryExtent.getCrossesDateLine()) {\n      // documents that cross the date line\n      if (target.getCrossesDateLine()) {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right + 360.0 - left;\n      } else {\n        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());\n        double qryWestRight = Math.min(target.getMaxX(), 180.0);\n        double qryWestWidth = qryWestRight - qryWestLeft;\n        if (qryWestWidth > 0) {\n          width = qryWestWidth;\n        } else {\n          double qryEastLeft = Math.max(target.getMaxX(), -180.0);\n          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double qryEastWidth = qryEastRight - qryEastLeft;\n          if (qryEastWidth > 0) {\n            width = qryEastWidth;\n          }\n        }\n      }\n    } else { // queries that do not cross the date line\n\n      if (target.getCrossesDateLine()) {\n        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());\n        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);\n        double tgtWestWidth = tgtWestRight - tgtWestLeft;\n        if (tgtWestWidth > 0) {\n          width = tgtWestWidth;\n        } else {\n          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);\n          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double tgtEastWidth = tgtEastRight - tgtEastLeft;\n          if (tgtEastWidth > 0) {\n            width = tgtEastWidth;\n          }\n        }\n      } else {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right - left;\n      }\n    }\n\n\n    // calculate the score\n    if ((width > 0) && (height > 0)) {\n      double intersectionArea = width * height;\n      double queryRatio = intersectionArea / queryArea;\n      double targetRatio = intersectionArea / targetArea;\n      double queryFactor = Math.pow(queryRatio, queryPower);\n      double targetFactor = Math.pow(targetRatio, targetPower);\n      score = queryFactor * targetFactor * 10000.0;\n\n      if (exp!=null) {\n//        StringBuilder sb = new StringBuilder();\n//        sb.append(\"\\nscore=\").append(score);\n//        sb.append(\"\\n  query=\").append();\n//        sb.append(\"\\n  target=\").append(target.toString());\n//        sb.append(\"\\n  intersectionArea=\").append(intersectionArea);\n//        \n//        sb.append(\" queryArea=\").append(queryArea).append(\" targetArea=\").append(targetArea);\n//        sb.append(\"\\n  queryRatio=\").append(queryRatio).append(\" targetRatio=\").append(targetRatio);\n//        sb.append(\"\\n  queryFactor=\").append(queryFactor).append(\" targetFactor=\").append(targetFactor);\n//        sb.append(\" (queryPower=\").append(queryPower).append(\" targetPower=\").append(targetPower).append(\")\");\n        \n        exp.setValue((float)score);\n        exp.setDescription(this.getClass().getSimpleName());\n        \n        Explanation e = null;\n        \n        exp.addDetail( e = new Explanation((float)intersectionArea, \"IntersectionArea\") );\n        e.addDetail(new Explanation((float)width,  \"width; Query: \"+queryExtent.toString()));\n        e.addDetail(new Explanation((float)height, \"height; Target: \"+target.toString()));\n\n        exp.addDetail( e = new Explanation((float)queryFactor, \"Query\") );\n        e.addDetail(new Explanation((float)queryArea, \"area\"));\n        e.addDetail(new Explanation((float)queryRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)queryPower, \"power\"));\n\n        exp.addDetail( e = new Explanation((float)targetFactor, \"Target\") );\n        e.addDetail(new Explanation((float)targetArea, \"area\"));\n        e.addDetail(new Explanation((float)targetRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)targetPower, \"power\"));\n      }\n    }\n    else if(exp !=null) {\n      exp.setValue(0);\n      exp.setDescription(\"Shape does not intersect\");\n    }\n    return score;\n  }\n\n","sourceOld":"  @Override\n  public double score(Rectangle target, Explanation exp) {\n    if (target == null || queryArea <= 0) {\n      return 0;\n    }\n    double targetArea = target.getArea();\n    if (targetArea <= 0) {\n      return 0;\n    }\n    double score = 0;\n\n    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());\n    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());\n    double height = top - bottom;\n    double width = 0;\n\n    // queries that cross the date line\n    if (queryExtent.getCrossesDateLine()) {\n      // documents that cross the date line\n      if (target.getCrossesDateLine()) {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right + 360.0 - left;\n      } else {\n        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());\n        double qryWestRight = Math.min(target.getMaxX(), 180.0);\n        double qryWestWidth = qryWestRight - qryWestLeft;\n        if (qryWestWidth > 0) {\n          width = qryWestWidth;\n        } else {\n          double qryEastLeft = Math.max(target.getMaxX(), -180.0);\n          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double qryEastWidth = qryEastRight - qryEastLeft;\n          if (qryEastWidth > 0) {\n            width = qryEastWidth;\n          }\n        }\n      }\n    } else { // queries that do not cross the date line\n\n      if (target.getCrossesDateLine()) {\n        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());\n        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);\n        double tgtWestWidth = tgtWestRight - tgtWestLeft;\n        if (tgtWestWidth > 0) {\n          width = tgtWestWidth;\n        } else {\n          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);\n          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double tgtEastWidth = tgtEastRight - tgtEastLeft;\n          if (tgtEastWidth > 0) {\n            width = tgtEastWidth;\n          }\n        }\n      } else {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right - left;\n      }\n    }\n\n\n    // calculate the score\n    if ((width > 0) && (height > 0)) {\n      double intersectionArea = width * height;\n      double queryRatio = intersectionArea / queryArea;\n      double targetRatio = intersectionArea / targetArea;\n      double queryFactor = Math.pow(queryRatio, queryPower);\n      double targetFactor = Math.pow(targetRatio, targetPower);\n      score = queryFactor * targetFactor * 10000.0;\n\n      if (exp!=null) {\n//        StringBuilder sb = new StringBuilder();\n//        sb.append(\"\\nscore=\").append(score);\n//        sb.append(\"\\n  query=\").append();\n//        sb.append(\"\\n  target=\").append(target.toString());\n//        sb.append(\"\\n  intersectionArea=\").append(intersectionArea);\n//        \n//        sb.append(\" queryArea=\").append(queryArea).append(\" targetArea=\").append(targetArea);\n//        sb.append(\"\\n  queryRatio=\").append(queryRatio).append(\" targetRatio=\").append(targetRatio);\n//        sb.append(\"\\n  queryFactor=\").append(queryFactor).append(\" targetFactor=\").append(targetFactor);\n//        sb.append(\" (queryPower=\").append(queryPower).append(\" targetPower=\").append(targetPower).append(\")\");\n        \n        exp.setValue((float)score);\n        exp.setDescription(this.getClass().getSimpleName());\n        \n        Explanation e = null;\n        \n        exp.addDetail( e = new Explanation((float)intersectionArea, \"IntersectionArea\") );\n        e.addDetail(new Explanation((float)width,  \"width; Query: \"+queryExtent.toString()));\n        e.addDetail(new Explanation((float)height, \"height; Target: \"+target.toString()));\n\n        exp.addDetail( e = new Explanation((float)queryFactor, \"Query\") );\n        e.addDetail(new Explanation((float)queryArea, \"area\"));\n        e.addDetail(new Explanation((float)queryRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)queryPower, \"power\"));\n\n        exp.addDetail( e = new Explanation((float)targetFactor, \"Target\") );\n        e.addDetail(new Explanation((float)targetArea, \"area\"));\n        e.addDetail(new Explanation((float)targetRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)targetPower, \"power\"));\n      }\n    }\n    else if(exp !=null) {\n      exp.setValue(0);\n      exp.setDescription(\"Shape does not intersect\");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/AreaSimilarity#score(Rectangle,Explanation).mjava","sourceNew":null,"sourceOld":"  @Override\n  public double score(Rectangle target, Explanation exp) {\n    if (target == null || queryArea <= 0) {\n      return 0;\n    }\n    double targetArea = target.getArea(null);\n    if (targetArea <= 0) {\n      return 0;\n    }\n    double score = 0;\n\n    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());\n    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());\n    double height = top - bottom;\n    double width = 0;\n\n    // queries that cross the date line\n    if (queryExtent.getCrossesDateLine()) {\n      // documents that cross the date line\n      if (target.getCrossesDateLine()) {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right + 360.0 - left;\n      } else {\n        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());\n        double qryWestRight = Math.min(target.getMaxX(), 180.0);\n        double qryWestWidth = qryWestRight - qryWestLeft;\n        if (qryWestWidth > 0) {\n          width = qryWestWidth;\n        } else {\n          double qryEastLeft = Math.max(target.getMaxX(), -180.0);\n          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double qryEastWidth = qryEastRight - qryEastLeft;\n          if (qryEastWidth > 0) {\n            width = qryEastWidth;\n          }\n        }\n      }\n    } else { // queries that do not cross the date line\n\n      if (target.getCrossesDateLine()) {\n        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());\n        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);\n        double tgtWestWidth = tgtWestRight - tgtWestLeft;\n        if (tgtWestWidth > 0) {\n          width = tgtWestWidth;\n        } else {\n          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);\n          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());\n          double tgtEastWidth = tgtEastRight - tgtEastLeft;\n          if (tgtEastWidth > 0) {\n            width = tgtEastWidth;\n          }\n        }\n      } else {\n        double left = Math.max(queryExtent.getMinX(), target.getMinX());\n        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());\n        width = right - left;\n      }\n    }\n\n\n    // calculate the score\n    if ((width > 0) && (height > 0)) {\n      double intersectionArea = width * height;\n      double queryRatio = intersectionArea / queryArea;\n      double targetRatio = intersectionArea / targetArea;\n      double queryFactor = Math.pow(queryRatio, queryPower);\n      double targetFactor = Math.pow(targetRatio, targetPower);\n      score = queryFactor * targetFactor * 10000.0;\n\n      if (exp!=null) {\n//        StringBuilder sb = new StringBuilder();\n//        sb.append(\"\\nscore=\").append(score);\n//        sb.append(\"\\n  query=\").append();\n//        sb.append(\"\\n  target=\").append(target.toString());\n//        sb.append(\"\\n  intersectionArea=\").append(intersectionArea);\n//        \n//        sb.append(\" queryArea=\").append(queryArea).append(\" targetArea=\").append(targetArea);\n//        sb.append(\"\\n  queryRatio=\").append(queryRatio).append(\" targetRatio=\").append(targetRatio);\n//        sb.append(\"\\n  queryFactor=\").append(queryFactor).append(\" targetFactor=\").append(targetFactor);\n//        sb.append(\" (queryPower=\").append(queryPower).append(\" targetPower=\").append(targetPower).append(\")\");\n        \n        exp.setValue((float)score);\n        exp.setDescription(this.getClass().getSimpleName());\n        \n        Explanation e = null;\n        \n        exp.addDetail( e = new Explanation((float)intersectionArea, \"IntersectionArea\") );\n        e.addDetail(new Explanation((float)width,  \"width; Query: \"+queryExtent.toString()));\n        e.addDetail(new Explanation((float)height, \"height; Target: \"+target.toString()));\n\n        exp.addDetail( e = new Explanation((float)queryFactor, \"Query\") );\n        e.addDetail(new Explanation((float)queryArea, \"area\"));\n        e.addDetail(new Explanation((float)queryRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)queryPower, \"power\"));\n\n        exp.addDetail( e = new Explanation((float)targetFactor, \"Target\") );\n        e.addDetail(new Explanation((float)targetArea, \"area\"));\n        e.addDetail(new Explanation((float)targetRatio, \"ratio\"));\n        e.addDetail(new Explanation((float)targetPower, \"power\"));\n      }\n    }\n    else if(exp !=null) {\n      exp.setValue(0);\n      exp.setDescription(\"Shape does not intersect\");\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ebd6f706eb59fe367493c820daeccd76587ec6bf"],"da956410d7a790f567af4e7e94584fb0930212f2":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ebd6f706eb59fe367493c820daeccd76587ec6bf"],"da956410d7a790f567af4e7e94584fb0930212f2":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["fe33227f6805edab2036cbb80645cc4e2d1fa424","da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}