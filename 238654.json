{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(LogMergePolicy).mjava","commits":[{"id":"c7211b1fba79597955a78855e9f646de9248ca57","date":1345763711,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(LogMergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSetters(LogMergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(LogMergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSetters(LogMergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(LogMergePolicy).mjava","sourceNew":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  private void assertSetters(LogMergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7211b1fba79597955a78855e9f646de9248ca57"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["c7211b1fba79597955a78855e9f646de9248ca57"],"c7211b1fba79597955a78855e9f646de9248ca57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","c7211b1fba79597955a78855e9f646de9248ca57"],"c7211b1fba79597955a78855e9f646de9248ca57":["001b25b42373b22a52f399dbf072f1224632e8e6","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}