{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws Exception {\n    String field = \"content\";\n    String oldDefaultField = getDefaultField();\n    setDefaultField(field);\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = getQuery(queryString,qp);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = getQuery(qtxt,qp);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws Exception {\n    String field = \"content\";\n    String oldDefaultField = getDefaultField();\n    setDefaultField(field);\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = getQuery(queryString,qp);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = getQuery(qtxt,qp);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws Exception {\n    String field = \"content\";\n    String oldDefaultField = getDefaultField();\n    setDefaultField(field);\n    CommonQueryParserConfiguration qp = getParserConfig(new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = getQuery(queryString,qp);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = getQuery(qtxt,qp);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random()));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}