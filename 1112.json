{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            // boolean values in the index are encoded with the\n            // chars T/F\n            if (string.equals(\"T\")) {\n              return 1;\n            }\n            if (string.equals(\"F\")) {\n              return 0;\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            // boolean values in the index are encoded with the\n            // chars T/F\n            if (string.equals(\"T\")) {\n              return 1;\n            }\n            if (string.equals(\"F\")) {\n              return 0;\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","sourceNew":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            if (string.length() == 1) {\n              // boolean values in the index are encoded with the\n              // a single char contained in TRUE_TOKEN or FALSE_TOKEN\n              // (see BoolField)\n              if (string.charAt(0) == BoolField.TRUE_TOKEN[0]) {\n                return 1;\n              }\n              if (string.charAt(0) == BoolField.FALSE_TOKEN[0]) {\n                return 0;\n              }\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","sourceOld":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            // boolean values in the index are encoded with the\n            // chars T/F\n            if (string.equals(\"T\")) {\n              return 1;\n            }\n            if (string.equals(\"F\")) {\n              return 0;\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/FieldValueFeature.FieldValueFeatureWeight.FieldValueFeatureScorer#score().mjava","sourceNew":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            if (string.length() == 1) {\n              // boolean values in the index are encoded with the\n              // a single char contained in TRUE_TOKEN or FALSE_TOKEN\n              // (see BoolField)\n              if (string.charAt(0) == BoolField.TRUE_TOKEN[0]) {\n                return 1;\n              }\n              if (string.charAt(0) == BoolField.FALSE_TOKEN[0]) {\n                return 0;\n              }\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","sourceOld":"      @Override\n      public float score() throws IOException {\n\n        try {\n          final Document document = context.reader().document(itr.docID(),\n              fieldAsSet);\n          final IndexableField indexableField = document.getField(field);\n          if (indexableField == null) {\n            return getDefaultValue();\n          }\n          final Number number = indexableField.numericValue();\n          if (number != null) {\n            return number.floatValue();\n          } else {\n            final String string = indexableField.stringValue();\n            // boolean values in the index are encoded with the\n            // chars T/F\n            if (string.equals(\"T\")) {\n              return 1;\n            }\n            if (string.equals(\"F\")) {\n              return 0;\n            }\n          }\n        } catch (final IOException e) {\n          throw new FeatureException(\n              e.toString() + \": \" +\n                  \"Unable to extract feature for \"\n                  + name, e);\n        }\n        return getDefaultValue();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ef8d46ad3265812d247126beb45b283763afee"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}