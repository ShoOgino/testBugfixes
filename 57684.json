{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      LightAutomaton la = BasicOperations.determinize(a);\n      LightAutomaton lb = BasicOperations.determinize(MinimizationOperationsLight.minimize(a));\n      assertTrue(BasicOperations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      LightAutomaton la = BasicOperations.determinize(BasicOperations.removeDeadStates(a));\n      LightAutomaton lb = MinimizationOperationsLight.minimize(a);\n      assertTrue(BasicOperations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      LightAutomaton la = BasicOperations.determinize(a);\n      LightAutomaton lb = BasicOperations.determinize(MinimizationOperationsLight.minimize(a));\n      assertTrue(BasicOperations.sameLanguage(la, lb));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a));\n      Automaton lb = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      LightAutomaton la = BasicOperations.determinize(BasicOperations.removeDeadStates(a));\n      LightAutomaton lb = MinimizationOperationsLight.minimize(a);\n      assertTrue(BasicOperations.sameLanguage(la, lb));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#test().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a));\n      Automaton lb = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void test() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      Automaton lb = MinimizationOperations.minimize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a));\n      Automaton lb = MinimizationOperations.minimize(a);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c69b0e51e02e191025c0417fcecfd32205f5d45","date":1415272618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testBasic().mjava","sourceNew":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a),\n        Integer.MAX_VALUE);\n      Automaton lb = MinimizationOperations.minimize(a,\n        Integer.MAX_VALUE);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","sourceOld":"  /** the minimal and non-minimal are compared to ensure they are the same. */\n  public void testBasic() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton la = Operations.determinize(Operations.removeDeadStates(a),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      Automaton lb = MinimizationOperations.minimize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(la, lb));\n    }\n  }\n\n","bugFix":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c69b0e51e02e191025c0417fcecfd32205f5d45"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}