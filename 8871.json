{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","sourceNew":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","sourceNew":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","sourceNew":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","sourceNew":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLat, cell.maxLat, cell.minLon, cell.maxLon, centerLat, centerLon, radiusMeters, false)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLat, root.maxLat, root.minLon, root.maxLon,\n                                               cell.minLat, cell.maxLat, cell.minLon, cell.maxLon)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLat, cell.maxLat, cell.minLon, cell.maxLon,\n                                                      centerLat, centerLon, radiusMeters, false)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat, centerLon, centerLat, radiusMeters)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLon, root.minLat, root.maxLon, root.maxLat,\n                                       cell.minLon, cell.minLat, cell.maxLon, cell.maxLat)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLon, cell.minLat, cell.maxLon, cell.maxLat,\n                                              centerLon, centerLat, radiusMeters)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#findMatches(Set[Integer],PrintWriter,Cell,double,double,double,double[],double[]).mjava","sourceNew":null,"sourceOld":"  private void findMatches(Set<Integer> hits, PrintWriter log, Cell root,\n                           double centerLon, double centerLat, double radiusMeters,\n                           double[] docLons, double[] docLats) {\n\n    if (VERBOSE) {\n      log.println(\"  root cell: \" + root);\n    }\n\n    List<Cell> queue = new ArrayList<>();\n    queue.add(root);\n\n    int recurseDepth = RandomInts.randomIntBetween(random(), 5, 15);\n\n    while (queue.size() > 0) {\n      Cell cell = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n      if (VERBOSE) {\n        log.println(\"  cycle: \" + cell + \" queue.size()=\" + queue.size());\n      }\n\n      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {\n        if (VERBOSE) {\n          log.println(\"    leaf\");\n        }\n        // Leaf cell: brute force check all docs that fall within this cell:\n        for(int docID=0;docID<docLons.length;docID++) {\n          if (cell.contains(docLons[docID], docLats[docID])) {\n            double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, docLats[docID], docLons[docID]);\n            if (distanceMeters <= radiusMeters) {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": match!\");\n              }\n              hits.add(docID);\n            } else {\n              if (VERBOSE) {\n                log.println(\"    check doc=\" + docID + \": no match\");\n              }\n            }\n          }\n        }\n      } else {\n\n        if (GeoRelationUtils.rectWithinCircle(cell.minLat, cell.maxLat, cell.minLon, cell.maxLon, centerLat, centerLon, radiusMeters, false)) {\n          // Query circle fully contains this cell, just addAll:\n          if (VERBOSE) {\n            log.println(\"    circle fully contains cell: now addAll\");\n          }\n          for(int docID=0;docID<docLons.length;docID++) {\n            if (cell.contains(docLons[docID], docLats[docID])) {\n              if (VERBOSE) {\n                log.println(\"    addAll doc=\" + docID);\n              }\n              hits.add(docID);\n            }\n          }\n          continue;\n        } else if (GeoRelationUtils.rectWithin(root.minLat, root.maxLat, root.minLon, root.maxLon,\n                                               cell.minLat, cell.maxLat, cell.minLon, cell.maxLon)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell fully contains circle: keep splitting\");\n          }\n        } else if (GeoRelationUtils.rectCrossesCircle(cell.minLat, cell.maxLat, cell.minLon, cell.maxLon,\n                                                      centerLat, centerLon, radiusMeters, false)) {\n          // Fall through below to \"recurse\"\n          if (VERBOSE) {\n            log.println(\"    cell overlaps circle: keep splitting\");\n          }\n        } else {\n          if (VERBOSE) {\n            log.println(\"    no overlap: drop this cell\");\n            for(int docID=0;docID<docLons.length;docID++) {\n              if (cell.contains(docLons[docID], docLats[docID])) {\n                if (VERBOSE) {\n                  log.println(\"    skip doc=\" + docID);\n                }\n              }\n            }\n          }\n          continue;\n        }\n          \n        // Randomly split:\n        if (random().nextBoolean()) {\n\n          // Split on lon:\n          double splitValue = cell.minLon + (cell.maxLon - cell.minLon) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lon=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                splitValue, cell.maxLat,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                splitValue, cell.minLat,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cell1: \" + cell1);\n            log.println(\"    split cell2: \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        } else {\n\n          // Split on lat:\n          double splitValue = cell.minLat + (cell.maxLat - cell.minLat) * random().nextDouble();\n          if (VERBOSE) {\n            log.println(\"    now split on lat=\" + splitValue);\n          }\n          Cell cell1 = new Cell(cell,\n                                cell.minLon, cell.minLat,\n                                cell.maxLon, splitValue,\n                                cell.splitCount+1);\n          Cell cell2 = new Cell(cell,\n                                cell.minLon, splitValue,\n                                cell.maxLon, cell.maxLat,\n                                cell.splitCount+1);\n          if (VERBOSE) {\n            log.println(\"    split cells:\\n      \" + cell1 + \"\\n      \" + cell2);\n          }\n          queue.add(cell1);\n          queue.add(cell2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}