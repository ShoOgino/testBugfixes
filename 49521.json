{"path":"src/java/org/apache/lucene/search/RangeTermEnum#RangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeTermEnum#RangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public RangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field;\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    setEnum(reader.terms(new Term(this.field, this.lowerTermText)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cf50d425f7279e262a8d6be16253e72b8d898c2","date":1226483019,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeTermEnum#RangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeTermEnum#RangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public RangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field;\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public RangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field;\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    setEnum(reader.terms(new Term(this.field, this.lowerTermText)));\n  }\n\n","bugFix":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeTermEnum#RangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field.intern();\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public RangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field;\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7cf50d425f7279e262a8d6be16253e72b8d898c2":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["7cf50d425f7279e262a8d6be16253e72b8d898c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}