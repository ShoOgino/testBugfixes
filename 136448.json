{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,int,int).mjava","commits":[{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,char,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, char affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,int,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26c5ee01d8657497f54f46447208768acc949d51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26c5ee01d8657497f54f46447208768acc949d51","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}