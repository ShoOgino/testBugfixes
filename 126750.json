{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 10;\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + (System.currentTimeMillis() - addFieldTime) + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded.  \" + msg;\n              }\n              fail(msg);\n            }\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a83f7819a66e4ad81c7d38c8a4ad40bd288da","date":1366660443,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 20;\n      long retryPauseMillis = 10;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","sourceOld":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 10;\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + (System.currentTimeMillis() - addFieldTime) + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded.  \" + msg;\n              }\n              fail(msg);\n            }\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84778336706c4554085100e236155746317c481d","date":1381714963,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 20;\n      long retryPauseMillis = 20;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","sourceOld":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 20;\n      long retryPauseMillis = 10;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6167cb723e06e56780d31b7b63d5b27783a66ae0","date":1393812436,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 40;\n      long retryPauseMillis = 20;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","sourceOld":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 20;\n      long retryPauseMillis = 20;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, but do it fast enough\n    // and verify shards' schemas after all of them are added\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n\n    for (int i = 1 ; i <= numFields ; ++i) {\n      String newFieldName = \"newfield\" + i;\n      for (RestTestHarness client : restTestHarnesses) {\n        String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n        String response = client.query(request);\n        String result = client.validateXPath(response,\n                                      \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                      \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n        if (null != result) {\n          if (response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n            String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n            log.error(msg);\n            fail(msg);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override                                                                                                                 \n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, and verify each is present in all shards' schemas\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      final long addFieldTime = System.currentTimeMillis(); \n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n        \n      int maxAttempts = 40;\n      long retryPauseMillis = 20;\n\n      for (RestTestHarness client : restTestHarnesses) {\n        boolean stillTrying = true;\n        for (int attemptNum = 1; stillTrying && attemptNum <= maxAttempts ; ++attemptNum) {\n          request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n          response = client.query(request);\n          long elapsedTimeMillis = System.currentTimeMillis() - addFieldTime;\n          result = client.validateXPath(response,\n                                        \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                        \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n          if (null == result) {\n            stillTrying = false;\n            if (attemptNum > 1) {\n              log.info(\"On attempt #\" + attemptNum + \", successful request \" + request + \" against server \"\n                      + client.getBaseURL() + \" after \" + elapsedTimeMillis + \" ms\");\n            }\n          } else {\n            if (attemptNum == maxAttempts || ! response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n              String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n              if (attemptNum == maxAttempts) {\n                msg = \"Max retry count \" + maxAttempts + \" exceeded after \" + elapsedTimeMillis +\" ms.  \" + msg;\n              }\n              log.error(msg);\n              fail(msg);\n            }\n            Thread.sleep(retryPauseMillis);\n          }\n        }\n      }\n    }\n    \n    // Add a doc with one of the newly created fields\n    String fieldName = \"newfield\" + (r.nextInt(numFields) + 1);\n    \n    int addDocClientNum = r.nextInt(restTestHarnesses.size());\n    RestTestHarness client = restTestHarnesses.get(addDocClientNum);\n    String updateResult = client.validateUpdate(adoc(fieldName, \"word1 word2\", \"id\", \"88\"));\n    assertNull(\"Error adding a document with field \" + fieldName + \": \" + updateResult, updateResult);\n    updateResult = client.validateUpdate(BaseTestHarness.commit());\n    assertNull(\"Error committing: \" + updateResult, updateResult);\n    \n    // Query for the newly added doc against a different client\n    int queryDocClientNum = r.nextInt(restTestHarnesses.size());\n    while (queryDocClientNum == addDocClientNum) {\n      queryDocClientNum = r.nextInt(restTestHarnesses.size()); \n    }\n    client = restTestHarnesses.get(queryDocClientNum);\n    String response = client.query(\"/select?q=\" + fieldName + \":word2\");\n    String queryResult = client.validateXPath(response,\n                                              \"/response/result[@name='response'][@numFound='1']\",\n                                              \"count(/response/result[@name='response']/doc/int[@name='id']) = 1\",\n                                              \"/response/result[@name='response']/doc/int[@name='id'] = '88'\");\n    assertNull(\"Error querying for a document with field \" + fieldName + \": \" + queryResult\n              + \"  response=\" + response, queryResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b51843dd98041bc40be26a47e44d7cb49bef72","date":1403043869,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, but do it fast enough\n    // and verify shards' schemas after all of them are added\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n\n    for (int i = 1 ; i <= numFields ; ++i) {\n      String newFieldName = \"newfield\" + i;\n      for (RestTestHarness client : restTestHarnesses) {\n        String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n        String response = client.query(request);\n        String result = client.validateXPath(response,\n                                      \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                      \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n        if (null != result) {\n          if (response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n            String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n            log.error(msg);\n            fail(msg);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaAddField#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First. add a bunch of fields, but do it fast enough\n    // and verify shards' schemas after all of them are added\n    int numFields = 25;\n    for (int i = 1 ; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      String newFieldName = \"newfield\" + i;\n      final String content = \"{\\\"type\\\":\\\"text\\\",\\\"stored\\\":\\\"false\\\"}\";\n      String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";             \n      String response = publisher.put(request, content);\n      String result = publisher.validateXPath\n          (response, \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\");\n      if (null != result) {\n        fail(\"PUT REQUEST FAILED: xpath=\" + result + \"  request=\" + request \n            + \"  content=\" + content + \"  response=\" + response);\n      }\n    }\n    \n    Thread.sleep(100000);\n\n    for (int i = 1 ; i <= numFields ; ++i) {\n      String newFieldName = \"newfield\" + i;\n      for (RestTestHarness client : restTestHarnesses) {\n        String request = \"/schema/fields/\" + newFieldName + \"?wt=xml\";\n        String response = client.query(request);\n        String result = client.validateXPath(response,\n                                      \"/response/lst[@name='responseHeader']/int[@name='status'][.='0']\",\n                                      \"/response/lst[@name='field']/str[@name='name'][.='\" + newFieldName + \"']\");\n        if (null != result) {\n          if (response.contains(\"Field '\" + newFieldName + \"' not found.\")) {\n            String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n            log.error(msg);\n            fail(msg);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["6167cb723e06e56780d31b7b63d5b27783a66ae0"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"84778336706c4554085100e236155746317c481d":["bd7a83f7819a66e4ad81c7d38c8a4ad40bd288da"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","24b51843dd98041bc40be26a47e44d7cb49bef72"],"bd7a83f7819a66e4ad81c7d38c8a4ad40bd288da":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6167cb723e06e56780d31b7b63d5b27783a66ae0":["84778336706c4554085100e236155746317c481d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24b51843dd98041bc40be26a47e44d7cb49bef72"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["24b51843dd98041bc40be26a47e44d7cb49bef72","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84778336706c4554085100e236155746317c481d":["6167cb723e06e56780d31b7b63d5b27783a66ae0"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"bd7a83f7819a66e4ad81c7d38c8a4ad40bd288da":["84778336706c4554085100e236155746317c481d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"6167cb723e06e56780d31b7b63d5b27783a66ae0":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"08970e5b8411182a29412c177eff67ec1110095b":["bd7a83f7819a66e4ad81c7d38c8a4ad40bd288da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}