{"path":"src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8947e80c99c30e420e62450ea9f4eea419591af5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8947e80c99c30e420e62450ea9f4eea419591af5","date":1252497101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8947e80c99c30e420e62450ea9f4eea419591af5":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8947e80c99c30e420e62450ea9f4eea419591af5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"8947e80c99c30e420e62450ea9f4eea419591af5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["8947e80c99c30e420e62450ea9f4eea419591af5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}