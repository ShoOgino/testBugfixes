{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":["936f1eae75daf11568fe1480aec9e06d2ef55367"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final StoredDocument document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final StoredDocument document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final StoredDocument document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiBits#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}