{"path":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,Searcher).mjava","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(ScoreDoc[] hits, int expectedCount, Searcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n      Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if (i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if (i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if (i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if ( i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#checkHits(ScoreDoc[],int,IndexSearcher).mjava","sourceNew":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if (i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(ScoreDoc[] hits, int expectedCount, IndexSearcher searcher) throws IOException {\n    assertEquals(\"total results\", expectedCount, hits.length);\n    for (int i = 0 ; i < hits.length; i++) {\n      if (i < 10 || (i > 94 && i < 105) ) {\n        Document d = searcher.doc(hits[i].doc);\n        assertEquals(\"check \" + i, String.valueOf(i), d.get(ID_FIELD));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c19f985e36a65cc969e8e564fe337a0d41512075":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","c19f985e36a65cc969e8e564fe337a0d41512075"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}