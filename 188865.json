{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","sourceNew":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"/dev/null","sourceNew":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","sourceNew":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","sourceNew":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,Replica> shards = slice.getReplicasMap();\n        Set<Entry<String,Replica>> shardsEntries = shards.entrySet();\n        for (Entry<String,Replica> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","sourceNew":null,"sourceOld":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,Replica> shards = slice.getReplicasMap();\n        Set<Entry<String,Replica>> shardsEntries = shards.entrySet();\n        for (Entry<String,Replica> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","sourceNew":null,"sourceOld":"  private void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,Replica> shards = slice.getReplicasMap();\n        Set<Entry<String,Replica>> shardsEntries = shards.entrySet();\n        for (Entry<String,Replica> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"fa64435b5902ce266c23755a4a00691a3285dab8":["da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a558d54519c651068ddb202f03befefb1514a7"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}