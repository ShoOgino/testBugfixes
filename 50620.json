{"path":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}