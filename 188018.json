{"path":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e361b17a364c1ec5e1ddd0e4fc268d04824ec75d","date":1308485715,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f902dca0fec763317e17fa91ff6543fc8120c609","date":1308553979,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findForcedMerges: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"f902dca0fec763317e17fa91ff6543fc8120c609":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e361b17a364c1ec5e1ddd0e4fc268d04824ec75d"],"e361b17a364c1ec5e1ddd0e4fc268d04824ec75d":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["e361b17a364c1ec5e1ddd0e4fc268d04824ec75d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f902dca0fec763317e17fa91ff6543fc8120c609"],"f902dca0fec763317e17fa91ff6543fc8120c609":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"e361b17a364c1ec5e1ddd0e4fc268d04824ec75d":["f902dca0fec763317e17fa91ff6543fc8120c609","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e361b17a364c1ec5e1ddd0e4fc268d04824ec75d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f902dca0fec763317e17fa91ff6543fc8120c609","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}