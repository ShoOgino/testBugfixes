{"path":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n    Deque<Long> versions = new ArrayDeque<>();\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n    assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n    h.close();\n    createCore();\n    // Solr should kick this off now\n    // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n    // verify that previous close didn't do a commit\n    // recovery should be blocked by our hook\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n    // unblock recovery\n    logReplay.release(1000);\n\n    // wait until recovery has finished\n    assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n    // The transaction log should have written a commit and close its output stream\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    assertEquals(0, ulog.logs.peekLast().refcount.get());\n    assertNull(ulog.logs.peekLast().channel);\n\n    ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n    assertTrue(ulog.logs.peekLast().endsWithCommit());\n    ulog.logs.peekLast().decref();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1cc77c3d7d8fe1abfa812b65f9734e6f8d2534f","date":1438493185,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","sourceNew":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n    Deque<Long> versions = new ArrayDeque<>();\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n    versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n    assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n    h.close();\n    createCore();\n    // Solr should kick this off now\n    // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n    // verify that previous close didn't do a commit\n    // recovery should be blocked by our hook\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n    // unblock recovery\n    logReplay.release(1000);\n\n    // wait until recovery has finished\n    assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n    // The transaction log should have written a commit and close its output stream\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    assertEquals(0, ulog.logs.peekLast().refcount.get());\n    assertNull(ulog.logs.peekLast().channel);\n\n    ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n    assertTrue(ulog.logs.peekLast().endsWithCommit());\n    ulog.logs.peekLast().decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","sourceNew":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","sourceNew":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      TestInjection.skipIndexWriterCommitOnClose = false; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testClosingOutputStreamAfterLogReplay().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check that the output stream of an uncapped tlog is correctly reopen\n   * and that the commit is written during recovery.\n   */\n  @Test\n  public void testClosingOutputStreamAfterLogReplay() throws Exception {\n    this.clearCore();\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      assertJQ(req(\"qt\", \"/get\", \"getVersions\", \"\" + versions.size()), \"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==3\");\n\n      // The transaction log should have written a commit and close its output stream\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      assertEquals(0, ulog.logs.peekLast().refcount.get());\n      assertNull(ulog.logs.peekLast().channel);\n\n      ulog.logs.peekLast().incref(); // reopen the output stream to check if its ends with a commit\n      assertTrue(ulog.logs.peekLast().endsWithCommit());\n      ulog.logs.peekLast().decref();\n    } finally {\n      TestInjection.skipIndexWriterCommitOnClose = false; // reset\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1cc77c3d7d8fe1abfa812b65f9734e6f8d2534f":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"3a0c04b71951333291abc7f317109a6a5957bd28":["f1cc77c3d7d8fe1abfa812b65f9734e6f8d2534f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["f1cc77c3d7d8fe1abfa812b65f9734e6f8d2534f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"f1cc77c3d7d8fe1abfa812b65f9734e6f8d2534f":["3a0c04b71951333291abc7f317109a6a5957bd28"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}