{"path":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#testRandom(int,int).mjava","commits":[{"id":"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07","date":1464190764,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#testRandom(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRandom(int commonPrefixLen, int maxLen) {\n    byte[] commonPrefix = new byte[commonPrefixLen];\n    random().nextBytes(commonPrefix);\n    final int len = random().nextInt(100000);\n    BytesRef[] bytes = new BytesRef[len + random().nextInt(50)];\n    for (int i = 0; i < len; ++i) {\n      byte[] b = new byte[commonPrefixLen + random().nextInt(maxLen)];\n      random().nextBytes(b);\n      System.arraycopy(commonPrefix, 0, b, 0, commonPrefixLen);\n      bytes[i] = new BytesRef(b);\n    }\n    test(bytes, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#testRandom(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRandom(int commonPrefixLen, int maxLen) {\n    byte[] commonPrefix = new byte[commonPrefixLen];\n    random().nextBytes(commonPrefix);\n    final int len = random().nextInt(100000);\n    BytesRef[] bytes = new BytesRef[len + random().nextInt(50)];\n    for (int i = 0; i < len; ++i) {\n      byte[] b = new byte[commonPrefixLen + random().nextInt(maxLen)];\n      random().nextBytes(b);\n      System.arraycopy(commonPrefix, 0, b, 0, commonPrefixLen);\n      bytes[i] = new BytesRef(b);\n    }\n    test(bytes, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#testRandom(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRandom(int commonPrefixLen, int maxLen) {\n    byte[] commonPrefix = new byte[commonPrefixLen];\n    random().nextBytes(commonPrefix);\n    final int len = random().nextInt(100000);\n    BytesRef[] bytes = new BytesRef[len + random().nextInt(50)];\n    for (int i = 0; i < len; ++i) {\n      byte[] b = new byte[commonPrefixLen + random().nextInt(maxLen)];\n      random().nextBytes(b);\n      System.arraycopy(commonPrefix, 0, b, 0, commonPrefixLen);\n      bytes[i] = new BytesRef(b);\n    }\n    test(bytes, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#testRandom(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRandom(int commonPrefixLen, int maxLen) {\n    byte[] commonPrefix = new byte[commonPrefixLen];\n    random().nextBytes(commonPrefix);\n    final int len = random().nextInt(100000);\n    BytesRef[] bytes = new BytesRef[len + random().nextInt(50)];\n    for (int i = 0; i < len; ++i) {\n      byte[] b = new byte[commonPrefixLen + random().nextInt(maxLen)];\n      random().nextBytes(b);\n      System.arraycopy(commonPrefix, 0, b, 0, commonPrefixLen);\n      bytes[i] = new BytesRef(b);\n    }\n    test(bytes, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fad46319f3d6c1d3e0aa6838a968a25b8fbef07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","4fad46319f3d6c1d3e0aa6838a968a25b8fbef07","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}