{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void fireListeners(String trigger, TriggerEvent event, AutoScaling.EventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == AutoScaling.EventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == AutoScaling.EventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (!listener.isEnabled()) {\n            continue;\n          }\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (!listener.isEnabled()) {\n            continue;\n          }\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener {}\", listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (!listener.isEnabled()) {\n            continue;\n          }\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener \" + listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#fireListeners(String,TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":null,"sourceOld":"    void fireListeners(String trigger, TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                       ActionContext context, Throwable error, String message) {\n      updateLock.lock();\n      try {\n        for (TriggerListener listener : getTriggerListeners(trigger, stage)) {\n          if (!listener.isEnabled()) {\n            continue;\n          }\n          if (actionName != null) {\n            AutoScalingConfig.TriggerListenerConfig config = listener.getConfig();\n            if (stage == TriggerEventProcessorStage.BEFORE_ACTION) {\n              if (!config.beforeActions.contains(actionName)) {\n                continue;\n              }\n            } else if (stage == TriggerEventProcessorStage.AFTER_ACTION) {\n              if (!config.afterActions.contains(actionName)) {\n                continue;\n              }\n            }\n          }\n          try {\n            listener.onEvent(event, stage, actionName, context, error, message);\n          } catch (Exception e) {\n            log.warn(\"Exception running listener {}\", listener.getConfig(), e);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}