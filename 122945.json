{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Transition.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Transition.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Transition.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Transition.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          LightAutomaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            LightAutomaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Transition.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Transition.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          LightAutomaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            LightAutomaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Transition.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Transition.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: \").append(initial).append(\"\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = maxInterval;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \").append(i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \" + i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#toString().mjava","sourceNew":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \").append(i);\n      if (accept.get(i)) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a string representation of this automaton.\n   */\n  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"initial state: 0\\n\");\n    for (int i = 0; i < size; i++) {\n      b.append(\"state \").append(i);\n      if (accept[i]) b.append(\" [accept]:\\n\");\n      else b.append(\" [reject]:\\n\");\n      for (int j = 0; j < points.length; j++) {\n        int k = transitions[i * points.length + j];\n        if (k != -1) {\n          int min = points[j];\n          int max;\n          if (j + 1 < points.length) max = (points[j + 1] - 1);\n          else max = alphabetSize;\n          b.append(\" \");\n          Automaton.appendCharString(min, b);\n          if (min != max) {\n            b.append(\"-\");\n            Automaton.appendCharString(max, b);\n          }\n          b.append(\" -> \").append(k).append(\"\\n\");\n        }\n      }\n    }\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["5c84485629d80d203608e8975a1139de9933cc38"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c84485629d80d203608e8975a1139de9933cc38","b7543e96e2d4820e09334d36a699b998ed963f4f"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b7543e96e2d4820e09334d36a699b998ed963f4f","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["2ffe681f212e5073c69955b4ad22946794c84940"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}