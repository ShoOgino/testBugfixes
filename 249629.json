{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","commits":[{"id":"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","date":1452119871,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","sourceNew":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","sourceOld":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","bugFix":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","sourceNew":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","sourceOld":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testMixedCompressionMode().mjava","sourceNew":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","sourceOld":"  public void testMixedCompressionMode() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"1\", \"text\", \"foo bar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_COMPRESSION\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"2\", \"text\", \"foo zar\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_COMPRESSION\", h.getCore());\n    System.setProperty(\"tests.COMPRESSION_MODE\", \"BEST_SPEED\");\n    h.getCoreContainer().reload(h.coreName);\n    assertU(add(doc(\"string_f\", \"3\", \"text\", \"foo zoo\")));\n    assertU(commit());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    assertQ(req(\"q\", \"*:*\"), \n        \"//*[@numFound='3']\");\n    assertQ(req(\"q\", \"text:foo\"), \n        \"//*[@numFound='3']\");\n    assertU(optimize());\n    assertCompressionMode(\"BEST_SPEED\", h.getCore());\n    System.clearProperty(\"tests.COMPRESSION_MODE\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}