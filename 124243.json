{"path":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b70f41527ff64892879254f8946bc498eadbc0","date":1322416359,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          System.out.println(\"FAIL: unexpected exc\");\n          e.printStackTrace(System.out);\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716c86307469c3eb41b398f0e35270925e6535fb","date":1322673259,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          System.out.println(\"FAIL: unexpected exc\");\n          e.printStackTrace(System.out);\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          System.out.println(\"FAIL: unexpected exc\");\n          e.printStackTrace(System.out);\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          System.out.println(\"FAIL: unexpected exc\");\n          e.printStackTrace(System.out);\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          System.out.println(\"FAIL: unexpected exc\");\n          e.printStackTrace(System.out);\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["716c86307469c3eb41b398f0e35270925e6535fb"],"716c86307469c3eb41b398f0e35270925e6535fb":["13b70f41527ff64892879254f8946bc498eadbc0"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["568cba246a11f491637ba492f881589c2142667c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["716c86307469c3eb41b398f0e35270925e6535fb","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13b70f41527ff64892879254f8946bc498eadbc0":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"716c86307469c3eb41b398f0e35270925e6535fb":["568cba246a11f491637ba492f881589c2142667c","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["13b70f41527ff64892879254f8946bc498eadbc0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"13b70f41527ff64892879254f8946bc498eadbc0":["716c86307469c3eb41b398f0e35270925e6535fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}