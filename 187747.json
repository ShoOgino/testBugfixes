{"path":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n      StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      StandardTermsIndexReader indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n      StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      StandardTermsIndexReader indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n      StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      StandardTermsIndexReader indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                         state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         pulsingReader,\n                                                         state.readBufferSize,\n                                                         reverseUnicodeComparator,\n                                                         StandardCodec.TERMS_CACHE_SIZE,\n                                                         state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n      PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n      // Terms dict index reader\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                         state.fieldInfos,\n                                                         state.segmentInfo.name,\n                                                         state.termsIndexDivisor,\n                                                         reverseUnicodeComparator,\n                                                         state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingReader.close();\n        }\n      }\n\n      // Terms dict reader\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  pulsingReader,\n                                                  state.readBufferSize,\n                                                  reverseUnicodeComparator,\n                                                  StandardCodec.TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}