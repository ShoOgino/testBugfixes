{"path":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","commits":[{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","pathOld":"/dev/null","sourceNew":"  final void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","sourceNew":"  /**\n   * Assumes the field is not storing term vectors \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    int j = 0;\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","sourceOld":"  final void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdbaa0a34ed5e8d47432047e7837f966aba24991","date":1091825091,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","sourceNew":"  /**\n   * Assumes the field is not storing term vectors \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","sourceOld":"  /**\n   * Assumes the field is not storing term vectors \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    int j = 0;\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","sourceNew":"  /**\n   * Assumes the fields are not storing term vectors.\n   * \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","sourceOld":"  /**\n   * Assumes the field is not storing term vectors \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","sourceNew":"  /**\n   * Assumes the fields are not storing term vectors.\n   * \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  synchronized public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","sourceOld":"  /**\n   * Assumes the fields are not storing term vectors.\n   * \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(Collection[String],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(Collection,boolean).mjava","sourceNew":"  /**\n   * Assumes the fields are not storing term vectors.\n   * \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  synchronized public void add(Collection<String> names, boolean isIndexed) {\n    for (String name : names) {\n      add(name, isIndexed);\n    }\n  }\n\n","sourceOld":"  /**\n   * Assumes the fields are not storing term vectors.\n   * \n   * @param names The names of the fields\n   * @param isIndexed Whether the fields are indexed or not\n   * \n   * @see #add(String, boolean)\n   */\n  synchronized public void add(Collection names, boolean isIndexed) {\n    Iterator i = names.iterator();\n    while (i.hasNext()) {\n      add((String)i.next(), isIndexed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["5350389bf83287111f7760b9e3db3af8e3648474"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["bdbaa0a34ed5e8d47432047e7837f966aba24991"],"bdbaa0a34ed5e8d47432047e7837f966aba24991":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"5350389bf83287111f7760b9e3db3af8e3648474":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["bdbaa0a34ed5e8d47432047e7837f966aba24991"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["5350389bf83287111f7760b9e3db3af8e3648474"],"bdbaa0a34ed5e8d47432047e7837f966aba24991":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"5350389bf83287111f7760b9e3db3af8e3648474":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}