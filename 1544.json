{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","commits":[{"id":"6ad5fe21659ccbd1b4b08c826dd6b7d8bb7294d9","date":1392772884,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f3a55466a7b6b33788a360ed6c3aa43913e6975","date":1392830536,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","sourceNew":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n\n    // '_' is in \\p{WB:ExtendNumLet}\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A:B\", new String[] { \"A:B_A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A::B\", new String[] { \"A:B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1.2\", new String[] { \"1.2_1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A.B\", new String[] { \"A.B_A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1..2\", new String[] { \"1.2_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A..B\", new String[] { \"A.B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,2\", new String[] { \"1,2_1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,,2\", new String[] { \"1,2_1\", \"2\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A.:B\", new String[] { \"C_A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A:.B\", new String[] { \"C_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1,.2\", new String[] { \"3_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1.,2\", new String[] { \"3_1\", \"2\" });\n  }\n\n","sourceOld":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a5e37a1dee5ad8d3fe6d55228839d5d0412999","date":1412798723,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testMid().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","sourceNew":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n\n    // '_' is in \\p{WB:ExtendNumLet}\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A:B\", new String[] { \"A:B_A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A::B\", new String[] { \"A:B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1.2\", new String[] { \"1.2_1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A.B\", new String[] { \"A.B_A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1..2\", new String[] { \"1.2_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A..B\", new String[] { \"A.B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,2\", new String[] { \"1,2_1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,,2\", new String[] { \"1,2_1\", \"2\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A.:B\", new String[] { \"C_A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A:.B\", new String[] { \"C_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1,.2\", new String[] { \"3_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1.,2\", new String[] { \"3_1\", \"2\" });\n  }\n\n","sourceOld":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n\n    // '_' is in \\p{WB:ExtendNumLet}\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A:B\", new String[] { \"A:B_A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A::B\", new String[] { \"A:B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1.2\", new String[] { \"1.2_1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A.B\", new String[] { \"A.B_A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1..2\", new String[] { \"1.2_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A..B\", new String[] { \"A.B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,2\", new String[] { \"1,2_1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,,2\", new String[] { \"1,2_1\", \"2\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A.:B\", new String[] { \"C_A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A:.B\", new String[] { \"C_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1,.2\", new String[] { \"3_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1.,2\", new String[] { \"3_1\", \"2\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testMid().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testMid().mjava","sourceNew":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n\n    // '_' is in \\p{WB:ExtendNumLet}\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A:B\", new String[] { \"A:B_A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A::B\", new String[] { \"A:B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1.2\", new String[] { \"1.2_1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A.B\", new String[] { \"A.B_A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1..2\", new String[] { \"1.2_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A..B\", new String[] { \"A.B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,2\", new String[] { \"1,2_1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,,2\", new String[] { \"1,2_1\", \"2\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A.:B\", new String[] { \"C_A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A:.B\", new String[] { \"C_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1,.2\", new String[] { \"3_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1.,2\", new String[] { \"3_1\", \"2\" });\n  }\n\n","sourceOld":"  /**\n   * Multiple consecutive chars in \\p{Word_Break = MidLetter},\n   * \\p{Word_Break = MidNumLet}, and/or \\p{Word_Break = MidNum}\n   * should trigger a token split.\n   */\n  public void testMid() throws Exception {\n    // ':' is in \\p{WB:MidLetter}, which should trigger a split unless there is a Letter char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B\", new String[] { \"A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A::B\", new String[] { \"A\", \"B\" });\n\n    // '.' is in \\p{WB:MidNumLet}, which should trigger a split unless there is a Letter or Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2\", new String[] { \"1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B\", new String[] { \"A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1..2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A..B\", new String[] { \"A\", \"B\" });\n\n    // ',' is in \\p{WB:MidNum}, which should trigger a split unless there is a Numeric char on both sides\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2\", new String[] { \"1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,,2\", new String[] { \"1\", \"2\" });\n\n    // Mixed consecutive \\p{WB:MidLetter} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.:B\", new String[] { \"A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:.B\", new String[] { \"A\", \"B\" });\n\n    // Mixed consecutive \\p{WB:MidNum} and \\p{WB:MidNumLet} should trigger a split\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,.2\", new String[] { \"1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.,2\", new String[] { \"1\", \"2\" });\n\n    // '_' is in \\p{WB:ExtendNumLet}\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A:B\", new String[] { \"A:B_A:B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A:B_A::B\", new String[] { \"A:B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1.2\", new String[] { \"1.2_1.2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A.B\", new String[] { \"A.B_A.B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1.2_1..2\", new String[] { \"1.2_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"A.B_A..B\", new String[] { \"A.B_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,2\", new String[] { \"1,2_1,2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"1,2_1,,2\", new String[] { \"1,2_1\", \"2\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A.:B\", new String[] { \"C_A\", \"B\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"C_A:.B\", new String[] { \"C_A\", \"B\" });\n\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1,.2\", new String[] { \"3_1\", \"2\" });\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"3_1.,2\", new String[] { \"3_1\", \"2\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["6f3a55466a7b6b33788a360ed6c3aa43913e6975","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"6f3a55466a7b6b33788a360ed6c3aa43913e6975":["6ad5fe21659ccbd1b4b08c826dd6b7d8bb7294d9"],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["6f3a55466a7b6b33788a360ed6c3aa43913e6975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ad5fe21659ccbd1b4b08c826dd6b7d8bb7294d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a5e37a1dee5ad8d3fe6d55228839d5d0412999"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"6f3a55466a7b6b33788a360ed6c3aa43913e6975":["55980207f1977bd1463465de1659b821347e2fa8","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ad5fe21659ccbd1b4b08c826dd6b7d8bb7294d9"],"6ad5fe21659ccbd1b4b08c826dd6b7d8bb7294d9":["6f3a55466a7b6b33788a360ed6c3aa43913e6975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}