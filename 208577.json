{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testLineEncodingSameLat().mjava","commits":[{"id":"0a7c6b3c53318581ef3ddb386d90298695de120d","date":1550591901,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testLineEncodingSameLat().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLineEncodingSameLat().mjava","sourceNew":"  public void testLineEncodingSameLat() {\n    double lat = 2.0;\n    double alon = 0.0;\n    double blon = 2.0;\n    int latEnc = GeoEncodingUtils.encodeLatitude(lat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, blonEnc, latEnc, alonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, alonEnc, latEnc, blonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == alonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == blonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, blonEnc, latEnc, alonEnc, latEnc, alonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n  }\n\n","sourceOld":"  public void testLineEncodingSameLat() {\n    double lat = 2.0;\n    double alon = 0.0;\n    double blon = 2.0;\n    int latEnc = GeoEncodingUtils.encodeLatitude(lat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, blonEnc, latEnc, alonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, alonEnc, latEnc, blonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == alonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == blonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, blonEnc, latEnc, alonEnc, latEnc, alonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeEncodingTestCase#testLineEncodingSameLat().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testLineEncodingSameLat().mjava","sourceNew":"  public void testLineEncodingSameLat() {\n    double lat = 2.0;\n    double ax = 0.0;\n    double bx = 2.0;\n    int latEnc = encodeY(lat);\n    int axEnc = encodeX(ax);\n    int bxEnc = encodeX(bx);\n    byte[] b = new byte[7 * ShapeField.BYTES];\n    ShapeField.encodeTriangle(b, latEnc, axEnc, latEnc, bxEnc, latEnc, axEnc);\n    int[] encoded = new int[6];\n    ShapeField.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == axEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == bxEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == axEnc);\n    ShapeField.encodeTriangle(b, latEnc, axEnc, latEnc, axEnc, latEnc, bxEnc);\n    encoded = new int[6];\n    ShapeField.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == axEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == axEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == bxEnc);\n    ShapeField.encodeTriangle(b, latEnc, bxEnc, latEnc, axEnc, latEnc, axEnc);\n    encoded = new int[6];\n    ShapeField.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == axEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == bxEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == axEnc);\n  }\n\n","sourceOld":"  public void testLineEncodingSameLat() {\n    double lat = 2.0;\n    double alon = 0.0;\n    double blon = 2.0;\n    int latEnc = GeoEncodingUtils.encodeLatitude(lat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, blonEnc, latEnc, alonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, alonEnc, latEnc, alonEnc, latEnc, blonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == alonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == blonEnc);\n    LatLonShape.encodeTriangle(b, latEnc, blonEnc, latEnc, alonEnc, latEnc, alonEnc);\n    encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == latEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == latEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == latEnc);\n    assertTrue(encoded[5] == alonEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}