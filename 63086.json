{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","commits":[{"id":"a00c6454a5a790fb960e1a583c812bdf3e0dd813","date":1316088471,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    lookup = new FSTLookup(10, false);\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2da1197ae52a47f9d559bf916998d6626fb9a7b","date":1316275956,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(lookup.lookup(\"four\", true, 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(lookup.lookup(\"four\", true, 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    lookup = new FSTLookup(10, false);\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    lookup = new FSTLookup(10, false);\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(\"four\", 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(\"four\", 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(\"one\", 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(lookup.lookup(\"four\", true, 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(lookup.lookup(\"four\", true, 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    lookup = new FSTLookup(10, false);\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["a00c6454a5a790fb960e1a583c812bdf3e0dd813"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["e2da1197ae52a47f9d559bf916998d6626fb9a7b"],"a00c6454a5a790fb960e1a583c812bdf3e0dd813":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"]},"commit2Childs":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a00c6454a5a790fb960e1a583c812bdf3e0dd813":["e2da1197ae52a47f9d559bf916998d6626fb9a7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a00c6454a5a790fb960e1a583c812bdf3e0dd813"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}