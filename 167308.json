{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(int).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   * \n   * @param latitude\n   * @param longitude\n   * @return\n   */\n  public int bestFit(int miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    System.out.println(\"corner \"+ corner);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3b6f51785c57651e9e1864b7b883037f24541c76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(int).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   * \n   * @param latitude\n   * @param longitude\n   * @return\n   */\n  public int bestFit(int miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    System.out.println(\"corner \"+ corner);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":["3b6f51785c57651e9e1864b7b883037f24541c76"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d41c10b9c61bc826acd344f499e062fb46bc42ae"]},"commit2Childs":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}