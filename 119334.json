{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"precisionStep\", 1);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat(\"solr.TrieIntField\", is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"1\", is(equalTo(replacedFieldTypeAttributes.get(\"precisionStep\"))));\n    assertThat(\"0\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf91b76bbc05503ac96589cc801c8e65dff0e564","date":1498517395,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // a fixed value for comparison after update, be contraian from the randomized 'default'\n    final boolean useDv = Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP);\n    \n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"docValues\", useDv);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"positionIncrementGap\", 42);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat( RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class),\n                is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"42\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n    // should be unchanged...\n    assertThat(useDv, is(equalTo(replacedFieldTypeAttributes.get(\"docValues\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"precisionStep\", 1);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat(\"solr.TrieIntField\", is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"1\", is(equalTo(replacedFieldTypeAttributes.get(\"precisionStep\"))));\n    assertThat(\"0\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // a fixed value for comparison after update, be contraian from the randomized 'default'\n    final boolean useDv = Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP);\n    \n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"docValues\", useDv);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"positionIncrementGap\", 42);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat( RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class),\n                is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"42\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n    // should be unchanged...\n    assertThat(useDv, is(equalTo(replacedFieldTypeAttributes.get(\"docValues\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"precisionStep\", 1);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat(\"solr.TrieIntField\", is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"1\", is(equalTo(replacedFieldTypeAttributes.get(\"precisionStep\"))));\n    assertThat(\"0\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // a fixed value for comparison after update, be contraian from the randomized 'default'\n    final boolean useDv = Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP);\n    \n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"docValues\", useDv);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"positionIncrementGap\", 42);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat( RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class),\n                is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"42\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n    // should be unchanged...\n    assertThat(useDv, is(equalTo(replacedFieldTypeAttributes.get(\"docValues\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceFieldTypeAccuracy() throws Exception {\n    // Given\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"replaceInt\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    // When : update the field definition\n    fieldTypeAttributes.put(\"precisionStep\", 1);\n    fieldTypeAttributes.put(\"omitNorms\", false);\n    FieldTypeDefinition replaceFieldTypeDefinition = new FieldTypeDefinition();\n    replaceFieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.ReplaceFieldType replaceFieldTypeRequest =\n        new SchemaRequest.ReplaceFieldType(replaceFieldTypeDefinition);\n    SchemaResponse.UpdateResponse replaceFieldTypeResponse = replaceFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldTypeResponse);\n\n    // Then\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation replacedFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    Map<String, Object> replacedFieldTypeAttributes = replacedFieldTypeRepresentation.getAttributes();\n    assertThat(fieldTypeName, is(equalTo(replacedFieldTypeAttributes.get(\"name\"))));\n    assertThat(\"solr.TrieIntField\", is(equalTo(replacedFieldTypeAttributes.get(\"class\"))));\n    assertThat(false, is(equalTo(replacedFieldTypeAttributes.get(\"omitNorms\"))));\n    assertThat(\"1\", is(equalTo(replacedFieldTypeAttributes.get(\"precisionStep\"))));\n    assertThat(\"0\", is(equalTo(replacedFieldTypeAttributes.get(\"positionIncrementGap\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["cf91b76bbc05503ac96589cc801c8e65dff0e564","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}