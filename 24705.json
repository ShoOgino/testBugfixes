{"path":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"/dev/null","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#deleteFile(String).mjava","sourceNew":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","sourceOld":"  void deleteFile(String fileName)\n       throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"delete \\\"\" + fileName + \"\\\"\");\n      }\n      directory.deleteFile(fileName);\n    } catch (IOException e) {\t\t\t  // if delete fails\n      if (directory.fileExists(fileName)) {\n\n        // Some operating systems (e.g. Windows) don't\n        // permit a file to be deleted while it is opened\n        // for read (e.g. by another process or thread). So\n        // we assume that when a delete fails it is because\n        // the file is open in another process, and queue\n        // the file for subsequent deletion.\n\n        if (infoStream != null) {\n          message(\"IndexFileDeleter: unable to remove file \\\"\" + fileName + \"\\\": \" + e.toString() + \"; Will re-try later.\");\n        }\n        if (deletable == null) {\n          deletable = new ArrayList<String>();\n        }\n        deletable.add(fileName);                  // add to deletable\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}