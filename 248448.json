{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5f000280bc18391509bbb40c4a2a2c7515d54d3","date":1339339354,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","date":1341478157,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(StandardCharsets.UTF_8)));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(StandardCharsets.UTF_8)));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n      int posIncr;\n      if (pos == 0 || i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","7d89d7e4e5101347833eea558851bf4209218619"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c5f000280bc18391509bbb40c4a2a2c7515d54d3","4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d89d7e4e5101347833eea558851bf4209218619":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}