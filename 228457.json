{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":["6bd4a7478aca8c3880512b730b28bf3239340635"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eae735a9830ffc762967099f30deb101fd9a939","date":1366271714,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":["aba540f2bbd05538ead776efa6ccbabd725c68b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery.build(),\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery.build(),\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5c16d494b4cccbc6f3aa00f05421575bdb11da7","date":1464182657,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits.value);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits.value);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"4b3915945926c0bf7def01b0c504977709d3aed3":["1db68e96dd908fcd79ef809095822736aa601d08"],"e5c16d494b4cccbc6f3aa00f05421575bdb11da7":["0e7bc21595222ae4f75509300fbb7726691f387f"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["77855215e331ce146763531cb9b0c050726f6ae5"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"1d028314cced5858683a1bb4741423d0f934257b":["85d41890f2bad879e6a04c6dd7d2cf276f973994","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","470eaac3a77cf637b62126a5408b178d7be93eb1"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["1eae735a9830ffc762967099f30deb101fd9a939"],"1eae735a9830ffc762967099f30deb101fd9a939":["1d028314cced5858683a1bb4741423d0f934257b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"77855215e331ce146763531cb9b0c050726f6ae5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0e7bc21595222ae4f75509300fbb7726691f387f","e5c16d494b4cccbc6f3aa00f05421575bdb11da7"],"83870855d82aba6819217abeff5a40779dbb28b4":["0e7bc21595222ae4f75509300fbb7726691f387f","0e121d43b5a10f2df530f406f935102656e9c4e8"],"770342641f7b505eaa8dccdc666158bff2419109":["a67f37df79147ed4dd608300c2336c2979db98be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","0e121d43b5a10f2df530f406f935102656e9c4e8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["fb17639909a369c1e64866842e5c213440acc17e"],"a67f37df79147ed4dd608300c2336c2979db98be":["770342641f7b505eaa8dccdc666158bff2419109"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"37a8a6e8618a812308bce0a978e52ca5c453a112":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"e5c16d494b4cccbc6f3aa00f05421575bdb11da7":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1db68e96dd908fcd79ef809095822736aa601d08":["4b3915945926c0bf7def01b0c504977709d3aed3"],"1d028314cced5858683a1bb4741423d0f934257b":["1eae735a9830ffc762967099f30deb101fd9a939"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"1eae735a9830ffc762967099f30deb101fd9a939":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"77855215e331ce146763531cb9b0c050726f6ae5":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77855215e331ce146763531cb9b0c050726f6ae5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"0e7bc21595222ae4f75509300fbb7726691f387f":["e5c16d494b4cccbc6f3aa00f05421575bdb11da7","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}