{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            TermPositionVector posVec = (TermPositionVector)vector[0];\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            TermPositionVector posVec = (TermPositionVector)vector[0];\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            TermPositionVector posVec = (TermPositionVector)vector[0];\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}