{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String,boolean,boolean).mjava","commits":[{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field the field to use for indexing and searching against\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestFloatPointFieldExactQuery(final String field, final boolean searchable, final boolean testDouble) \n      throws Exception {\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    Map<String,Integer> randCount = new HashMap<>(numValues);\n    String[] rand = testDouble ? toStringArray(getRandomDoubles(numValues, false)) \n                               : toStringArray(getRandomFloats(numValues, false));\n    for (int i = 0 ; i < numValues ; i++) {\n      randCount.merge(rand[i], 1, (a, b) -> a + b); // count unique values\n      assertU(adoc(\"id\", String.valueOf(i), field, rand[i]));\n    }\n    assertU(commit());\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertQ(req(\"q\", field + \":\" + (rand[i].startsWith(\"-\") ? \"\\\\\" : \"\") + rand[i],\n          \"fl\", \"id,\" + field), getTestString(searchable, randCount.get(rand[i])));\n    }\n\n    StringBuilder builder = new StringBuilder();\n    for (String value : randCount.keySet()) {\n      if (builder.length() != 0) {\n        builder.append(\" OR \");\n      }\n      if (value.startsWith(\"-\")) {\n        builder.append(\"\\\\\"); // escape negative sign\n      }\n      builder.append(value);\n    }\n    assertQ(req(\"debug\", \"true\", \"q\", field + \":(\" + builder.toString() + \")\"), getTestString(searchable, numValues));\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field the field to use for indexing and searching against\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestFloatPointFieldExactQuery(final String field, final boolean searchable, final boolean testDouble) \n      throws Exception {\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    Map<String,Integer> randCount = new HashMap<>(numValues);\n    String[] rand = testDouble ? toStringArray(getRandomDoubles(numValues, false)) \n                               : toStringArray(getRandomFloats(numValues, false));\n    for (int i = 0 ; i < numValues ; i++) {\n      randCount.merge(rand[i], 1, (a, b) -> a + b); // count unique values\n      assertU(adoc(\"id\", String.valueOf(i), field, rand[i]));\n    }\n    assertU(commit());\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertQ(req(\"q\", field + \":\" + (rand[i].startsWith(\"-\") ? \"\\\\\" : \"\") + rand[i],\n          \"fl\", \"id,\" + field), getTestString(searchable, randCount.get(rand[i])));\n    }\n\n    StringBuilder builder = new StringBuilder();\n    for (String value : randCount.keySet()) {\n      if (builder.length() != 0) {\n        builder.append(\" OR \");\n      }\n      if (value.startsWith(\"-\")) {\n        builder.append(\"\\\\\"); // escape negative sign\n      }\n      builder.append(value);\n    }\n    assertQ(req(\"debug\", \"true\", \"q\", field + \":(\" + builder.toString() + \")\"), getTestString(searchable, numValues));\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param field the field to use for indexing and searching against\n   * @param searchable set to true if searches against \"field\" should succeed, false if field is only stored and searches should always get numFound=0\n   */\n  private void doTestFloatPointFieldExactQuery(final String field, final boolean searchable, final boolean testDouble) \n      throws Exception {\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    Map<String,Integer> randCount = new HashMap<>(numValues);\n    String[] rand = testDouble ? toStringArray(getRandomDoubles(numValues, false)) \n                               : toStringArray(getRandomFloats(numValues, false));\n    for (int i = 0 ; i < numValues ; i++) {\n      randCount.merge(rand[i], 1, (a, b) -> a + b); // count unique values\n      assertU(adoc(\"id\", String.valueOf(i), field, rand[i]));\n    }\n    assertU(commit());\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertQ(req(\"q\", field + \":\" + (rand[i].startsWith(\"-\") ? \"\\\\\" : \"\") + rand[i],\n          \"fl\", \"id,\" + field), getTestString(searchable, randCount.get(rand[i])));\n    }\n\n    StringBuilder builder = new StringBuilder();\n    for (String value : randCount.keySet()) {\n      if (builder.length() != 0) {\n        builder.append(\" OR \");\n      }\n      if (value.startsWith(\"-\")) {\n        builder.append(\"\\\\\"); // escape negative sign\n      }\n      builder.append(value);\n    }\n    assertQ(req(\"debug\", \"true\", \"q\", field + \":(\" + builder.toString() + \")\"), getTestString(searchable, numValues));\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}