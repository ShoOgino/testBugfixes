{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).mapToObj(Double::new).collect(Collectors.toList());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ScaleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> (value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    \n    if(null == first || null == second){\n      return null;\n    }\n    \n    // we know these are all numbers or lists of numbers\n    if(first instanceof List<?>){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting Number as first value but found a list\", toExpression(constructingFactory)));\n    }\n    \n    double[] scaleOver;\n    if(second instanceof Number){\n      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n    else{\n      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    }\n      \n    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}