{"path":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}