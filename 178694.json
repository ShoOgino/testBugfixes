{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c8a312269787ad677745cd5fc2631d61dff78d","date":1326209731,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":"  /**\n   * @deprecated use {@link #postData(InputStream, Integer, OutputStream, String)} instead\n   */\n  @Deprecated\n  public void postData(InputStream data, Integer length, OutputStream output) {\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n    postData(data, length, output, type);\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(InputStream data, Integer length, OutputStream output) {\n\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) solrUrl.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n                \n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      }\n      \n      OutputStream out = null;\n      try {\n        out = urlc.getOutputStream();\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      } finally {\n        try { if(out!=null) out.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n      InputStream in = null;\n      try {\n        if (HttpURLConnection.HTTP_OK != urlc.getResponseCode()) {\n          fatal(\"Solr returned an error #\" + urlc.getResponseCode() + \n                \" \" + urlc.getResponseMessage());\n        }\n\n        in = urlc.getInputStream();\n        pipe(in, output);\n      } catch (IOException e) {\n        fatal(\"IOException while reading response: \" + e);\n      } finally {\n        try { if(in!=null) in.close(); } catch (IOException x) { /*NOOP*/ }\n      }\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","date":1343692569,"type":4,"author":"Jan Høydahl","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated use {@link #postData(InputStream, Integer, OutputStream, String)} instead\n   */\n  @Deprecated\n  public void postData(InputStream data, Integer length, OutputStream output) {\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n    postData(data, length, output, type);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated use {@link #postData(InputStream, Integer, OutputStream, String)} instead\n   */\n  @Deprecated\n  public void postData(InputStream data, Integer length, OutputStream output) {\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n    postData(data, length, output, type);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated use {@link #postData(InputStream, Integer, OutputStream, String)} instead\n   */\n  @Deprecated\n  public void postData(InputStream data, Integer length, OutputStream output) {\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n    postData(data, length, output, type);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["00c8a312269787ad677745cd5fc2631d61dff78d"],"00c8a312269787ad677745cd5fc2631d61dff78d":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["00c8a312269787ad677745cd5fc2631d61dff78d","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["00c8a312269787ad677745cd5fc2631d61dff78d","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"]},"commit2Childs":{"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00c8a312269787ad677745cd5fc2631d61dff78d":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["00c8a312269787ad677745cd5fc2631d61dff78d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}