{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"f45b4d1a00eca88b48ea7e1ffae3041b63da020e","date":1402400148,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name + \" (resource=\" + meta + \")\");\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n      }\n      norms.put(fieldNumber, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name + \" (resource=\" + meta + \")\");\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name + \" (resource=\" + meta + \")\");\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n      }\n      norms.put(fieldNumber, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name + \" (resource=\" + meta + \")\");\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.format = meta.readByte();\n      entry.offset = meta.readLong();\n      switch(entry.format) {\n        case CONST_COMPRESSED:\n        case UNCOMPRESSED:\n        case TABLE_COMPRESSED:\n        case DELTA_COMPRESSED:\n          break;\n        default:\n          throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n      }\n      norms.put(info.name, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}