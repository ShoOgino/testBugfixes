{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String field, IntersectVisitor visitor) throws IOException {\n    BKDReader bkdReader = readers.get(field);\n    if (bkdReader == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was not indexed with dimensional values\");\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a","date":1450910176,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","sourceNew":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String field, IntersectVisitor visitor) throws IOException {\n    FieldInfo fieldInfo = readState.fieldInfos.fieldInfo(field);\n    if (fieldInfo == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" is unrecognized\");\n    }\n    if (fieldInfo.getDimensionCount() == 0) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" did not index dimensional values\");\n    }\n    BKDReader bkdReader = readers.get(field);\n    if (bkdReader == null) {\n      // Schema ghost corner case!  This field did index dimensional values in the past, but\n      // now all docs having this dimensional field were deleted in this segment:\n      return;\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","sourceOld":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String field, IntersectVisitor visitor) throws IOException {\n    BKDReader bkdReader = readers.get(field);\n    if (bkdReader == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was not indexed with dimensional values\");\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","sourceNew":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n    BKDReader bkdReader = getBKDReader(fieldName);\n    if (bkdReader == null) {\n      // Schema ghost corner case!  This field did index dimensional values in the past, but\n      // now all docs having this dimensional field were deleted in this segment:\n      return;\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","sourceOld":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String field, IntersectVisitor visitor) throws IOException {\n    FieldInfo fieldInfo = readState.fieldInfos.fieldInfo(field);\n    if (fieldInfo == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" is unrecognized\");\n    }\n    if (fieldInfo.getDimensionCount() == 0) {\n      throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" did not index dimensional values\");\n    }\n    BKDReader bkdReader = readers.get(field);\n    if (bkdReader == null) {\n      // Schema ghost corner case!  This field did index dimensional values in the past, but\n      // now all docs having this dimensional field were deleted in this segment:\n      return;\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointReader#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#intersect(String,IntersectVisitor).mjava","sourceNew":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n    BKDReader bkdReader = getBKDReader(fieldName);\n    if (bkdReader == null) {\n      // Schema ghost corner case!  This field did index points in the past, but\n      // now all docs having this field were deleted in this segment:\n      return;\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","sourceOld":"  /** Finds all documents and points matching the provided visitor */\n  @Override\n  public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n    BKDReader bkdReader = getBKDReader(fieldName);\n    if (bkdReader == null) {\n      // Schema ghost corner case!  This field did index dimensional values in the past, but\n      // now all docs having this dimensional field were deleted in this segment:\n      return;\n    }\n    bkdReader.intersect(visitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"d0c44765ee347f8c49bc6c0ffe1cdfb42738bd6a":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}