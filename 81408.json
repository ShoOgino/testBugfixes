{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","commits":[{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testSorting(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\t// 10 random tests, the index order is ascending,\n\t\t// so using a reverse sort field should retun descending documents\n\t\tfor (int i=0; i<10; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n\t\t\tif (topDocs.totalHits==0) continue;\n\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\tassertNotNull(sd);\n\t\t\tlong last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n\t\t\tfor (int j=1; j<sd.length; j++) {\n\t\t\t\tlong act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n\t\t\t\tassertTrue(\"Docs should be sorted backwards\", last>act );\n\t\t\t\tlast=act;\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","sourceNew":"  private void testSorting(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void testSorting(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\t// 10 random tests, the index order is ascending,\n\t\t// so using a reverse sort field should retun descending documents\n\t\tfor (int i=0; i<10; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n\t\t\tif (topDocs.totalHits==0) continue;\n\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\tassertNotNull(sd);\n\t\t\tlong last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n\t\t\tfor (int j=1; j<sd.length; j++) {\n\t\t\t\tlong act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n\t\t\t\tassertTrue(\"Docs should be sorted backwards\", last>act );\n\t\t\t\tlast=act;\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","sourceNew":"  private void testSorting(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","sourceNew":"  private void testSorting(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testSorting(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    // 10 random tests, the index order is ascending,\r\n    // so using a reverse sort field should retun descending documents\r\n    for (int i=0; i<10; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      Query tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true).asQuery();\r\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(TrieUtils.getIntSortField(field, true)));\r\n      if (topDocs.totalHits==0) continue;\r\n      ScoreDoc[] sd = topDocs.scoreDocs;\r\n      assertNotNull(sd);\r\n      int last=TrieUtils.prefixCodedToInt(searcher.doc(sd[0].doc).get(field));\r\n      for (int j=1; j<sd.length; j++) {\r\n        int act=TrieUtils.prefixCodedToInt(searcher.doc(sd[j].doc).get(field));\r\n        assertTrue(\"Docs should be sorted backwards\", last>act );\r\n        last=act;\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"  private void testSorting(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testSorting(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testSorting(TrieUtils).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      Query tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true).asQuery();\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(TrieUtils.getLongSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=TrieUtils.prefixCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=TrieUtils.prefixCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs topDocs = searcher.search(tq, null, 10000, new Sort(variant.getSortField(field, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=variant.trieCodedToLong(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        long act=variant.trieCodedToLong(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["e91724d755098f0c856c612bf56d1edc31044a82"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e91724d755098f0c856c612bf56d1edc31044a82":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}