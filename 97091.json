{"path":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","commits":[{"id":"415fc059c6f2340aed1714220b9578c3f66ed09c","date":1366942705,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","sourceNew":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_NUMERIC:\n            reader.getSortedNumericDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","sourceNew":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_NUMERIC:\n            reader.getSortedNumericDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SimpleMergedSegmentWarmer#warm(AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void warm(AtomicReader reader) throws IOException {\n    long startTime = System.currentTimeMillis();\n    int indexedCount = 0;\n    int docValuesCount = 0;\n    int normsCount = 0;\n    for (FieldInfo info : reader.getFieldInfos()) {\n      if (info.isIndexed()) {\n        reader.terms(info.name); \n        indexedCount++;\n        \n        if (info.hasNorms()) {\n          reader.getNormValues(info.name);\n          normsCount++;\n        }\n      }\n      \n      if (info.hasDocValues()) {\n        switch(info.getDocValuesType()) {\n          case NUMERIC:\n            reader.getNumericDocValues(info.name);\n            break;\n          case BINARY:\n            reader.getBinaryDocValues(info.name);\n            break;\n          case SORTED:\n            reader.getSortedDocValues(info.name);\n            break;\n          case SORTED_NUMERIC:\n            reader.getSortedNumericDocValues(info.name);\n            break;\n          case SORTED_SET:\n            reader.getSortedSetDocValues(info.name);\n            break;\n          default:\n            assert false; // unknown dv type\n        }\n        docValuesCount++;\n      }   \n    }\n    \n    reader.document(0);\n    reader.getTermVectors(0);\n    \n    if (infoStream.isEnabled(\"SMSW\")) {\n      infoStream.message(\"SMSW\", \n             \"Finished warming segment: \" + reader + \n             \", indexed=\" + indexedCount + \n             \", docValues=\" + docValuesCount +\n             \", norms=\" + normsCount +\n             \", time=\" + (System.currentTimeMillis() - startTime));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"415fc059c6f2340aed1714220b9578c3f66ed09c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["415fc059c6f2340aed1714220b9578c3f66ed09c","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["415fc059c6f2340aed1714220b9578c3f66ed09c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415fc059c6f2340aed1714220b9578c3f66ed09c"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}