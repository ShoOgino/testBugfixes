{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","date":1429031018,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            MDC.put(\"ConcurrentUpdateSolrClient.url\", client.getBaseURL());\n            try {\n              Runner r = new Runner();\n              runners.add(r);\n              scheduler.execute(r);\n            } finally {\n              MDC.remove(\"ConcurrentUpdateSolrClient.url\");\n            }\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":["50e202028300f452744bbd0e537a0f5c0cf044b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50e202028300f452744bbd0e537a0f5c0cf044b6","date":1446478140,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            MDC.put(\"ConcurrentUpdateSolrClient.url\", client.getBaseURL());\n            try {\n              Runner r = new Runner();\n              runners.add(r);\n              scheduler.execute(r);\n            } finally {\n              MDC.remove(\"ConcurrentUpdateSolrClient.url\");\n            }\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7065efda8f35a7182b1ead959371c47f3615eaac","date":1460559321,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      long lastStallTime = -1;\n      int lastQueueSize = -1;\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n        if (!success) {\n          // stall prevention\n          int currentQueueSize = queue.size();\n          if (currentQueueSize != lastQueueSize) {\n            // there's still some progress in processing the queue - not stalled\n            lastQueueSize = currentQueueSize;\n            lastStallTime = -1;\n          } else {\n            if (lastStallTime == -1) {\n              // mark a stall but keep trying\n              lastStallTime = System.nanoTime();\n            } else {\n              long currentStallTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastStallTime);\n              if (currentStallTime > stallTime) {\n                throw new IOException(\"Request processing has stalled for \" + currentStallTime + \"ms with \" + queue.size() + \" remaining elements in the queue.\");\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      long lastStallTime = -1;\n      int lastQueueSize = -1;\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n        if (!success) {\n          // stall prevention\n          int currentQueueSize = queue.size();\n          if (currentQueueSize != lastQueueSize) {\n            // there's still some progress in processing the queue - not stalled\n            lastQueueSize = currentQueueSize;\n            lastStallTime = -1;\n          } else {\n            if (lastStallTime == -1) {\n              // mark a stall but keep trying\n              lastStallTime = System.nanoTime();\n            } else {\n              long currentStallTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastStallTime);\n              if (currentStallTime > stallTime) {\n                throw new IOException(\"Request processing has stalled for \" + currentStallTime + \"ms with \" + queue.size() + \" remaining elements in the queue.\");\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      long lastStallTime = -1;\n      int lastQueueSize = -1;\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n        if (!success) {\n          // stall prevention\n          int currentQueueSize = queue.size();\n          if (currentQueueSize != lastQueueSize) {\n            // there's still some progress in processing the queue - not stalled\n            lastQueueSize = currentQueueSize;\n            lastStallTime = -1;\n          } else {\n            if (lastStallTime == -1) {\n              // mark a stall but keep trying\n              lastStallTime = System.nanoTime();\n            } else {\n              long currentStallTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastStallTime);\n              if (currentStallTime > stallTime) {\n                throw new IOException(\"Request processing has stalled for \" + currentStallTime + \"ms with \" + queue.size() + \" remaining elements in the queue.\");\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      Update update = new Update(req, collection);\n      boolean success = queue.offer(update);\n\n      long lastStallTime = -1;\n      int lastQueueSize = -1;\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            addRunner();\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(update, 100, TimeUnit.MILLISECONDS);\n        }\n        if (!success) {\n          // stall prevention\n          int currentQueueSize = queue.size();\n          if (currentQueueSize != lastQueueSize) {\n            // there's still some progress in processing the queue - not stalled\n            lastQueueSize = currentQueueSize;\n            lastStallTime = -1;\n          } else {\n            if (lastStallTime == -1) {\n              // mark a stall but keep trying\n              lastStallTime = System.nanoTime();\n            } else {\n              long currentStallTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastStallTime);\n              if (currentStallTime > stallTime) {\n                throw new IOException(\"Request processing has stalled for \" + currentStallTime + \"ms with \" + queue.size() + \" remaining elements in the queue.\");\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"50e202028300f452744bbd0e537a0f5c0cf044b6":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a229cb50768e988c50a2106bdae3a92154f428bf":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["50e202028300f452744bbd0e537a0f5c0cf044b6","7065efda8f35a7182b1ead959371c47f3615eaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7065efda8f35a7182b1ead959371c47f3615eaac":["50e202028300f452744bbd0e537a0f5c0cf044b6"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","a229cb50768e988c50a2106bdae3a92154f428bf"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["50e202028300f452744bbd0e537a0f5c0cf044b6"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50e202028300f452744bbd0e537a0f5c0cf044b6":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","7065efda8f35a7182b1ead959371c47f3615eaac"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7065efda8f35a7182b1ead959371c47f3615eaac":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["482ca6c86d7073e3c19096bdc74fe0e73da4554a","a229cb50768e988c50a2106bdae3a92154f428bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}