{"path":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(Searcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(Searcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score());\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"323f871ffe96b871d8c534a614be60751bb023c2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["323f871ffe96b871d8c534a614be60751bb023c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"323f871ffe96b871d8c534a614be60751bb023c2":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}