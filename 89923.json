{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/strategy/prefix/TestSpatialPrefixField#testRawTokens().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/strategy/prefix/TestSpatialPrefixField#testRawTokens().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/strategy/prefix/TestSpatialPrefixField#testRawTokens().mjava","sourceNew":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","sourceOld":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/strategy/prefix/TestSpatialPrefixField#testRawTokens().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/strategy/prefix/TestSpatialPrefixField#testRawTokens().mjava","sourceNew":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","sourceOld":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}