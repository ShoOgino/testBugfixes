{"path":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    new Thread() {\n      public void run() {\n        synchronized (cnxn) {\n          try {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n\n            }\n            Thread.sleep(ms);\n          } catch (InterruptedException e) {}\n        }\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05887fc144c1e694781b42187949be4cd6e5347","date":1348158734,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              // nocommit: reflect me, move me somewehre else as static method,\n              // something. i am only used by tests! the rest of this file is clean.\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b646be8c735de0184f7ba665b25204ad7091c2","date":1348184278,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper#pauseCnxn(long).mjava","pathOld":"solr/solrj/src/java/org/apache/zookeeper/SolrZooKeeper#pauseCnxn(long).mjava","sourceNew":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    final Thread t = new Thread() {\n      public void run() {\n        try {\n          final ClientCnxn cnxn = getConnection();\n          synchronized (cnxn) {\n            try {\n              final Field sendThreadFld = cnxn.getClass().getDeclaredField(\"sendThread\");\n              sendThreadFld.setAccessible(true);\n              Object sendThread = sendThreadFld.get(cnxn);\n              if (sendThread != null) {\n                final Field sockKeyFld = sendThread.getClass().getDeclaredField(\"sockKey\");\n                sockKeyFld.setAccessible(true);\n                final SelectionKey sockKey = (SelectionKey) sockKeyFld.get(sendThread);\n                if (sockKey != null) {\n                  sockKey.channel().close();\n                }\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"Closing Zookeeper send channel failed.\", e);\n            }\n            Thread.sleep(ms);\n          }\n        } catch (InterruptedException e) {\n          // ignore\n        } finally {\n          spawnedThreads.remove(this);\n        }\n      }\n    };\n    spawnedThreads.add(t);\n    t.start();\n  }\n\n","sourceOld":"  /**\n   * Cause this ZooKeeper object to stop receiving from the ZooKeeperServer\n   * for the given number of milliseconds.\n   * @param ms the number of milliseconds to pause.\n   */\n  public void pauseCnxn(final long ms) {\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          synchronized (cnxn) {\n            try {\n              ((SocketChannel) cnxn.sendThread.sockKey.channel()).socket()\n                  .close();\n            } catch (Exception e) {\n            }\n            Thread.sleep(ms);\n          }\n\n          // Wait a long while to make sure we properly clean up these threads.\n          Thread.sleep(500000);\n        } catch (InterruptedException e) {}\n      }\n    };\n    t.start();\n    spawnedThreads.add(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2b646be8c735de0184f7ba665b25204ad7091c2":["1c8719b2c0b382be11f5b193b6fc14bc310e906b","a05887fc144c1e694781b42187949be4cd6e5347"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05887fc144c1e694781b42187949be4cd6e5347":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"f2b646be8c735de0184f7ba665b25204ad7091c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a05887fc144c1e694781b42187949be4cd6e5347":["f2b646be8c735de0184f7ba665b25204ad7091c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["f2b646be8c735de0184f7ba665b25204ad7091c2","c7869f64c874ebf7f317d22c00baf2b6857797a6","a05887fc144c1e694781b42187949be4cd6e5347","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}