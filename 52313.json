{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<Object>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<Number>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e7761210febbbf9eb64d86512126e718181aec9","date":1467828397,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(\n          TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT));\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":["a45ddee14ecadf18bc50fff428911687afb4745d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Number> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb88a28fb92adce0607c5b28f8f1cce9e3171639","date":1492689807,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60481acc5083329d2ffbf27397331a25baad88de","date":1492691547,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"df\", tc.getFrequency());\n              termStats.add(\"ttf\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":["a45ddee14ecadf18bc50fff428911687afb4745d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"df\", tc.getFrequency());\n              termStats.add(\"ttf\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"docFreq\", tc.getFrequency());\n              termStats.add(\"totalTermFreq\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45ddee14ecadf18bc50fff428911687afb4745d","date":1560519742,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldterms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      // init minimum frequency\n      long freqmin = 1;\n      String s = params.get(TermsParams.TERMS_MINCOUNT);\n      if (s != null)  freqmin = Long.parseLong(s);\n\n      // init maximum frequency, default to max int\n      long freqmax = -1;\n      s = params.get(TermsParams.TERMS_MAXCOUNT);\n      if (s != null)  freqmax = Long.parseLong(s);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      // init limit, default to max int\n      long limit = 10;\n      s = params.get(TermsParams.TERMS_LIMIT);\n      if (s != null)  limit = Long.parseLong(s);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop though each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop though each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            if (includeTotalTermFreq) {\n              NamedList<Number> termStats = new SimpleOrderedMap<>();\n              termStats.add(\"df\", tc.getFrequency());\n              termStats.add(\"ttf\", tc.getTotalTermFreq());\n              fieldterms.add(tc.getTerm(), termStats);\n            } else {\n              fieldterms.add(tc.getTerm(), num(tc.getFrequency()));\n            }\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","401b0b7bbdbac0027e5b44890c4131d808ec2c9d","60481acc5083329d2ffbf27397331a25baad88de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8998ebc47a334c61dfed58318c481a7d84e3eaeb","date":1560839882,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldTerms = new NamedList<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldTerms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldterms = new SimpleOrderedMap<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldterms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldterms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (Map.Entry<String, HashMap<String, TermsResponse.Term>> entry : fieldmap.entrySet()) {\n        NamedList<Object> fieldTerms = new NamedList<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(entry.getValue());\n        } else {\n          data = getLexSorted(entry.getValue());\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(entry.getKey(), fieldTerms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldTerms = new NamedList<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldTerms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#buildResponse().mjava","sourceNew":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (Map.Entry<String, HashMap<String, TermsResponse.Term>> entry : fieldmap.entrySet()) {\n        NamedList<Object> fieldTerms = new NamedList<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(entry.getValue());\n        } else {\n          data = getLexSorted(entry.getValue());\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(entry.getKey(), fieldTerms);\n      }\n\n      return response;\n    }\n\n","sourceOld":"    public NamedList<Object> buildResponse() {\n      NamedList<Object> response = new SimpleOrderedMap<>();\n\n      // determine if we are going index or count sort\n      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,\n                                                                     TermsParams.TERMS_SORT_COUNT));\n      if(params.get(TermsParams.TERMS_LIST) != null) {\n        //Always use lexical sort when TERM_LIST is provided\n        sort = false;\n      }\n\n      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);\n\n      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);\n      if (freqmax < 0) {\n        freqmax = Long.MAX_VALUE;\n      }\n\n      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);\n      if (limit < 0) {\n        limit = Long.MAX_VALUE;\n      }\n\n      // loop through each field we want terms from\n      for (String key : fieldmap.keySet()) {\n        NamedList<Object> fieldTerms = new NamedList<>();\n        TermsResponse.Term[] data = null;\n        if (sort) {\n          data = getCountSorted(fieldmap.get(key));\n        } else {\n          data = getLexSorted(fieldmap.get(key));\n        }\n\n        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);\n        // loop through each term until we hit limit\n        int cnt = 0;\n        for (TermsResponse.Term tc : data) {\n          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {\n            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);\n            cnt++;\n          }\n\n          if (cnt >= limit) {\n            break;\n          }\n        }\n\n        response.add(key, fieldTerms);\n      }\n\n      return response;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"60481acc5083329d2ffbf27397331a25baad88de":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["6e7761210febbbf9eb64d86512126e718181aec9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6e7761210febbbf9eb64d86512126e718181aec9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4302dfeb5d01c940f69c48bec27f03ad8828668","60481acc5083329d2ffbf27397331a25baad88de"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["8998ebc47a334c61dfed58318c481a7d84e3eaeb"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"a45ddee14ecadf18bc50fff428911687afb4745d":["60481acc5083329d2ffbf27397331a25baad88de"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["6e7761210febbbf9eb64d86512126e718181aec9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8998ebc47a334c61dfed58318c481a7d84e3eaeb":["a45ddee14ecadf18bc50fff428911687afb4745d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e7761210febbbf9eb64d86512126e718181aec9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["8998ebc47a334c61dfed58318c481a7d84e3eaeb","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6e7761210febbbf9eb64d86512126e718181aec9"],"60481acc5083329d2ffbf27397331a25baad88de":["e9017cf144952056066919f1ebc7897ff9bd71b1","a45ddee14ecadf18bc50fff428911687afb4745d"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["60481acc5083329d2ffbf27397331a25baad88de"],"a45ddee14ecadf18bc50fff428911687afb4745d":["8998ebc47a334c61dfed58318c481a7d84e3eaeb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"8998ebc47a334c61dfed58318c481a7d84e3eaeb":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6e7761210febbbf9eb64d86512126e718181aec9":["a4302dfeb5d01c940f69c48bec27f03ad8828668","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}