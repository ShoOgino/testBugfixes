{"path":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7724982540101e7fe429e8eb67b97f3dcac862","date":1316184142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(@SuppressWarnings({\"rawtypes\"})NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    name = (String) config.get(DICTIONARY_NAME);\n    if (name == null) {\n      name = DEFAULT_DICTIONARY_NAME;\n    }\n    field = (String)config.get(FIELD);\n    IndexSchema schema = core.getLatestSchema();\n    if (field != null && schema.getFieldTypeNoEx(field) != null)  {\n      analyzer = schema.getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (schema.getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"08970e5b8411182a29412c177eff67ec1110095b":["ef7724982540101e7fe429e8eb67b97f3dcac862"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}