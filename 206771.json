{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Iterator e = lf.locksCreated.keySet().iterator(); e.hasNext();) {\n            String lockName = (String) e.next();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Iterator e = lf.locksCreated.keySet().iterator(); e.hasNext();) {\n            String lockName = (String) e.next();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":null,"sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Iterator e = lf.locksCreated.keySet().iterator(); e.hasNext();) {\n            String lockName = (String) e.next();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}