{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","commits":[{"id":"3caf472b0a0fa2bad9079962e59f83162aeec919","date":1400698619,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9043cd220362869f58e50f635c13c362f8377da","date":1404227796,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","sourceNew":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }    \n  }  \n\n","sourceOld":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#assertRf(int,String,int).mjava","sourceNew":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }\n  }\n\n","sourceOld":"  protected void assertRf(int expected, String explain, int actual) throws Exception {\n    if (actual != expected) {\n      String assertionFailedMessage = \n          String.format(Locale.ENGLISH, \"Expected rf=%d because %s but got %d\", expected, explain, actual);\n      fail(assertionFailedMessage+\"; clusterState: \"+printClusterStateInfo());\n    }    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["f9043cd220362869f58e50f635c13c362f8377da"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3caf472b0a0fa2bad9079962e59f83162aeec919"],"f9043cd220362869f58e50f635c13c362f8377da":["3caf472b0a0fa2bad9079962e59f83162aeec919"],"3caf472b0a0fa2bad9079962e59f83162aeec919":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","3caf472b0a0fa2bad9079962e59f83162aeec919"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f9043cd220362869f58e50f635c13c362f8377da":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"3caf472b0a0fa2bad9079962e59f83162aeec919":["b7605579001505896d48b07160075a5c8b8e128e","f9043cd220362869f58e50f635c13c362f8377da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}