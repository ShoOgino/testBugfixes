{"path":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpatialHeatmapFacetsTest#test().mjava","sourceNew":"  /** Tests SimpleFacets/Classic faceting implementation of heatmaps */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testClassicFacets() throws Exception { // AKA SimpleFacets\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(SpatialHeatmapFacets.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests SimpleFacets/Classic faceting implementation of heatmaps */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testClassicFacets() throws Exception { // AKA SimpleFacets\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests SimpleFacets/Classic faceting implementation of heatmaps */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testClassicFacets() throws Exception { // AKA SimpleFacets\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testClassicFacets().mjava","sourceNew":"  /** Tests SimpleFacets/Classic faceting implementation of heatmaps */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testClassicFacets() throws Exception { // AKA SimpleFacets\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","sourceOld":"  /** Tests SimpleFacets/Classic faceting implementation of heatmaps */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testClassicFacets() throws Exception { // AKA SimpleFacets\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    SolrParams baseParams = params(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, FIELD);\n\n    final String testBox = \"[\\\"50 50\\\" TO \\\"180 90\\\"]\";//top-right somewhere on edge (whatever)\n\n    //----- First we test gridLevel derivation\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    try {\n      getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0\"))).get(\"gridLevel\");\n      fail();\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    }\n    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact\n    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.\n    assertEquals(7, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox))).get(\"gridLevel\"));//default\n    assertEquals(3, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_LEVEL, \"3\"))).get(\"gridLevel\"));\n    assertEquals(2, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR, \"100\"))).get(\"gridLevel\"));\n    //TODO test impact of distance units\n    assertEquals(9, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, testBox, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.05\"))).get(\"gridLevel\"));\n    assertEquals(6, getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\"))).get(\"gridLevel\"));\n\n    //test key output label doing 2 heatmaps with different settings on the same field\n    {\n      final ModifiableSolrParams params = params(baseParams, FacetParams.FACET_HEATMAP_DIST_ERR_PCT, \"0.10\");\n      String courseFormat = random().nextBoolean() ? \"png\" : \"ints2D\";\n      params.add(FacetParams.FACET_HEATMAP, \"{!key=course \"\n          + FacetParams.FACET_HEATMAP_LEVEL + \"=2 \"\n          + FacetParams.FACET_HEATMAP_FORMAT + \"=\" + courseFormat\n          + \"}\" + FIELD);\n      final QueryResponse response = query(params);\n      assertEquals(6, getHmObj(response).get(\"gridLevel\"));//same test as above\n      assertEquals(2, response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\", \"gridLevel\"));\n      assertTrue(((NamedList<Object>) response.getResponse().findRecursive(\"facet_counts\", \"facet_heatmaps\", \"course\"))\n          .asMap(0).containsKey(\"counts_\" + courseFormat));\n    }\n\n    // ------ Index data\n\n    index(\"id\", \"0\", FIELD, \"ENVELOPE(100, 120, 80, 40)\");// on right side\n    index(\"id\", \"1\", FIELD, \"ENVELOPE(-120, -110, 80, 20)\");// on left side (outside heatmap)\n    index(\"id\", \"3\", FIELD, \"POINT(70 60)\");//just left of BOX 0\n    index(\"id\", \"4\", FIELD, \"POINT(91 89)\");//just outside box 0 (above it) near pole,\n\n    commit();\n\n    // ----- Search\n    // this test simply has some 0's, nulls, 1's and a 2 in there.\n    NamedList hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\")));\n    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // now this time we add a filter query and exclude it\n    QueryResponse response = query(params(baseParams,\n        \"fq\", \"{!tag=excludeme}id:0\", // filter to only be id:0\n        FacetParams.FACET_HEATMAP, \"{!ex=excludeme}\" + FIELD, // exclude the filter\n        FacetParams.FACET_HEATMAP_GEOM, \"[\\\"50 20\\\" TO \\\"180 90\\\"]\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"4\"));\n    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'\n    hmObj = getHmObj(response);\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(  // same counts as before\n            Arrays.asList(0, 0, 2, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 1, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            Arrays.asList(0, 0, 1, 1, 0, 0),\n            null,\n            null\n        ),\n        counts\n    );\n\n    // test using a circle input shape\n    hmObj = getHmObj(query(params(baseParams,\n        FacetParams.FACET_HEATMAP_GEOM, \"BUFFER(POINT(110 40), 7)\",\n        FacetParams.FACET_HEATMAP_LEVEL, \"7\")));\n    counts = (List<List<Integer>>) hmObj.get(\"counts_ints2D\");\n    assertEquals(\n        Arrays.asList(\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),\n            null, null, null, null, null//no data here (below edge of rect 0)\n        ),\n        counts\n    );\n\n    // Search in no-where ville and get null counts\n    assertNull(getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_GEOM, \"ENVELOPE(0, 10, -80, -90)\"))).get(\"counts_ints2D\"));\n\n    Object v = getHmObj(query(params(baseParams, FacetParams.FACET_HEATMAP_FORMAT, \"png\"))).get(\"counts_png\");\n    assertTrue(v instanceof byte[]);\n    //simply test we can read the image\n    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));\n    //good enough for this test method\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}