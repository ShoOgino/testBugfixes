{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(container.getZkController().getZkClient());\n      rsp.getValues().add(\"suggestions\",\n          PolicyHelper.getSuggestions(autoScalingConf, new SolrClientCloudManager(queueFactory, build)));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","sourceNew":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) throws IOException {\n    rsp.getValues().add(\"suggestions\",\n        PolicyHelper.getSuggestions(autoScalingConf, cloudManager));\n  }\n\n","sourceOld":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) throws IOException {\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(container.getZkController().getZkClient());\n      rsp.getValues().add(\"suggestions\",\n          PolicyHelper.getSuggestions(autoScalingConf, new SolrClientCloudManager(queueFactory, build)));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f90164e4baf99ca8e0d459a85e1c359ccad769","date":1558579809,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","sourceNew":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) {\n    rsp.getValues().add(\"suggestions\",\n        PolicyHelper.getSuggestions(autoScalingConf, cloudManager));\n  }\n\n","sourceOld":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) throws IOException {\n    rsp.getValues().add(\"suggestions\",\n        PolicyHelper.getSuggestions(autoScalingConf, cloudManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4","date":1558992012,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuggestions(SolrQueryResponse,AutoScalingConfig).mjava","sourceNew":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf, SolrParams params) {\n    rsp.getValues().add(\"suggestions\",\n        PolicyHelper.getSuggestions(autoScalingConf, cloudManager, params));\n  }\n\n","sourceOld":"  private void handleSuggestions(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) {\n    rsp.getValues().add(\"suggestions\",\n        PolicyHelper.getSuggestions(autoScalingConf, cloudManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"]},"commit2Childs":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}