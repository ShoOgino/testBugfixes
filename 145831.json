{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","commits":[{"id":"42fa1b1a7816a1e1853b685183b07a976bc37560","date":1356094868,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Lists.asList(\"first\", \"second\", new String[]{\"third\"}));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Lists.asList(\"fourth\", new String[]{\"fifth\"}));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af9db2154e1cadd14a83fdeaad215bb1aa1a0665"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad1873ab91865cf4b264004c77921cd94eca946c","date":1356095543,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","sourceNew":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Lists.asList(\"first\", \"second\", new String[]{\"third\"}));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Lists.asList(\"fourth\", new String[]{\"fifth\"}));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":"  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Lists.asList(\"first\", \"second\", new String[]{\"third\"}));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Lists.asList(\"fourth\", new String[]{\"fifth\"}));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af9db2154e1cadd14a83fdeaad215bb1aa1a0665","date":1356256868,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","sourceNew":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Lists.asList(\"first\", \"second\", new String[]{\"third\"}));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Lists.asList(\"fourth\", new String[]{\"fifth\"}));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","bugFix":["42fa1b1a7816a1e1853b685183b07a976bc37560"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","sourceNew":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<String, List<String>>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","sourceNew":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrClient solrClient = getSolrClient();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    QueryResponse response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrServer solrServer = getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    QueryResponse response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrServer.add(doc);\n    solrServer.commit(true, true);\n    response = solrServer.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateMultiValuedField().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrClient solrClient = getSolrClient();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    QueryResponse response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateMultiValuedField() throws Exception {\n    SolrClient solrClient = getSolrClient();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    QueryResponse response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(\"Failed to add doc to cloud server\", 1, response.getResults().getNumFound());\n\n    Map<String, List<String>> operation = new HashMap<>();\n    operation.put(\"set\", Arrays.asList(\"first\", \"second\", \"third\"));\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    assertTrue(\"Multi-valued field did not return a collection\", response.getResults().get(0).get(\"multi_ss\") instanceof List);\n    List<String> values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 3, values.size());\n\n    operation.clear();\n    operation.put(\"add\", Arrays.asList(\"fourth\", \"fifth\"));\n    doc.removeField(\"multi_ss\");\n    doc.addField(\"multi_ss\", operation);\n    solrClient.add(doc);\n    solrClient.commit(true, true);\n    response = solrClient.query(new SolrQuery(\"id:123\"));\n    values = (List<String>) response.getResults().get(0).get(\"multi_ss\");\n    assertEquals(\"Field values was not updated with all values via atomic update\", 5, values.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bafca15d8e408346a67f4282ad1143b88023893b"],"af9db2154e1cadd14a83fdeaad215bb1aa1a0665":["ad1873ab91865cf4b264004c77921cd94eca946c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af9db2154e1cadd14a83fdeaad215bb1aa1a0665"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["af9db2154e1cadd14a83fdeaad215bb1aa1a0665"],"ad1873ab91865cf4b264004c77921cd94eca946c":["42fa1b1a7816a1e1853b685183b07a976bc37560"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"42fa1b1a7816a1e1853b685183b07a976bc37560":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af9db2154e1cadd14a83fdeaad215bb1aa1a0665":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"ad1873ab91865cf4b264004c77921cd94eca946c":["af9db2154e1cadd14a83fdeaad215bb1aa1a0665"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42fa1b1a7816a1e1853b685183b07a976bc37560"],"bafca15d8e408346a67f4282ad1143b88023893b":["9ba1b632c041956c93c41aa1143d16a567014891"],"42fa1b1a7816a1e1853b685183b07a976bc37560":["ad1873ab91865cf4b264004c77921cd94eca946c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}