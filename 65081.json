{"path":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","commits":[{"id":"670ff998bdf1eabbee220939bf16cd6595ba15c7","date":1266827225,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"rewritten query should be a CustomScoreQuery\", rewritten instanceof CustomScoreQuery);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"rewritten query should be a CustomScoreQuery\", rewritten instanceof CustomScoreQuery);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"670ff998bdf1eabbee220939bf16cd6595ba15c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["670ff998bdf1eabbee220939bf16cd6595ba15c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"670ff998bdf1eabbee220939bf16cd6595ba15c7":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["670ff998bdf1eabbee220939bf16cd6595ba15c7"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}