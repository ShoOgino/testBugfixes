{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test1().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test1().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test1().mjava","sourceNew":"  @Test\n  public void test1() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i*1.1f, Integer.valueOf(100 + i));\n    }\n\n    HashSet<Integer> set = new HashSet<Integer>();\n\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n\n    set.clear();\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      Integer integer = iterator.next();\n      if (integer % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(integer);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i += 2) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test1() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i*1.1f, Integer.valueOf(100 + i));\n    }\n\n    HashSet<Integer> set = new HashSet<Integer>();\n\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n\n    set.clear();\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      Integer integer = iterator.next();\n      if (integer % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(integer);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i += 2) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/FloatToObjectMapTest#test1().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test1().mjava","sourceNew":"  @Test\n  public void test1() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i*1.1f, Integer.valueOf(100 + i));\n    }\n\n    HashSet<Integer> set = new HashSet<Integer>();\n\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n\n    set.clear();\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      Integer integer = iterator.next();\n      if (integer % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(integer);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i += 2) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test1() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i*1.1f, Integer.valueOf(100 + i));\n    }\n\n    HashSet<Integer> set = new HashSet<Integer>();\n\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n\n    set.clear();\n    for (Iterator<Integer> iterator = map.iterator(); iterator.hasNext();) {\n      Integer integer = iterator.next();\n      if (integer % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(integer);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i += 2) {\n      assertTrue(set.contains(Integer.valueOf(100 + i)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}