{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","commits":[{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76f7066a3ec6e68e257b01dd46edbbdd3530690a","date":1358805020,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}