{"path":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(Config,Command,Command,MorphlineContext).mjava","pathOld":"/dev/null","sourceNew":"    public GenerateSolrSequenceKey(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public GenerateSolrSequenceKey(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","sourceOld":"    public GenerateSolrSequenceKey(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}