{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","commits":[{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(ValueSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4513731041236fcf659e5bfc43d8862e1721a310","date":1504022253,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6028626aa0f7c266ef725110257eed11e5b3d1d7","date":1504104056,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" missingCount \" + counter.missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createWeight(searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#count(LongValuesSource,List[MatchingDocs]).mjava","sourceNew":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createWeight(searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","sourceOld":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        // Skip missing docs:\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    //System.out.println(\"totCount \" + totCount + \" x \" + x + \" missingCount \" + missingCount);\n    totCount -= missingCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","4513731041236fcf659e5bfc43d8862e1721a310"],"4513731041236fcf659e5bfc43d8862e1721a310":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","6028626aa0f7c266ef725110257eed11e5b3d1d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6028626aa0f7c266ef725110257eed11e5b3d1d7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"4513731041236fcf659e5bfc43d8862e1721a310":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["6028626aa0f7c266ef725110257eed11e5b3d1d7","4513731041236fcf659e5bfc43d8862e1721a310","3a7809d1d753b67f48b1a706e17034bf8b624ea3","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}