{"path":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","commits":[{"id":"f4e4ac061c7cb668bd0651cb565ebbad1157cadc","date":1151347127,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc));\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc));\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc));\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new MultiReaderHitCollector() {\n        private int base = -1;\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc + base));\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc));\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new Collector() {\n        private int base = 0;\n        public void setScorer(Scorer scorer) throws IOException {}\n        public void collect(int doc) {\n          actual.add(new Integer(doc + base));\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new MultiReaderHitCollector() {\n        private int base = -1;\n        public void collect(int doc, float score) {\n          actual.add(new Integer(doc + base));\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new Collector() {\n        private int base = 0;\n        public void setScorer(Scorer scorer) throws IOException {}\n        public void collect(int doc) {\n          actual.add(new Integer(doc + base));\n        }\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new Collector() {\n        private int base = 0;\n        public void setScorer(Scorer scorer) throws IOException {}\n        public void collect(int doc) {\n          actual.add(new Integer(doc + base));\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n      });\n    TestCase.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ffe619bf5bbe00453bab7103c36fd38c8417f6c","date":1250619947,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    final Set actual = new TreeSet();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    \n    final Set actual = new TreeSet();\n    searcher.search(query, new Collector() {\n        private int base = 0;\n        public void setScorer(Scorer scorer) throws IOException {}\n        public void collect(int doc) {\n          actual.add(new Integer(doc + base));\n        }\n        public void setNextReader(IndexReader reader, int docBase) {\n          base = docBase;\n        }\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set actual = new TreeSet();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(new Integer(results[i]));\n    }\n    final Set actual = new TreeSet();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set correct = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set actual = new TreeSet();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,HitCollector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["052fac7830290bd38a04cddee1a121ee07656b56"],"6bcde5e3f23911110baa101ed062b544162825b5":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["6bcde5e3f23911110baa101ed062b544162825b5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"052fac7830290bd38a04cddee1a121ee07656b56":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}