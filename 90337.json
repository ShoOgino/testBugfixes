{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhrasesSpanningFieldValues().mjava","commits":[{"id":"39700f0117ce4ef15f96e8069885d58983707139","date":1438115041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhrasesSpanningFieldValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhrasesSpanningFieldValues() throws IOException {\n    Directory dir = newDirectory();\n    // positionIncrementGap is 0 so the pharse is found across multiple field\n    // values.\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field( \"field\", \"one two three five\", type ) );\n    doc.add( new Field( \"field\", \"two three four\", type ) );\n    doc.add( new Field( \"field\", \"five six five\", type ) );\n    doc.add( new Field( \"field\", \"six seven eight nine eight nine eight \" +\n      \"nine eight nine eight nine eight nine\", type ) );\n    doc.add( new Field( \"field\", \"eight nine\", type ) );\n    doc.add( new Field( \"field\", \"ten eleven\", type ) );\n    doc.add( new Field( \"field\", \"twelve thirteen\", type ) );\n    writer.addDocument(doc);\n\n    BaseFragListBuilder fragListBuilder = new SimpleFragListBuilder();\n    BaseFragmentsBuilder fragmentsBuilder = new SimpleFragmentsBuilder();\n    fragmentsBuilder.setDiscreteMultiValueHighlighting(true);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter(true, true, fragListBuilder, fragmentsBuilder);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n\n    // Phrase that spans a field value\n    Query q = new PhraseQuery(\"field\", \"four\", \"five\");\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(q, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"two three <b>four</b>\", bestFragments[0]);\n    assertEquals(\"<b>five</b> six five\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    // Phrase that ends at a field value\n    q = new PhraseQuery(\"field\", \"three\", \"five\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one two <b>three five</b>\", bestFragments[0]);\n    assertEquals(1, bestFragments.length);\n\n    // Phrase that spans across three values\n    q = new PhraseQuery(\"field\", \"nine\", \"ten\", \"eleven\", \"twelve\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"eight <b>nine</b>\", bestFragments[0]);\n    assertEquals(\"<b>ten eleven</b>\", bestFragments[1]);\n    assertEquals(\"<b>twelve</b> thirteen\", bestFragments[2]);\n    assertEquals(3, bestFragments.length);\n\n    // Term query that appears in multiple values\n    q = new TermQuery(new Term(\"field\", \"two\"));\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one <b>two</b> three five\", bestFragments[0]);\n    assertEquals(\"<b>two</b> three four\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhrasesSpanningFieldValues().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhrasesSpanningFieldValues().mjava","sourceNew":"  public void testPhrasesSpanningFieldValues() throws IOException {\n    Directory dir = newDirectory();\n    // positionIncrementGap is 0 so the pharse is found across multiple field\n    // values.\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field( \"field\", \"one two three five\", type ) );\n    doc.add( new Field( \"field\", \"two three four\", type ) );\n    doc.add( new Field( \"field\", \"five six five\", type ) );\n    doc.add( new Field( \"field\", \"six seven eight nine eight nine eight \" +\n      \"nine eight nine eight nine eight nine\", type ) );\n    doc.add( new Field( \"field\", \"eight nine\", type ) );\n    doc.add( new Field( \"field\", \"ten eleven\", type ) );\n    doc.add( new Field( \"field\", \"twelve thirteen\", type ) );\n    writer.addDocument(doc);\n\n    BaseFragListBuilder fragListBuilder = new SimpleFragListBuilder();\n    BaseFragmentsBuilder fragmentsBuilder = new SimpleFragmentsBuilder();\n    fragmentsBuilder.setDiscreteMultiValueHighlighting(true);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter(true, true, fragListBuilder, fragmentsBuilder);\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n\n    // Phrase that spans a field value\n    Query q = new PhraseQuery(\"field\", \"four\", \"five\");\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(q, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"two three <b>four</b>\", bestFragments[0]);\n    assertEquals(\"<b>five</b> six five\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    // Phrase that ends at a field value\n    q = new PhraseQuery(\"field\", \"three\", \"five\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one two <b>three five</b>\", bestFragments[0]);\n    assertEquals(1, bestFragments.length);\n\n    // Phrase that spans across three values\n    q = new PhraseQuery(\"field\", \"nine\", \"ten\", \"eleven\", \"twelve\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"eight <b>nine</b>\", bestFragments[0]);\n    assertEquals(\"<b>ten eleven</b>\", bestFragments[1]);\n    assertEquals(\"<b>twelve</b> thirteen\", bestFragments[2]);\n    assertEquals(3, bestFragments.length);\n\n    // Term query that appears in multiple values\n    q = new TermQuery(new Term(\"field\", \"two\"));\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one <b>two</b> three five\", bestFragments[0]);\n    assertEquals(\"<b>two</b> three four\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPhrasesSpanningFieldValues() throws IOException {\n    Directory dir = newDirectory();\n    // positionIncrementGap is 0 so the pharse is found across multiple field\n    // values.\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field( \"field\", \"one two three five\", type ) );\n    doc.add( new Field( \"field\", \"two three four\", type ) );\n    doc.add( new Field( \"field\", \"five six five\", type ) );\n    doc.add( new Field( \"field\", \"six seven eight nine eight nine eight \" +\n      \"nine eight nine eight nine eight nine\", type ) );\n    doc.add( new Field( \"field\", \"eight nine\", type ) );\n    doc.add( new Field( \"field\", \"ten eleven\", type ) );\n    doc.add( new Field( \"field\", \"twelve thirteen\", type ) );\n    writer.addDocument(doc);\n\n    BaseFragListBuilder fragListBuilder = new SimpleFragListBuilder();\n    BaseFragmentsBuilder fragmentsBuilder = new SimpleFragmentsBuilder();\n    fragmentsBuilder.setDiscreteMultiValueHighlighting(true);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter(true, true, fragListBuilder, fragmentsBuilder);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n\n    // Phrase that spans a field value\n    Query q = new PhraseQuery(\"field\", \"four\", \"five\");\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(q, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"two three <b>four</b>\", bestFragments[0]);\n    assertEquals(\"<b>five</b> six five\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    // Phrase that ends at a field value\n    q = new PhraseQuery(\"field\", \"three\", \"five\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one two <b>three five</b>\", bestFragments[0]);\n    assertEquals(1, bestFragments.length);\n\n    // Phrase that spans across three values\n    q = new PhraseQuery(\"field\", \"nine\", \"ten\", \"eleven\", \"twelve\");\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"eight <b>nine</b>\", bestFragments[0]);\n    assertEquals(\"<b>ten eleven</b>\", bestFragments[1]);\n    assertEquals(\"<b>twelve</b> thirteen\", bestFragments[2]);\n    assertEquals(3, bestFragments.length);\n\n    // Term query that appears in multiple values\n    q = new TermQuery(new Term(\"field\", \"two\"));\n    fieldQuery  = highlighter.getFieldQuery(q, reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 1000, 1000);\n    assertEquals(\"one <b>two</b> three five\", bestFragments[0]);\n    assertEquals(\"<b>two</b> three four\", bestFragments[1]);\n    assertEquals(2, bestFragments.length);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["39700f0117ce4ef15f96e8069885d58983707139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39700f0117ce4ef15f96e8069885d58983707139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39700f0117ce4ef15f96e8069885d58983707139"],"39700f0117ce4ef15f96e8069885d58983707139":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}