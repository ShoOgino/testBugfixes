{"path":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults)\n      throws Exception {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults)\n      throws Exception {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults)\n      throws Exception {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults)\n      throws Exception {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid value\", 2.0, node.value, 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid value\", 2.0, node.value, 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 2.0, result.getFacetResultNode()\n        .getValue(), 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, result.getFacetResultNode()\n        .getNumSubResults());\n\n    Iterator<? extends FacetResultNode> subResults = result\n        .getFacetResultNode().getSubResults().iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.getLabel()\n        .toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.getValue(), 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.getLabel()\n        .toString());\n\n    result = results.get(1);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n    result = results.get(2);\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", result.getFacetResultNode()\n        .getLabel().toString());\n    assertEquals(\"Invalid value\", 1,\n        result.getFacetResultNode().getValue(), 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, result\n        .getFacetResultNode().getNumSubResults());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid value\", 2.0, node.value, 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid value\", 2.0, node.value, 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["811cdb4a80352766eb0c762e48972707a924e5cd"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"811cdb4a80352766eb0c762e48972707a924e5cd":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}