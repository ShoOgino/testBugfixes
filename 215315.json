{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}