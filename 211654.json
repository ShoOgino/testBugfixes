{"path":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","pathOld":"/dev/null","sourceNew":"  private void sort() throws IOException {\n    pq.clear();\n    for (PhrasePositions pp = first; more && pp != null; pp = pp.next) {\n      more = pp.next();\n      if (more) {\n        pq.put(pp);\n      } else {\n        return;\n      }\n    }\n    pqToList();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"025fe58b45c52b31e5a475824ec735964a97d5a1","date":1081356034,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","sourceNew":"  private void sort() {\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next)\n      pq.put(pp);\n    pqToList();\n  }\n\n","sourceOld":"  private void sort() throws IOException {\n    pq.clear();\n    for (PhrasePositions pp = first; more && pp != null; pp = pp.next) {\n      more = pp.next();\n      if (more) {\n        pq.put(pp);\n      } else {\n        return;\n      }\n    }\n    pqToList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","sourceNew":"  private void sort() {\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pq.add(pp);\n    }\n    pqToList();\n  }\n\n","sourceOld":"  private void sort() {\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next)\n      pq.put(pp);\n    pqToList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#sort().mjava","sourceNew":"  private void sort() {\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pq.add(pp);\n    }\n    pqToList();\n  }\n\n","sourceOld":"  private void sort() {\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pq.add(pp);\n    }\n    pqToList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["025fe58b45c52b31e5a475824ec735964a97d5a1"],"025fe58b45c52b31e5a475824ec735964a97d5a1":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"025fe58b45c52b31e5a475824ec735964a97d5a1":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["025fe58b45c52b31e5a475824ec735964a97d5a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}