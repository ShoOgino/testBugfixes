{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStreamInsufficientCredentials().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStreamInsufficientCredentials().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndirectUpdateStreamInsufficientCredentials() throws Exception {\n    \n    // regardless of how it's routed, WRITE_Y should NOT have authz to stream updates to X...\n    for (String path : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + path,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id='42',a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_Y_USER, WRITE_Y_USER);\n    \n      // NOTE: Can't make any assertions about Exception: SOLR-14226\n      expectThrows(Exception.class, () -> {\n          final List<Tuple> ignored = getTuples(solrStream);\n        });\n    }\n\n    assertEquals(0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140a95988ddfbe87c2376f5fed6acae475ea11fc","date":1580924964,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStreamInsufficientCredentials().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStreamInsufficientCredentials().mjava","sourceNew":"  public void testIndirectUpdateStreamInsufficientCredentials() throws Exception {\n    \n    // regardless of how it's routed, WRITE_Y should NOT have authz to stream updates to X...\n    for (String path : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + path,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id=42,a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_Y_USER, WRITE_Y_USER);\n    \n      // NOTE: Can't make any assertions about Exception: SOLR-14226\n      expectThrows(Exception.class, () -> {\n          final List<Tuple> ignored = getTuples(solrStream);\n        });\n    }\n\n    assertEquals(0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","sourceOld":"  public void testIndirectUpdateStreamInsufficientCredentials() throws Exception {\n    \n    // regardless of how it's routed, WRITE_Y should NOT have authz to stream updates to X...\n    for (String path : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + path,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id='42',a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_Y_USER, WRITE_Y_USER);\n    \n      // NOTE: Can't make any assertions about Exception: SOLR-14226\n      expectThrows(Exception.class, () -> {\n          final List<Tuple> ignored = getTuples(solrStream);\n        });\n    }\n\n    assertEquals(0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140a95988ddfbe87c2376f5fed6acae475ea11fc"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}