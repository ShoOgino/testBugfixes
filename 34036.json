{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentExpressionDictionary(searcher.getIndexReader(), field, weightExpression, \n        sortFields, payloadField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62b8732cb451168644d19e4d6e4fcf7b07bafc3d","date":1385219983,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<SortField>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentExpressionDictionary(searcher.getIndexReader(), field, weightExpression, \n        sortFields, payloadField);\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentExpressionDictionary(searcher.getIndexReader(), field, weightExpression, \n        sortFields, payloadField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<SortField>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentExpressionDictionary(searcher.getIndexReader(), field, weightExpression, \n        sortFields, payloadField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c5f879e49375db0f48ca533856f226c2db57a5","date":1390688316,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<SortField>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<SortField>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentExpressionDictionary(searcher.getIndexReader(), field, weightExpression, \n        sortFields, payloadField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<SortField>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d048016075a0b8589fcfc77fdf8e2a29fc80964","date":1494631326,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        sortFields.add(getSortField(core, sortFieldName));\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/DocumentExpressionDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        sortFields.add(getSortField(core, sortFieldName));\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if(params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String field = (String) params.get(FIELD);\n    String payloadField = (String) params.get(PAYLOAD_FIELD);\n    String weightExpression = (String) params.get(WEIGHT_EXPRESSION);\n    Set<SortField> sortFields = new HashSet<>();\n    \n    if (field == null) {\n      throw new IllegalArgumentException(FIELD + \" is a mandatory parameter\");\n    }\n    \n    if (weightExpression == null) {\n      throw new IllegalArgumentException(WEIGHT_EXPRESSION + \" is a mandatory parameter\");\n    }\n    \n    for(int i = 0; i < params.size(); i++) {\n      if (params.getName(i).equals(SORT_FIELD)) {\n        String sortFieldName = (String) params.getVal(i);\n\n        SortField.Type sortFieldType = getSortFieldType(core, sortFieldName);\n        \n        if (sortFieldType == null) {\n          throw new IllegalArgumentException(sortFieldName + \" could not be mapped to any appropriate type\"\n              + \" [long, int, float, double]\");\n        }\n        \n        SortField sortField = new SortField(sortFieldName, sortFieldType);\n        sortFields.add(sortField);\n      }\n    }\n   \n    return new DocumentValueSourceDictionary(searcher.getIndexReader(), field, fromExpression(weightExpression,\n        sortFields), payloadField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["11c5f879e49375db0f48ca533856f226c2db57a5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"62b8732cb451168644d19e4d6e4fcf7b07bafc3d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62b8732cb451168644d19e4d6e4fcf7b07bafc3d"],"11c5f879e49375db0f48ca533856f226c2db57a5":["62b8732cb451168644d19e4d6e4fcf7b07bafc3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"62b8732cb451168644d19e4d6e4fcf7b07bafc3d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","11c5f879e49375db0f48ca533856f226c2db57a5"],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f2e96099703c24c0c63d27806ba7020626b649b":["62b8732cb451168644d19e4d6e4fcf7b07bafc3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"11c5f879e49375db0f48ca533856f226c2db57a5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}