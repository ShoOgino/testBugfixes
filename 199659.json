{"path":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":["3e00f80591de714c6975f454e33e0fa5218b5902"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() throws IOException {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   computeNorm(d, \"bogus\", i),\n                   computeNorm(s, \"bogus\", i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(ss, \"bogus\", i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bogus\", i - 9);\n      final float normS = computeNorm(s, \"bogus\", i);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"foo\", i),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"foo\", i-9);\n      final float normS = computeNorm(sp, \"foo\", i);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"bar\", i),\n                   0.01f);\n    }\n    \n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"yak\", i),\n                   0.01f);\n    }\n    \n    for (int i = 13; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bar\", i-12);\n      final float normS = computeNorm(sp, \"bar\", i);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 9; i < 1000; i++) {\n      final float normD = computeNorm(d, \"yak\", i-8);\n      final float normS = computeNorm(sp, \"yak\", i);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      final float normSS = computeNorm(sp, \"a\", i);\n      final float normS = computeNorm(sp, \"b\", i);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() throws IOException {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   computeNorm(d, \"bogus\", i),\n                   computeNorm(s, \"bogus\", i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(ss, \"bogus\", i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bogus\", i - 9);\n      final float normS = computeNorm(s, \"bogus\", i);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"foo\", i),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"foo\", i-9);\n      final float normS = computeNorm(sp, \"foo\", i);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"bar\", i),\n                   0.01f);\n    }\n    \n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"yak\", i),\n                   0.01f);\n    }\n    \n    for (int i = 13; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bar\", i-12);\n      final float normS = computeNorm(sp, \"bar\", i);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 9; i < 1000; i++) {\n      final float normD = computeNorm(d, \"yak\", i-8);\n      final float normS = computeNorm(sp, \"yak\", i);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      final float normSS = computeNorm(sp, \"a\", i);\n      final float normS = computeNorm(sp, \"b\", i);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  // TODO: rewrite this test to not make thosuands of indexes.\n  @Nightly\n  public void testSweetSpotComputeNorm() throws IOException {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   computeNorm(d, \"bogus\", i),\n                   computeNorm(s, \"bogus\", i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(ss, \"bogus\", i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bogus\", i - 9);\n      final float normS = computeNorm(s, \"bogus\", i);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"foo\", i),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"foo\", i-9);\n      final float normS = computeNorm(sp, \"foo\", i);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"bar\", i),\n                   0.01f);\n    }\n    \n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"yak\", i),\n                   0.01f);\n    }\n    \n    for (int i = 13; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bar\", i-12);\n      final float normS = computeNorm(sp, \"bar\", i);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 9; i < 1000; i++) {\n      final float normD = computeNorm(d, \"yak\", i-8);\n      final float normS = computeNorm(sp, \"yak\", i);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      final float normSS = computeNorm(sp, \"a\", i);\n      final float normS = computeNorm(sp, \"b\", i);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() throws IOException {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new ClassicSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   computeNorm(d, \"bogus\", i),\n                   computeNorm(s, \"bogus\", i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(ss, \"bogus\", i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bogus\", i - 9);\n      final float normS = computeNorm(s, \"bogus\", i);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // separate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"foo\", i),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      final float normD = computeNorm(d, \"foo\", i-9);\n      final float normS = computeNorm(sp, \"foo\", i);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"bar\", i),\n                   0.01f);\n    }\n    \n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeNorm(sp, \"yak\", i),\n                   0.01f);\n    }\n    \n    for (int i = 13; i < 1000; i++) {\n      final float normD = computeNorm(d, \"bar\", i-12);\n      final float normS = computeNorm(sp, \"bar\", i);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n    \n    for (int i = 9; i < 1000; i++) {\n      final float normD = computeNorm(d, \"yak\", i-8);\n      final float normS = computeNorm(sp, \"yak\", i);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.01f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      final float normSS = computeNorm(sp, \"a\", i);\n      final float normS = computeNorm(sp, \"b\", i);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["615370d2b876c3435773b5174df2e2242ad7981a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"acd9883560fd89e6448b2b447302fe543040cd4f":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["7602e63987582091a0e432f8d8f7619d2206fab7"],"7602e63987582091a0e432f8d8f7619d2206fab7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"615370d2b876c3435773b5174df2e2242ad7981a":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7602e63987582091a0e432f8d8f7619d2206fab7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"7602e63987582091a0e432f8d8f7619d2206fab7":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}