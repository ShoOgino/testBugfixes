{"path":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}