{"path":"solr/core/src/test/org/apache/solr/cloud/ClusterStateMockUtilTest#testBuildClusterState_ReplicaStateAndType().mjava","commits":[{"id":"7f6c2c088b7e829984b5bca4359702c0d5ccc62b","date":1581143367,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateMockUtilTest#testBuildClusterState_ReplicaStateAndType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildClusterState_ReplicaStateAndType() {\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csrStRpDnF\", \"baseUrl1_\")) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      assertNotNull(clusterState);\n      assertEquals(1, clusterState.getCollectionStates().size());\n      DocCollection collection1 = clusterState.getCollectionOrNull(\"collection1\");\n      assertNotNull(collection1);\n      assertEquals(DocRouter.DEFAULT, collection1.getRouter());\n      assertEquals(1, collection1.getActiveSlices().size());\n      assertEquals(1, collection1.getSlices().size());\n      Slice slice1 = collection1.getSlice(\"slice1\");\n      assertNotNull(slice1);\n      assertEquals(4, slice1.getReplicas().size());\n      assertEquals(1, slice1.getReplicas(replica -> replica.getType() == Replica.Type.NRT && replica.getState() == Replica.State.ACTIVE).size());\n      assertEquals(1, slice1.getReplicas(replica -> replica.getType() == Replica.Type.NRT && replica.getState() == Replica.State.RECOVERY_FAILED).size());\n      assertEquals(1, slice1.getReplicas(replica -> replica.getType() == Replica.Type.TLOG && replica.getState() == Replica.State.RECOVERING).size());\n      assertEquals(1, slice1.getReplicas(replica -> replica.getType() == Replica.Type.PULL && replica.getState() == Replica.State.DOWN).size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f6c2c088b7e829984b5bca4359702c0d5ccc62b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f6c2c088b7e829984b5bca4359702c0d5ccc62b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f6c2c088b7e829984b5bca4359702c0d5ccc62b"],"7f6c2c088b7e829984b5bca4359702c0d5ccc62b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}